{"version":3,"sources":["assets/scripts/game/multiplayer/shared/BitStream.ts","assets/scripts/game/online/ClientRequest.ts","assets/scripts/game/ConfigGame.ts","assets/scripts/game/game_states/GameState.ts","assets/scripts/game/multiplayer/shared/JsonPacker.ts","packages/i18n/runtime-scripts/LabelLocalized.ts","assets/scripts/game/multiplayer/shared/NetMessage.ts","assets/scripts/game/components/PersistentObject.ts","assets/scripts/game/online/PingRequest.ts","packages/i18n/runtime-scripts/RichTextLocalized.ts","assets/scripts/game/multiplayer/shared/SCCustomCodec.ts","assets/scripts/game/multiplayer/shared/SCFormatter.ts","assets/scripts/game/sequence/SequenceManager.ts","assets/scripts/game/sequence/SequenceNodeSerial.ts","assets/scripts/game/sequence/SequenceNodeShowGreetingPopup.ts","assets/scripts/game/sequence/SequenceNodeShowPopup.ts","assets/scripts/game/sequence/SequenceNodeShowSelectSkinPopup.ts","assets/scripts/game/sequence/SequenceNodeShowServerSelectionPopup.ts","assets/scripts/game/sequence/SequenceNodeWait.ts","assets/scripts/game/sequence/SequenceNode.ts","assets/scripts/game/online/ServerConnectionRequest.ts","assets/scripts/game/online/ServerDisconnectionRequest.ts","assets/scripts/game/online/ServerInfoRequest.ts","assets/scripts/game/bomb.ts","assets/scripts/game/camera-control.ts","assets/scripts/game/multiplayer/client.ts","assets/scripts/config.ts","assets/scripts/game/debug/debug.ts","assets/scripts/core/event-manager.ts","assets/scripts/game/exp-buble.ts","assets/scripts/game/firebaseAppInst.ts","assets/scripts/game/game.ts","assets/scripts/game/ui/healthbar.ts","assets/scripts/game/menu/help-page.ts","packages/i18n/runtime-scripts/i18n.js","assets/scripts/game/input-keyboard.ts","assets/scripts/game/input-touch.ts","assets/scripts/game/input.ts","assets/scripts/game/ui/leaderboard.ts","assets/scripts/game/ui/levelexp-control.ts","assets/scripts/core/loader.ts","assets/scripts/core/localization.ts","assets/scripts/game/menu/main-menu.ts","assets/scripts/game/ui/minimap.ts","assets/scripts/game/net-component.ts","assets/scripts/game/notifier.ts","assets/scripts/game/player-control-local.ts","assets/scripts/game/player-control.ts","assets/scripts/player-ref.ts","assets/scripts/game/player.ts","packages/i18n/runtime-scripts/polyglot.js","assets/scripts/core/popup.ts","assets/scripts/game/resources-cacher.ts","assets/scripts/core/sound-manager.ts","assets/scripts/game/ui/special-skill.ts","assets/scripts/game/sequence/squence_first_launch.ts","assets/scripts/core/transport-message.ts","assets/scripts/game/tutorial.ts","assets/migration/use_reversed_rotateBy.js","assets/migration/use_reversed_rotateTo.js","assets/migration/use_v2.1-2.2.1_cc.Toggle_event.js","assets/scripts/utils.ts","assets/scripts/widget-align.ts"],"names":["BitView","source","byteOffset","byteLength","ArrayBuffer","Buffer","Error","length","this","_view","Uint8Array","bigEndian","Object","defineProperty","prototype","get","from","buffer","setBit","offset","on","getBits","bits","signed","available","value","i","remaining","bitOffset","currentByte","read","Math","min","setBits","wrote","mask","writeBits","destMask","destShift","getBoolean","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","_scratch","setUint32","getFloat64","setBoolean","setUint8","setInt8","setUint16","setInt16","setInt32","setFloat32","setFloat64","getArrayBuffer","DataView","exports","reader","name","size","_index","_length","val","writer","readASCIIString","stream","bytes","readString","readUTF8String","utf8","chars","append","fixedLength","floor","c","readUint8","push","string","String","fromCharCode","apply","decodeURIComponent","escape","e","writeASCIIString","writeUint8","charCodeAt","writeUTF8String","byteArray","stringToByteArray","str","unicode","b","BitStream","readBoolean","readInt8","readInt16","readUint16","readInt32","readUint32","readFloat32","readFloat64","writeBoolean","writeInt8","writeInt16","writeUint16","writeInt32","writeUint32","writeFloat32","writeFloat64","isBuffer","_startIndex","set","ceil","readBits","data","readBitStream","bitLength","slice","writeBitStream","bitsToWrite","bitsLeft","index","readArrayBuffer","writeArrayBuffer","_a","cc","_decorator","ccclass","ClientRequest","property","ClientRequest_1","StartRequest","event","onRequestFinished","ms_client","sendRequest","onGameInfo","info","console","log","onJoinGame","onServerData","onError","error","onDeath","onNotiMessage","msg","onLeaderboardChange","__decorate","ConfigGame","FPS","TILE_SIZE","WORLD_WIDTH","WORLD_HEIGHT","BOSS_COUNT","BOSS_CHANGEDIR_FRQ","BOSS_FIREBOMB_FRQ","PLAYER_WIDTH","PLAYER_HALF_W","PLAYER_HEIGHT","PLAYER_HALF_H","PLAYER_SPEED","PLAYER_START_HEALTH","PLAYER_EXP_GAIN_BASE","PLAYER_LEVEL_MAX","BOMB_SPEED","BOMB_RANGE","BOMB_LENGTH","BOMB_BASE_DAMGE","EXP_BUBLE_WIDTH","EXP_BUBLE_HEIGHT","EXP_BUBLE_EXP","EXP_BUBLE_PER_SCREEN","EXP_BUBLE_COUNT","round","PLAYER_SKILL_COOLDOWN","PLAYERS_AS_TARGET","BURN_DAMAGE","BURN_INTERVAL","SLOW_PERCENT","EFFECT_DURATION","OBSTACLES","getDamge","level","getExpGain","exp","getHealth","getLevelExp","pow","NewClass","_super","_this","arguments","label","text","__extends","start","Label","Component","default","Type","BitStream_1","require","TypeSize","Bit","UInt2","UInt3","UInt4","UInt5","UInt6","UInt7","UInt8","UInt9","UInt10","UInt11","UInt12","UInt13","UInt14","UInt15","UInt16","UInt32","Array","Binary","scProto","maxIdx","template","emit","type","cid","publish","channel","response","rid","JsonPacker","setProto","writePrimitive","PrimativeType","warn","write","input","key","proto","indexBit","readPrimitive","out","keyIdx","keyIndex_","updateKeyIndex","object","log2","pack","view","byteIndex","unpack","requireComponent","executeInEditMode","menu","i18n","LabelLocalized","_textKey","textProp","updateLabel","onLoad","getComponent","keys","textKey","trim","split","t","updateTextProp","props","multiline","tooltip","Message","NetMessage","MsgServerInfo","MsgGameInfo","bs","worldW","worldH","playerW","playerH","playerSpeed","bombRange","MsgQueryPlayer","player","getExtraData","id","MsgQueryBomb","bomb","endX","endY","owner","MsgJoinGame","x","y","startHealth","MsgLeaderBoard","forEach","item","score","arr","MsgServerData","deserialPlayer","spec","cskin","opacity","death","action","direction","health","vulnerable","buff","buffs","bombable","skillable","cooldown","lastInputSeq","deserialBomb","percent","exploded","skin","deserialExpBuble","players","bombs","bubles","nPlayers","nBombs","nExps","MsgInputAction","time","seq","fire","fire_dir","fire_range","MsgDeath","killer","MsgNofity","kill","deathman","PersistentObject","game","addPersistRootNode","node","PingRequest","callback","call","m_callback","ping","LabelLocalized_1","RichTextLocalized","RichText","SCFormatter_1","JsonPacker_1","SCCustomCodec","compressPublishPacket","decompressPublishPacket","compressEmitPacket","decompressEmitPacket","compressResponsePacket","decompressResponsePacket","clonePacket","clone","hasOwnProperty","formatSinglePacket","deformatSinglePacket","encode","packer","scformatter","decode","base64Chars","validJSONStartRegex","arrayBufferToBase64","arraybuffer","len","base64","substring","binaryToBase64Replacer","toString","isArray","message","test","JSON","parse","err","stringify","SequenceNode_1","SequenceManager","sequences","m_nodeIdx","update","dt","updateNode","UpdateNode","IsFinished","SequenceNode","SequenceNodeSerial","Finish","SequenceNodeShowSelectSkinPopup_1","player_ref_1","SequenceNodeShowGreetingPopup","ShowPopup","main_menu","showGreetingPopup","selectSkinPopup_setTitle","OnCloseButtonPressed","customEventData","current","first_launch_step","SequenceNodeShowSelectSkinPopup","SequenceNodeShowPopupState","SequenceNodeShowPopup","m_state","INITIALIZED","SetupGUI","CreateConnection","STARTED","FINISHED","SequenceNodeShowPopup_1","main_menu_1","selectSkinPopup","m_closeButton","children","getChildByName","Button","clickEventHandler","EventHandler","target","component","handler","m_closeEvent","clickEvents","splice","Node","SequenceNodeShowServerSelectionPopup","showServerSelectionPopup","OnJoinButtonPressed","SequenceNodeWait","delay","m_counter","client_1","ServerConnectionRequest","desc","onSuccessed","onFailed","force","m_desc","m_onSuccessed","m_onFailed","m_force","connectToHost","ServerDisconnectionRequest","disconnect","ServerInfoRequest","res","ParseData","player_count","game_1","net_component_1","event_manager_1","ConfigGame_1","tutorial_1","Effect","Bomb","ownerId","targetPos","timePercent","collider","fire_angle","applyDamge","damage","skill","startPos","endPos","timeFlight","extraData","_exploded","_flying","explosion_anim","fly_anim","onCollisionEnter","other","self","radius","enabled","onCollisionExit","animation","Animation","init","setPosition","isTutorial","setStartPos","setStateData","setExtraData","setTargetPos","v2","tutorial_status","TUTORIAL_STATE","Tutorial_skill","tutorial_sub_status","TUTORIAL_SUB_STATE","Tutorial_checkdoAction","instance","performAction","pos","lerp","play","scale","misc","clamp01","setScale","onAnimationEvent","timeout","dispatch","EVENT_NET_ENTITY_DEATH","removeFromParent","state","indexOf","updateTutorialStatus","setEndPos","getEndPos","updateEndPos","setExplodeStatus","is_exploded","setOwnerPlayer","m_player","utils_1","CameraControl","targetPlayer","camera","followPlayer","_dgMoveDirect","Vec2","ZERO","_dgCamSpeed","_dgCamZoom","_dgKeys","_offset","CameraControl_1","systemEvent","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","Camera","moveToTarget","adjustPos","position","Utils","moveTowards","multiply","dx","zoomRatio","dy","add","l","width","r","height","worldSize","setFollow","follow","setTarget","getTarget","keyCode","macro","KEY","up","down","left","right","f","shift","SCCustomCodec_1","NetMessage_1","sound_manager_1","Client","currentTick","socket","connect","server","servers","last_server_selection","socketCluster","create","hostname","host","port","secure","rejectUnauthorized","autoReconnect","codecEngine","GameInfo","getState","shutdown","Death","onConnected","ms_socket","destroy","sendAction","InputAction","joinGame","JoinGame","registerServerData","getPlayerExtraInfo","QueryPlayer","getBombExtraInfo","QueryBomb","getLeaderBardData","LeaderBoard","ServerData","subscribe","Notify","watch","playEffect","startTime","Date","now","Config","PROJECT_ID","PROJECT_VERSION","Debug","debugInfoText","showCollidBox","debugDrawer","drawBombRange","debugInfo","localPlayer","_onJoinGame","lateUpdate","drawCollder","debugPing","client","schedule","setInfo","updateDebugInfo","debugText","find","zIndex","MAX_ZINDEX","addComponent","Graphics","clear","_drawNode","playerSize","w2","h2","strokeColor","Color","WHITE","world","convertToWorldSpaceAR","moveTo","lineTo","close","stroke","EventManager","eventListenners","_instance","register","priority","excuteOnce","listenner","sort","a","registerOnce","unregister","toRemove_1","filter","unregisterTarget","_loop_1","toRemove","this_1","remove","params","_i","excuteOnce_1","ExpBuble","frames","Sprite","spriteFrame","runAction","sequence","fadeOut","callFunc","SpriteFrame","firebaseApp","_app","anonymousID","isAnonymousSignIn","txtNotify","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","setOutputComponent","txtLable","initFirebaseApp","firebase","apps","initializeApp","analytics","initAuth","auth","signInAnonymously","catch","code","errorMessage","onAuthStateChanged","user","uid","isAnonymous","currentUser","writeGameData","crediental","loadGameData","GoogleAuth","provider","GoogleAuthProvider","addScope","signInWithPopup","then","result","token","credential","accessToken","writeUserData","userId","_control","bombskin","map","_streak","_alive","_showhelp","_isRabitTutorial","_isPenguinTutorial","_isLeafTutorial","database","ref","username","control","characterType","bombType","mapType","streak","alive","showhelp","isRabitTutorial","isPenguinTutorial","isLeafTutorial","firestore","collection","doc","show_help","exists","dataToString","SignInWithEmailPass","email","pass","signInWithEmailAndPassword","errorCode","RegisterEmailPass","createUserWithEmailAndPassword","loader_1","player_1","bomb_1","camera_control_1","player_control_1","leaderboard_1","notifier_1","minimap_1","exp_buble_1","player_control_local_1","popup_1","special_skill_1","resources_cacher_1","Game","worldRoot","killerPopup","notifier","leaderboard","miniMap","playerPrefabs","bombPrefab","expBublePrefab","targetPrefab","mcFrames","localTarget","isDeath","Game_1","loaded","showWaitingPopup","tilemap","TiledMap","tmxAsset","textures","onNetEntityDeath","playMusic","active","USE_DYNAMIC_BOMB","removeFromMap","bskin","myPlayer","instantiate","__assign","addChild","setPlayerSkill","hideWaitingPopup","pinfo","controller","setServerData","setData","player_2","setPlayerName","binfo","bomb_2","bubleInfo","buble","updatePlayersPosition","updateLeaderBoard","updatePlayersDisplay","updateRank","updateLocalTarget","range","rad","PI","cos","sin","updateLocalRecord","timePlay","getComponentInChildren","fadeIn","delayTime","stop","showAds","scheduleOnce","showConfirmPopup","replay","bind","quit","window","ga_category","ga_action","ga_label","ga_noninteraction","director","loadScene","playRandom","addNotify","showInfoPopup","onDestroy","onButtonQuit","USE_NEW_PORTAL","pressed_btnfire","dynamic_range","min_range","max_range","count","Prefab","HealthBar","segments","healthColors","curColor","healthBar","ProgressBar","updateHealth","progress","childrenCount","seg","updateNotify","HelpPage","menuPage","apPage","ticked","textPage","previous","next","HelpPage_1","firstLaunch_shouldShow","onButtonsPress","languages","Polyglot","supported_languages","saveLanguage","sys","localStorage","getItem","lang","language","setItem","polyglot","phrases","allowMissing","module","replace","getSaveLang","opt","input_1","KeyInput","dpad","preAngle","updateMove","setInput","w","s","d","space","angle","getMoveDirection","moveDirection","TouchInput","touchZone","buttonFire","buttonSkill","defaultDpadPos","fireCenterPos","fireInfo","buttonZIndex","ControlType","DPad","wg","Widget","updateAlignment","zone","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","extend","TutorialPlayer","isFiring","getLocation","Tutorial_shield","touchPos","parent","convertToNodeSpaceAR","center","getLocationY","getLocationX","getScreenToWorldPoint","atan2","sqrt","onButtonFire","interactable","Input","inputSources","weight","getData","Leaderboard","entryPrefab","content","ranks","idx","rank","entry","color","GREEN","LevelExpControl","expBar","EVENT_LOCAL_PLAYER_EXP_CHANGE","onExpUpdate","levelExp","transport_message_1","localization_1","executionOrder","Loader","nextScene","targetLoad","_loadInstances","PlayerRef","Sound","Character","_loadGame","Loader_1","getCurrentSceneName","send","initLoader","load","getCurrentLanguage","setLanguage","initialized","allLoaded","inst","scene","_sceneInfos","element","uuid","_scene","_id","url","lastIndexOf","match","Localization","rootNodes","getScene","allLocalizedLabels","labels","getComponentsInChildren","Tabs","ServerConnectionRequest_1","ServerDisconnectionRequest_1","ServerInfoRequest_1","PingRequest_1","MainMenu","controlFrames","tabFrames","contentFrames","popupProfile","badWords","nameBox","popupAbout","tab","None","mainChar","mainSkill","mainGreeting","popup","mc_anim","popup_title","pingColors","YELLOW","RED","posAboutStart","posAboutEnd","speed_pos","VERSION","nameEditing","MainMenu_1","updateSound","container","setupMainContent","checkTutorial","gotoAP","gtm_gameReturn","currentDayObject","currentMilis","getTime","lastPlayInDays","Atob","Btoa","currentPlayInDays","firstDayInDays","firstDayGTM","daysGTM","getFullYear","zeropad","getMonth","getDate","parseInt","showLog","respone","showCustomPopup","title","activePopup","customize","onButtonPlay","goToBattle","onButtonHelp","onButtonClose","setPlayerRef","onEditting","onEditedName","editBox","badName","lower","toLowerCase","json","placeholder","items","onButtonGreeting","onButtonControl","setupPopupContent","Control","onButtonAbout","pos_page","board","getPosition","onButtonSound","soundEnable","setEnable","btn_sound","btn_soundOff","resumeAll","pauseAll","onButtonSkin","onButtonChangeName","focus","onTabButton","onArrowButton","total","abs","Skill","Map","getPlayerRef","child","setupSkinContent","Servers","setupControlContent","setupServersContent","isMobile","onButtonLogin","EditBox","onButtonRegister","onServerSelectionButtonPressed","onServerButtonPressed","cs","onServerSelected","join","enable","status","serverInfoRequest","player_count_format","pingRequest","ping_format","onJoinNowPressed","onServerInfoChanged","navigator","onLine","ShowPopupSomethingWrong","preloadScene","JsonAsset","MiniMap","indicatorPrefab","ratio","indicators","ind","BLUE","setContentSize","leftPlayerId","NetComponent","_cid","lastStateTime","isDestroying","setDeath","Notifier","notifyItem","Layout","noti","insertChild","PlayerControlLocal","lastInputTime","pendingInputs","updateAction","PlayerAction","Idle","playerInfo","handleDeath","processServerData","processInput","serverData","updatePlayerInfo","lastProcessedInputSeq","applyInput","inputData","playerInput","validateInput","playerAction","deltaPos","Move","angleRad","clampf","Fire","m_bomb","tag","DesignType","BOTplayer","Ice","effectsNode","Grass","PlayerControl","positionBuffer","processPosition","renderTime","to","t0","t1","top","setStatus","_current","Touch","istutorial","show","is_tutorial","user_cred","user_email","step","server_index","AttackType","PlayerStatus","healthbar_1","Player","playerName","sprite","directionSprite","fx_shield","rankFrames","buffFrames","atkType","maxDistanceCanfire","isRobot","autoMove","autoFire","stopPoint","shield","numofBombReceive","effects","invulnerable","pendingAnim","move_anim","idle_anim","fire_anim","animIdx","rank_anim","fx_levelUp","fx_warn","fx_buff","currentClip","setBombskin","getPlayerName","setTimeout","hasStatus","Block","Invisible","showEffect","ExpX2","DefX2","DmgX2","eff","anim","updateImpactEffects","activeEffect","effect","attacker","interval","deactiveEffect","dsprite","enableAttack","Normal","m_bskin","getBombskin","setImpactEffect","eff_list","_pos","setBombAnim","_bomb","CircleCollider","bot_x","bot_y","mc_x","mc_y","tmp","distance","cos_alpha","radian","acos","timeMove","root","factory","define","amd","_typeof","global","options","currentLocale","locale","newLocale","morePhrases","prefix","phrase","unset","newPhrases","smart_count","_","interpolate","choosePluralForm","has","delimeter","pluralTypes","chinese","n","german","french","russian","czech","polish","icelandic","pluralTypeToLanguages","langToTypeMap","mapping","langs","ret","trimRe","texts","pluralTypeIndex","pluralTypeName","langToPluralType","en","dollarRegex","dollarBillsYall","arg","replacement","RegExp","prop","Popup","dialogPopup","waitingPopup","waitingPopupNode","Popup_1","closeCallback","hasConfirmation","cancelCallback","canvas","blockInput","horizontalAlign","verticalAlign","cancel","positive","negative","mc","played_time","kill_no","positiveCallback","negativeCallback","showNotify","duration","State","Cacher","mc_anims","loader","loadRes","dir","texture","SoundManager","sounds","playingSounds","effectEnable","musicEnable","DEBUG_LOG","SoundManager_1","setEffectEnable","setMusicEnable","loadResDir","AudioClip","assets","urls","sound","clipName","loop","audioEngine","clipsName","random","pause","undefined","AudioState","PLAYING","resume","PAUSED","isPlaying","stopAll","setMusicVolume","volume","setEffectVolume","setEffectsVolume","getSoundId","SpecialSkill","uiRoot","skillFrames","normalFrames","bgFrames","skillSprite","bgSkillSprite","normalSprite","skillCooldown","fireBtn","skillBtn","firePad","skillPad","GRAY","SequenceManager_1","squence_first_launch","sm","TransportMessage","_messages","deleteAfterRead","messageContent","Tutorial","worldMap","btn_playnow","TutorialPopup","TutorialHand","handPos","players_list","textshow","isEndStopPoint","animStopPoint","botFireCount","block_firepad","block_touchzone","block_skillpad","btn_firepad","btn_dpad","btn_skillpad","state_comepleted","lockControl","collisionManager","isWaitingReleaseDPad","numofBomb","Tutorial_1","resetTutorialState","Tutorial_move","Tutorial_default","getCollisionManager","enabledDebugDraw","initEntities","setlockControl","gotoMainMenu","UpdateTutorial_Step","playerBomb","botSkin","botPlayer","botBomb","generateBomb","bombid","Tutorial_fire","updateBombSkill","resetTempleStatus","lock","Tutorial_finish","ui_node","popup_node","tmp_1","UpdateTutorial_SubStep","tmp_2","tmp_3","controlname","text1","text2","Tutorial_stopPoint","ctr_tmp","blink","repeat","setTag","isDone","onPlayNowPress","RotateBy","_reverse","RotateTo","Toggle","_triggerEventInScript_isChecked","RandomUnique","recycle","unique","initLength","Constant","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","genUId","substr","obj","src","randomRange","max","zeroes","sign","maxDelta","v2MoveTowards","diff","sub","mag","div","mul","ENCODE_LOCAL_STORAGE","atob","btoa","WidgetAlign","SIZE_CHANGED","onParentSizeChange","widget"],"mappings":"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","sourcesContent":["// Typescript port from https://github.com/inolen/bit-buffer/blob/master/bit-buffer.js\r\n\r\n/**********************************************************\r\n *\r\n * BitView\r\n *\r\n * BitView provides a similar interface to the standard\r\n * DataView, but with support for bit-level reads / writes.\r\n *\r\n **********************************************************/\r\nexport class BitView {\r\n    // Used to massage fp values so we can operate on them at the bit level.\r\n    private static _scratch = new DataView(new ArrayBuffer(8));\r\n\r\n    private _view: Uint8Array;\r\n\r\n    public bigEndian: boolean;\r\n\r\n    constructor(source: ArrayBuffer | Buffer, byteOffset?: number, byteLength?: number) {\r\n        let isBuffer = source instanceof ArrayBuffer ||\r\n            (typeof Buffer !== 'undefined' && source instanceof Buffer);\r\n\r\n        if (!isBuffer) {\r\n            throw new Error('Must specify a valid ArrayBuffer or Buffer.');\r\n        }\r\n\r\n        byteOffset = byteOffset || 0;\r\n        byteLength = byteLength || (source as ArrayBuffer).byteLength /* ArrayBuffer */ || (source as Buffer).length /* Buffer */;\r\n\r\n        this._view = new Uint8Array(source, byteOffset, byteLength);\r\n\r\n        this.bigEndian = false;\r\n    }\r\n\r\n    get buffer(): ArrayBuffer | Buffer {\r\n        return typeof Buffer !== 'undefined' ? Buffer.from(this._view.buffer) : this._view.buffer;\r\n    }\r\n\r\n    get byteLength(): number {\r\n        return this._view.length;\r\n    }\r\n\r\n    public setBit(offset: number, on: boolean) {\r\n        if (on) {\r\n            this._view[offset >> 3] |= 1 << (offset & 7);\r\n        } else {\r\n            this._view[offset >> 3] &= ~(1 << (offset & 7));\r\n        }\r\n    }\r\n\r\n    public getBits(offset: number, bits: number, signed?: boolean): number {\r\n        let available = (this._view.length * 8 - offset);\r\n\r\n        if (bits > available) {\r\n            throw new Error('Cannot get ' + bits + ' bit(s) from offset ' + offset + ', ' + available + ' available');\r\n        }\r\n\r\n        let value = 0;\r\n        for (let i = 0; i < bits;) {\r\n            let remaining = bits - i;\r\n            let bitOffset = offset & 7;\r\n            let currentByte = this._view[offset >> 3];\r\n\r\n            // the max number of bits we can read from the current byte\r\n            let read = Math.min(remaining, 8 - bitOffset);\r\n\r\n            let mask, readBits;\r\n            if (this.bigEndian) {\r\n                // create a mask with the correct bit width\r\n                mask = ~(0xFF << read);\r\n                // shift the bits we want to the start of the byte and mask of the rest\r\n                readBits = (currentByte >> (8 - read - bitOffset)) & mask;\r\n\r\n                value <<= read;\r\n                value |= readBits;\r\n            } else {\r\n                // create a mask with the correct bit width\r\n                mask = ~(0xFF << read);\r\n                // shift the bits we want to the start of the byte and mask off the rest\r\n                readBits = (currentByte >> bitOffset) & mask;\r\n\r\n                value |= readBits << i;\r\n            }\r\n\r\n            offset += read;\r\n            i += read;\r\n        }\r\n\r\n        if (signed) {\r\n            // If we're not working with a full 32 bits, check the\r\n            // imaginary MSB for this bit count and convert to a\r\n            // valid 32-bit signed value if set.\r\n            if (bits !== 32 && value & (1 << (bits - 1))) {\r\n                value |= -1 ^ ((1 << bits) - 1);\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        return value >>> 0;\r\n    }\r\n\r\n    public setBits(offset: number, value: number, bits: number) {\r\n        let available = (this._view.length * 8 - offset);\r\n\r\n        if (bits > available) {\r\n            throw new Error('Cannot set ' + bits + ' bit(s) from offset ' + offset + ', ' + available + ' available');\r\n        }\r\n\r\n        for (let i = 0; i < bits;) {\r\n            let remaining = bits - i;\r\n            let bitOffset = offset & 7;\r\n            let byteOffset = offset >> 3;\r\n            let wrote = Math.min(remaining, 8 - bitOffset);\r\n\r\n            let mask, writeBits, destMask;\r\n            if (this.bigEndian) {\r\n                // create a mask with the correct bit width\r\n                mask = ~(~0 << wrote);\r\n                // shift the bits we want to the start of the byte and mask of the rest\r\n                writeBits = (value >> (bits - i - wrote)) & mask;\r\n\r\n                let destShift = 8 - bitOffset - wrote;\r\n                // destination mask to zero all the bits we're changing first\r\n                destMask = ~(mask << destShift);\r\n\r\n                this._view[byteOffset] =\r\n                    (this._view[byteOffset] & destMask)\r\n                    | (writeBits << destShift);\r\n\r\n            } else {\r\n                // create a mask with the correct bit width\r\n                mask = ~(0xFF << wrote);\r\n                // shift the bits we want to the start of the byte and mask of the rest\r\n                writeBits = value & mask;\r\n                value >>= wrote;\r\n\r\n                // destination mask to zero all the bits we're changing first\r\n                destMask = ~(mask << bitOffset);\r\n\r\n                this._view[byteOffset] =\r\n                    (this._view[byteOffset] & destMask)\r\n                    | (writeBits << bitOffset);\r\n            }\r\n\r\n            offset += wrote;\r\n            i += wrote;\r\n        }\r\n    }\r\n\r\n    public getBoolean(offset: number): boolean {\r\n        return this.getBits(offset, 1, false) !== 0;\r\n    }\r\n\r\n    public getInt8(offset: number): number {\r\n        return this.getBits(offset, 8, true);\r\n    }\r\n\r\n    public getUint8(offset: number): number {\r\n        return this.getBits(offset, 8, false);\r\n    }\r\n\r\n    public getInt16(offset: number): number {\r\n        return this.getBits(offset, 16, true);\r\n    }\r\n\r\n    public getUint16(offset: number): number {\r\n        return this.getBits(offset, 16, false);\r\n    }\r\n\r\n\r\n    public getInt32(offset: number): number {\r\n        return this.getBits(offset, 32, true);\r\n    }\r\n\r\n    public getUint32(offset: number): number {\r\n        return this.getBits(offset, 32, false);\r\n    }\r\n\r\n    public getFloat32(offset: number): number {\r\n        BitView._scratch.setUint32(0, this.getUint32(offset));\r\n        return BitView._scratch.getFloat32(0);\r\n    }\r\n\r\n    public getFloat64(offset: number): number {\r\n        BitView._scratch.setUint32(0, this.getUint32(offset));\r\n        // DataView offset is in bytes.\r\n        BitView._scratch.setUint32(4, this.getUint32(offset + 32));\r\n        return BitView._scratch.getFloat64(0);\r\n    }\r\n\r\n    public setBoolean(offset: number, value: number) {\r\n        this.setBits(offset, value ? 1 : 0, 1);\r\n    }\r\n\r\n    public setUint8(offset: number, value: number) {\r\n        this.setBits(offset, value, 8);\r\n    }\r\n    public setInt8(offset: number, value: number) { this.setUint8(offset, value) }\r\n\r\n    public setUint16(offset: number, value: number) {\r\n        this.setBits(offset, value, 16);\r\n    }\r\n    public setInt16(offset: number, value: number) { this.setUint16(offset, value) }\r\n\r\n    public setUint32(offset: number, value: number) {\r\n        this.setBits(offset, value, 32);\r\n    }\r\n    public setInt32(offset: number, value: number) { this.setUint32(offset, value) }\r\n\r\n    public setFloat32(offset: number, value: number) {\r\n        BitView._scratch.setFloat32(0, value);\r\n        this.setBits(offset, BitView._scratch.getUint32(0), 32);\r\n    }\r\n\r\n    public setFloat64(offset: number, value: number) {\r\n        BitView._scratch.setFloat64(0, value);\r\n        this.setBits(offset, BitView._scratch.getUint32(0), 32);\r\n        this.setBits(offset + 32, BitView._scratch.getUint32(4), 32);\r\n    }\r\n\r\n    public getArrayBuffer(offset: number, byteLength: number): ArrayBuffer {\r\n        let buffer = new Uint8Array(byteLength);\r\n        for (let i = 0; i < byteLength; i++) {\r\n            buffer[i] = this.getUint8(offset + (i * 8));\r\n        }\r\n        return buffer.buffer;\r\n    }\r\n}\r\n\r\n/**********************************************************\r\n *\r\n * BitStream\r\n *\r\n * Small wrapper for a BitView to maintain your position,\r\n * as well as to handle reading / writing of string data\r\n * to the underlying buffer.\r\n *\r\n **********************************************************/\r\n// utils function\r\nlet reader = function (name, size) {\r\n    return function () {\r\n        if (this._index + size > this._length) {\r\n            throw new Error('Trying to read past the end of the stream');\r\n        }\r\n        let val = this._view[name](this._index);\r\n        this._index += size;\r\n        return val;\r\n    };\r\n};\r\n\r\nlet writer = function (name, size) {\r\n    return function (value) {\r\n        this._view[name](this._index, value);\r\n        this._index += size;\r\n    };\r\n};\r\n\r\nfunction readASCIIString(stream, bytes) {\r\n    return readString(stream, bytes, false);\r\n}\r\n\r\nfunction readUTF8String(stream, bytes) {\r\n    return readString(stream, bytes, true);\r\n}\r\n\r\nfunction readString(stream, bytes, utf8) {\r\n    if (bytes === 0) {\r\n        return '';\r\n    }\r\n    let i = 0;\r\n    let chars = [];\r\n    let append = true;\r\n    let fixedLength = !!bytes;\r\n    if (!bytes) {\r\n        bytes = Math.floor((stream._length - stream._index) / 8);\r\n    }\r\n\r\n    // Read while we still have space available, or until we've\r\n    // hit the fixed byte length passed in.\r\n    while (i < bytes) {\r\n        let c = stream.readUint8();\r\n\r\n        // Stop appending chars once we hit 0x00\r\n        if (c === 0x00) {\r\n            append = false;\r\n\r\n            // If we don't have a fixed length to read, break out now.\r\n            if (!fixedLength) {\r\n                break;\r\n            }\r\n        }\r\n        if (append) {\r\n            chars.push(c);\r\n        }\r\n\r\n        i++;\r\n    }\r\n\r\n    let string = String.fromCharCode.apply(null, chars);\r\n    if (utf8) {\r\n        try {\r\n            return decodeURIComponent(escape(string)); // https://stackoverflow.com/a/17192845\r\n        } catch (e) {\r\n            return string;\r\n        }\r\n    } else {\r\n        return string;\r\n    }\r\n}\r\n\r\nfunction writeASCIIString(stream, string, bytes) {\r\n    let length = bytes || string.length + 1;  // + 1 for NULL\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        stream.writeUint8(i < string.length ? string.charCodeAt(i) : 0x00);\r\n    }\r\n}\r\n\r\nfunction writeUTF8String(stream, string, bytes) {\r\n    let byteArray = stringToByteArray(string);\r\n\r\n    let length = bytes || byteArray.length + 1;  // + 1 for NULL\r\n    for (let i = 0; i < length; i++) {\r\n        stream.writeUint8(i < byteArray.length ? byteArray[i] : 0x00);\r\n    }\r\n}\r\n\r\nfunction stringToByteArray(str) { // https://gist.github.com/volodymyr-mykhailyk/2923227\r\n    let b = [], i, unicode;\r\n    for (i = 0; i < str.length; i++) {\r\n        unicode = str.charCodeAt(i);\r\n        // 0x00000000 - 0x0000007f -> 0xxxxxxx\r\n        if (unicode <= 0x7f) {\r\n            b.push(unicode);\r\n            // 0x00000080 - 0x000007ff -> 110xxxxx 10xxxxxx\r\n        } else if (unicode <= 0x7ff) {\r\n            b.push((unicode >> 6) | 0xc0);\r\n            b.push((unicode & 0x3F) | 0x80);\r\n            // 0x00000800 - 0x0000ffff -> 1110xxxx 10xxxxxx 10xxxxxx\r\n        } else if (unicode <= 0xffff) {\r\n            b.push((unicode >> 12) | 0xe0);\r\n            b.push(((unicode >> 6) & 0x3f) | 0x80);\r\n            b.push((unicode & 0x3f) | 0x80);\r\n            // 0x00010000 - 0x001fffff -> 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n        } else {\r\n            b.push((unicode >> 18) | 0xf0);\r\n            b.push(((unicode >> 12) & 0x3f) | 0x80);\r\n            b.push(((unicode >> 6) & 0x3f) | 0x80);\r\n            b.push((unicode & 0x3f) | 0x80);\r\n        }\r\n    }\r\n\r\n    return b;\r\n}\r\n\r\nexport class BitStream {\r\n    private _index: number;\r\n    private _startIndex: number;\r\n    private _length: number;\r\n    private _view: BitView;\r\n\r\n    constructor(source: ArrayBuffer | Buffer | BitView, byteOffset?: number, byteLength?: number) {\r\n        let isBuffer = source instanceof ArrayBuffer ||\r\n            (typeof Buffer !== 'undefined' && source instanceof Buffer);\r\n\r\n        if (!(source instanceof BitView) && !isBuffer) {\r\n            throw new Error('Must specify a valid BitView, ArrayBuffer or Buffer');\r\n        }\r\n\r\n        if (isBuffer) {\r\n            this._view = new BitView((source as ArrayBuffer | Buffer), byteOffset, byteLength);\r\n        } else {\r\n            this._view = source as BitView;\r\n        }\r\n\r\n        this._index = 0;\r\n        this._startIndex = 0;\r\n        this._length = this._view.byteLength * 8;\r\n    }\r\n\r\n    get index(): number {\r\n        return this._index - this._startIndex;\r\n    }\r\n    set index(val: number) {\r\n        this._index = val + this._startIndex;\r\n    }\r\n\r\n    get length(): number {\r\n        return this._length - this._startIndex;\r\n    }\r\n    set length(val: number) {\r\n        this._length = val + this._startIndex;\r\n    }\r\n\r\n    get bitsLeft(): number {\r\n        return this._length - this._index;\r\n    }\r\n\r\n    get byteIndex() {\r\n        // Ceil the returned value, over compensating for the amount of\r\n        // bits written to the stream.\r\n        return Math.ceil(this._index / 8);\r\n    }\r\n    set byteIndex(val: number) {\r\n        this._index = val * 8;\r\n    }\r\n\r\n    get buffer(): Buffer | ArrayBuffer {\r\n        return this._view.buffer;\r\n    }\r\n\r\n    get view(): BitView {\r\n        return this._view;\r\n    }\r\n\r\n    get bigEndian() {\r\n        return this._view.bigEndian;\r\n    }\r\n    set bigEndian(val: boolean) {\r\n        this._view.bigEndian = val;\r\n    }\r\n\r\n    public readBits(bits: number, signed?: boolean): number {\r\n        let val = this._view.getBits(this._index, bits, signed);\r\n        this._index += bits;\r\n        return val;\r\n    }\r\n\r\n    public writeBits(value: number, bits: number) {\r\n        this._view.setBits(this._index, value, bits);\r\n        this._index += bits;\r\n    }\r\n\r\n    public readBoolean: () => boolean = reader('getBoolean', 1);\r\n    public readInt8: () => number = reader('getInt8', 8);\r\n    public readUint8: () => number = reader('getUint8', 8);\r\n    public readInt16: () => number = reader('getInt16', 16);\r\n    public readUint16: () => number = reader('getUint16', 16);\r\n    public readInt32: () => number = reader('getInt32', 32);\r\n    public readUint32: () => number = reader('getUint32', 32);\r\n    public readFloat32: () => number = reader('getFloat32', 32);\r\n    public readFloat64: () => number = reader('getFloat64', 64);\r\n\r\n    public writeBoolean: (value: boolean) => void = writer('setBoolean', 1);\r\n    public writeInt8: (value: number) => void = writer('setInt8', 8);\r\n    public writeUint8: (value: number) => void = writer('setUint8', 8);\r\n    public writeInt16: (value: number) => void = writer('setInt16', 16);\r\n    public writeUint16: (value: number) => void = writer('setUint16', 16);\r\n    public writeInt32: (value: number) => void = writer('setInt32', 32);\r\n    public writeUint32: (value: number) => void = writer('setUint32', 32);\r\n    public writeFloat32: (value: number) => void = writer('setFloat32', 32);\r\n    public writeFloat64: (value: number) => void = writer('setFloat64', 64);\r\n\r\n    public readASCIIString(length?: number): string {\r\n        return readASCIIString(this, length);\r\n    }\r\n\r\n    public readUTF8String(length?: number): string {\r\n        return readUTF8String(this, length);\r\n    }\r\n\r\n    public writeASCIIString(data: string, length?: number) {\r\n        writeASCIIString(this, data, length);\r\n    }\r\n\r\n    public writeUTF8String(data: string, length?: number) {\r\n        writeUTF8String(this, data, length);\r\n    }\r\n\r\n    public readBitStream(bitLength: number): BitStream {\r\n        let slice = new BitStream(this._view);\r\n        slice._startIndex = this._index;\r\n        slice._index = this._index;\r\n        slice.length = bitLength;\r\n        this._index += bitLength;\r\n        return slice;\r\n    }\r\n\r\n    public writeBitStream(stream: BitStream, length?: number, offset?: number) {\r\n        if (!length) {\r\n            length = stream.bitsLeft;\r\n        }\r\n\r\n        if(typeof(offset) === 'number') {\r\n            stream.index = offset;\r\n        }\r\n\r\n        let bitsToWrite;\r\n        while (length > 0) {\r\n            bitsToWrite = Math.min(length, 32);\r\n            this.writeBits(stream.readBits(bitsToWrite), bitsToWrite);\r\n            length -= bitsToWrite;\r\n        }\r\n    }\r\n\r\n    public readArrayBuffer(byteLength: number): ArrayBuffer {\r\n        let buffer = this._view.getArrayBuffer(this._index, byteLength);\r\n        this._index += (byteLength * 8);\r\n        return buffer;\r\n    }\r\n\r\n    public writeArrayBuffer(buffer: ArrayBuffer, length?: number) {\r\n        this.writeBitStream(new BitStream(buffer), length * 8);\r\n    }\r\n}\r\n","//hoang.tuduc\r\n//cpp style - protected, private\r\n//ts style  - public\r\n\r\nimport Client, { ClientListener } from \"../multiplayer/client\";\r\nimport Game from \"../game\";\r\nimport { GameInfo, GameInitInfo, GameData, LbInfo, NotifyInfo, DeathInfo } from \"../multiplayer/shared/IMessageData\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport abstract class ClientRequest implements ClientListener\r\n{\r\n    protected static ms_client: Client = null;\r\n\r\n    protected StartRequest(event: string, onRequestFinished: (err, res) => void) { if(ClientRequest.ms_client) ClientRequest.ms_client.sendRequest(event, onRequestFinished) }\r\n\r\n    //hoang.tuduc - game listener\r\n    onGameInfo(info: GameInfo) { console.log(\"ClientRequest - onGameInfo\"); }//if(Game.instance) Game.instance.onGameInfo(info); }\r\n    onJoinGame(info: GameInitInfo) { }//if(Game.instance) Game.instance.onJoinGame(info); }\r\n    onServerData(data: GameData) { }//if(Game.instance) Game.instance.onServerData(data); }\r\n    onError(error) { }//if(Game.instance) Game.instance.onError(error); }\r\n    onDeath(data: DeathInfo) { }//if(Game.instance) Game.instance.onDeath(data); }\r\n    onNotiMessage(msg: NotifyInfo) { }//if(Game.instance) Game.instance.onNotiMessage(msg); }\r\n    onLeaderboardChange(data: LbInfo[]) { }//if(Game.instance) Game.instance.onLeaderboardChange(data); }\r\n\r\n    // abstract OnRequestFinished(err, res: any): void;\r\n}\r\n","export namespace ConfigGame {\r\n    export const FPS = 30;               // game server framerate\r\n    export const TILE_SIZE = 64;           // tile size (px)\r\n    export const WORLD_WIDTH = 28 * TILE_SIZE;     // world map width (px)\r\n    export const WORLD_HEIGHT = 28 * TILE_SIZE;    // world map width (px)\r\n    export const BOSS_COUNT = 10;        // total boss in world\r\n    export const BOSS_CHANGEDIR_FRQ = 3;    // boss change dir frequency (seconds)\r\n    export const BOSS_FIREBOMB_FRQ = 5;    // boss fire bomb frequency (seconds)\r\n    export const PLAYER_WIDTH = 40 * 0.65;\r\n    export const PLAYER_HALF_W = PLAYER_WIDTH / 2;\r\n    export const PLAYER_HEIGHT = 45 * 0.65;\r\n    export const PLAYER_HALF_H = PLAYER_HEIGHT / 2;\r\n    export const PLAYER_SPEED = 200;     // px/second\r\n    export const PLAYER_START_HEALTH = 70;\r\n    export const PLAYER_EXP_GAIN_BASE = 50;\r\n    export const PLAYER_LEVEL_MAX = 6;\r\n    export const BOMB_SPEED = 480;      // px/second\r\n    export const BOMB_RANGE = 80 * 0.65;       // explosion radius in px\r\n    export const BOMB_LENGTH = 250 * 0.85;        // distance that bomb can throw to in px\r\n    export const BOMB_BASE_DAMGE = 50;      // lvl 1 bomb damge\r\n    export const EXP_BUBLE_WIDTH = 20 * 0.5;      // px\r\n    export const EXP_BUBLE_HEIGHT = 20 * 0.5;      // px\r\n    export const EXP_BUBLE_EXP = 5;      // px\r\n    export const EXP_BUBLE_PER_SCREEN = 5;       // avergane bubles exper per screen\r\n    export const EXP_BUBLE_COUNT = EXP_BUBLE_PER_SCREEN * Math.round((WORLD_WIDTH * WORLD_HEIGHT) / (960 * 640));   // 960x640 (design resolution)\r\n    \r\n    export const PLAYER_SKILL_COOLDOWN = 5; //@ seconds\r\n    export const PLAYERS_AS_TARGET = 3;\r\n    export const BURN_DAMAGE = 5;\r\n    export const BURN_INTERVAL = 1;\r\n    export const SLOW_PERCENT = 0.5;\r\n                                // [None,   Immune, Dmg,    Def,    Exp,    Burn,   Slow,   Bind]\r\n    export const EFFECT_DURATION = [0,      15,     10,     10,     10,     5,      5,      3]\r\n    export const OBSTACLES = [\r\n        [[2, 2, 3, 3]],\r\n        [[8, 2, 6, 2]],\r\n        [[18, 2, 6, 2], [23, 2, 3, 3]],\r\n        [[9, 9, 9, 4]],\r\n        [[1, 14, 5, 2]],\r\n        [[22, 15, 5, 2]],\r\n        [[12, 17, 5, 4]],\r\n        [[2, 20, 3, 6], [4, 24, 6, 2]],\r\n        [[18, 24, 6, 2], [23, 22, 3, 4]],\r\n    ]\r\n\r\n\r\n    // function utils\r\n    export function getDamge(level: number): number {\r\n        //level = level > PLAYER_LEVEL_MAX ? PLAYER_LEVEL_MAX : level; //@ remove lvl max\r\n        let damge = BOMB_BASE_DAMGE;\r\n        // for (let i = 2; i <= level; i++) {\r\n        //     damge = damge + 5;\r\n        // }\r\n        return damge;\r\n    }\r\n\r\n    export function getExpGain(level: number): number {\r\n        //level = level > PLAYER_LEVEL_MAX ? PLAYER_LEVEL_MAX : level; //@ remove lvl max\r\n        let exp = PLAYER_EXP_GAIN_BASE;\r\n        for (let i = 2; i <= level; i++) {\r\n            exp = exp + PLAYER_EXP_GAIN_BASE / 2;\r\n        }\r\n        return exp;\r\n    }\r\n\r\n    export function getHealth(level: number): number {\r\n        //level = level > PLAYER_LEVEL_MAX ? PLAYER_LEVEL_MAX : level; //@ remove lvl max\r\n        let health = PLAYER_START_HEALTH * level;\r\n        return health;\r\n    }\r\n\r\n    export function getLevelExp(level: number): number {\r\n        //level = level > PLAYER_LEVEL_MAX ? PLAYER_LEVEL_MAX : level; //@ remove lvl max\r\n        // let exp = 100;\r\n        // for (let i = 2; i <= level; i++) {\r\n        //     exp = exp + 100 / 2;\r\n        // }\r\n        // return exp;\r\n        return 100 * Math.pow(2, level - 1);\r\n    }\r\n    \r\n}","// Learn TypeScript:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n\r\n    @property\r\n    text: string = 'hello';\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","import { BitStream } from \"./BitStream\";\r\n\r\n// simple json compress to ArrayBuffer\r\n\r\nenum Type {\r\n    Bit,\r\n    UInt2,\r\n    UInt3,\r\n    UInt4,\r\n    UInt5,\r\n    UInt6,\r\n    UInt7,\r\n    UInt8,\r\n    UInt9,\r\n    UInt10,\r\n    UInt11,\r\n    UInt12,\r\n    UInt13,\r\n    UInt14,\r\n    UInt15,\r\n    UInt16,\r\n    UInt32,\r\n    String,\r\n    Binary,\r\n    PrimativeType,      // separate, primitive type can be read/write in 1 action\r\n    Object,\r\n    Array,\r\n}\r\n// types to bits map\r\nlet TypeSize = {\r\n    // base\r\n    [Type.Bit]: 1,\r\n    [Type.UInt2]: 2,\r\n    [Type.UInt3]: 3,\r\n    [Type.UInt4]: 4,\r\n    [Type.UInt5]: 5,\r\n    [Type.UInt6]: 6,\r\n    [Type.UInt7]: 7,\r\n    [Type.UInt8]: 8,\r\n    [Type.UInt9]: 9,\r\n    [Type.UInt10]: 10,\r\n    [Type.UInt11]: 11,\r\n    [Type.UInt12]: 12,\r\n    [Type.UInt13]: 13,\r\n    [Type.UInt14]: 14,\r\n    [Type.UInt15]: 15,\r\n    [Type.UInt16]: 16,\r\n    [Type.UInt32]: 32,\r\n    [Type.String]: 8,      // 8 bits for string length\r\n    [Type.Object]: 0,\r\n    [Type.Array]: 8,     // 8 bits for array length\r\n    [Type.Binary]: 10,      // support to 2^10 = 1024Byte\r\n}\r\n\r\n// template for socket cluster message\r\nlet scProto = {\r\n    maxIdx: 5,\r\n    template: {\r\n        emit: {\r\n            index: 1,\r\n            type: Type.Object,\r\n            template: {\r\n                event: { index: 1, type: Type.String },\r\n                data: { index: 2, type: Type.Binary },\r\n                cid: { index: 5, type: Type.UInt16 },\r\n            }\r\n        },\r\n        publish: {\r\n            index: 2,\r\n            type: Type.Object,\r\n            template: {\r\n                data: { index: 2, type: Type.Binary },\r\n                channel: { index: 3, type: Type.String },\r\n                cid: { index: 5, type: Type.UInt16 },\r\n            }\r\n        },\r\n        response: {\r\n            index: 3,\r\n            type: Type.Object,\r\n            template: {\r\n                data: { index: 2, type: Type.Binary },\r\n                rid: { index: 4, type: Type.UInt16 },\r\n            }\r\n        },\r\n    },\r\n}\r\n\r\nexport class JsonPacker {\r\n    private proto;\r\n    private stream: BitStream;\r\n    private indexBit: number;\r\n\r\n    constructor() {\r\n        this.setProto(scProto);\r\n    }\r\n\r\n    private writePrimitive(type: Type, data) {\r\n        if (type < Type.PrimativeType) {\r\n            if (type == Type.String) {\r\n                if (data && typeof (data) === 'string') {\r\n                    this.stream.writeUint8(data.length);\r\n                    this.stream.writeASCIIString(data, data.length);\r\n                } else {\r\n                    console.warn(\"Not valid string type\");\r\n                    this.stream.writeUint8(0x00);\r\n                }\r\n            } else if (type == Type.Binary) {\r\n                if (data instanceof ArrayBuffer) {\r\n                    this.stream.writeBits(data.byteLength, 10);\r\n                    this.stream.writeArrayBuffer(data, data.byteLength)\r\n                } else {\r\n                    console.warn(\"Not valid binary type ArrayBuffer\");\r\n                    this.stream.writeBits(0x00, 10);\r\n                }\r\n            } else {\r\n                this.stream.writeBits(data, TypeSize[type]);\r\n            }\r\n        } else {\r\n            console.warn(\"Do not support primitive type: \" + type);\r\n        }\r\n    }\r\n    private write(input, template) {\r\n        for (let key in input) {\r\n            let proto = template[key];\r\n            if (proto) {\r\n                this.stream.writeBits(proto.index, this.indexBit);\r\n                if (proto.type < Type.PrimativeType) {\r\n                    this.writePrimitive(proto.type, input[key]);\r\n                } else if (proto.type == Type.Object) {\r\n                    this.write(input[key], proto.template);\r\n                    this.stream.writeBits(0x00, this.indexBit);\r\n                } else {\r\n                    console.warn(`Not support write type: ${proto.type}`)\r\n                }\r\n            } else {\r\n                console.warn(`Key [${key}] not found in template`)\r\n            }\r\n        }\r\n    }\r\n\r\n    private readPrimitive(type: Type) {\r\n        if(type < Type.PrimativeType) {\r\n            if(type == Type.String) {\r\n                let length = this.stream.readUint8();\r\n                return length == 0 ? null : this.stream.readASCIIString(length);\r\n            } else if (type == Type.Binary) {\r\n                let length = this.stream.readBits(10);\r\n                return this.stream.readArrayBuffer(length);\r\n            } else {\r\n                return this.stream.readBits(TypeSize[type]);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private read(template) {\r\n        let out = {}\r\n        while (this.stream.bitsLeft > this.indexBit) {\r\n            let keyIdx = this.stream.readBits(this.indexBit);\r\n            if (keyIdx == 0x00) break;\r\n            \r\n            let key = template.keyIndex_[keyIdx];\r\n            if (template[key].type < Type.PrimativeType) {\r\n                let value = this.readPrimitive(template[key].type);\r\n                out[key] = value;\r\n            } else if (template[key].type == Type.Object) {\r\n                out[key] = this.read(template[key].template);\r\n            } else {\r\n                console.warn(`Not support read type: ${template[key].type}`)\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n\r\n    private updateKeyIndex(object) {\r\n        if (object.template) {\r\n            object.template.keyIndex_ = {};\r\n            for (let key in object.template) {\r\n                let proto = object.template[key];\r\n                object.template.keyIndex_[proto.index] = key;\r\n\r\n                if (proto.template) {\r\n                    this.updateKeyIndex(proto);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setProto(proto): JsonPacker {\r\n        if (proto.maxIdx && proto.template) {\r\n            this.proto = proto;\r\n            this.indexBit = Math.floor(Math.log2(proto.maxIdx)) + 1;\r\n            // prepair key index\r\n            this.updateKeyIndex(proto);\r\n            return this;\r\n        }\r\n        console.warn(\"Invalid proto\");\r\n        return null;\r\n    }\r\n\r\n    pack(input): ArrayBuffer {\r\n        this.stream = new BitStream(new ArrayBuffer(512));\r\n        this.write(input, this.proto.template);\r\n        return this.stream.view.getArrayBuffer(0, this.stream.byteIndex);\r\n    }\r\n\r\n    unpack(input: ArrayBuffer) {\r\n        this.stream = new BitStream(input);\r\n        let obj = this.read(this.proto.template);\r\n        return obj;\r\n    }\r\n}","const {ccclass, property, requireComponent, executeInEditMode, menu} = cc._decorator;\r\n\r\nconst i18n = require('i18n');\r\n\r\n@ccclass\r\n@requireComponent(cc.Label)\r\n@executeInEditMode\r\n@menu('i18n:MAIN_MENU.component.renderers/LabelLocalized')\r\nexport default class LabelLocalized extends cc.Component {\r\n\r\n    @property()\r\n    _textKey: string = \"TEXT_KEY\";\r\n\r\n    @property({\r\n        multiline: true,\r\n        tooltip: \"Enter i18n text key\"\r\n    })\r\n    set textKey (value) {\r\n        this._textKey = value;\r\n        this.updateLabel();\r\n    }\r\n    get textKey() { return this._textKey; }\r\n\r\n    protected label: cc.Component = null;\r\n    protected textProp = null;\r\n\r\n    onLoad() {\r\n        this.label = this.getComponent(cc.Label);\r\n        this.updateLabel();\r\n    }\r\n\r\n    updateLabel () {\r\n        if(this.label == null)\r\n            this.label = this.getComponent(cc.Label);\r\n        if(this.label)\r\n        {\r\n            let keys = this.textKey.trim().split(\"+\");\r\n            let text = '';\r\n            for(let i = 0; i < keys.length; ++i)\r\n            {\r\n                text += i18n.t(keys[i], this.textProp);\r\n            }\r\n            (this.label as any).string = text;\r\n        }\r\n    }\r\n\r\n    updateTextProp(props: {}) {\r\n        this.textProp = props;\r\n        this.updateLabel();\r\n    }\r\n}\r\n\r\n","import { BitStream } from \"./BitStream\";\r\nimport { LbInfo, GameData, PlayerInfo, BombInfo, ExpBubleInfo, GameInitInfo, BombExtraInfo, PlayerExtraInfo, GameInfo, DeathInfo, NotifyInfo, PlayerInput } from \"./IMessageData\";\r\n// Server Only\r\n// import { Player } from \"../Player\";\r\n// import { Bomb } from \"../Bomb\";\r\n// import { ExpBuble } from \"../ExpBuble\";\r\n// Server Only End\r\n\r\n// Define all message use in game and must be use for both client and server\r\n\r\nexport enum Message {\r\n    // do not conflict each other, but in short to opt\r\n    GameInfo = 'i',\r\n    JoinGame = 'j',\r\n    QueryPlayer = 'p',\r\n    QueryBomb = 'b',\r\n    LeaderBoard = 'l',\r\n    InputAction = 'a',\r\n    ServerData = 's',\r\n    Death = 'd',\r\n    Notify = 'n',\r\n}\r\n\r\nexport class NetMessage {\r\n    // packed message data to ready to send out\r\n    protected pack(data) { return null; }\r\n    // unpack message from recieve packed data\r\n    protected unpack(data) { return null; }\r\n}\r\n\r\nexport class MsgServerInfo extends NetMessage {\r\n\r\n}\r\n\r\nexport class MsgGameInfo extends NetMessage {\r\n\r\n    pack(data: GameInfo): ArrayBuffer {\r\n        if (!data) return null;\r\n        let bs = new BitStream(new ArrayBuffer(12)); \r\n        bs.writeUint16(data.worldW);\r\n        bs.writeUint16(data.worldH);\r\n        bs.writeUint16(data.playerW);\r\n        bs.writeUint16(data.playerH);\r\n        bs.writeUint16(data.playerSpeed);\r\n        bs.writeUint16(data.bombRange);\r\n        return bs.view.getArrayBuffer(0, bs.byteIndex);\r\n    }\r\n\r\n    unpack(data: ArrayBuffer): GameInfo {\r\n        if (!data) return null;\r\n        let bs = new BitStream(data);\r\n        let result = {\r\n            worldW: bs.readUint16(),\r\n            worldH: bs.readUint16(),\r\n            playerW: bs.readUint16(),\r\n            playerH: bs.readUint16(),\r\n            playerSpeed: bs.readUint16(),\r\n            bombRange: bs.readUint16(),\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class MsgQueryPlayer extends NetMessage {\r\n    pack(player): ArrayBuffer {\r\n        if (!player) return null;\r\n        return player.getExtraData();\r\n    }\r\n\r\n    unpack(data): PlayerExtraInfo {\r\n        if (!data) return null;\r\n        // id | name\r\n        // 24 | String\r\n        let bs = new BitStream(data);\r\n        let info = {\r\n            id: bs.readBits(24),\r\n            name: bs.readUTF8String(),\r\n        }\r\n        return info;\r\n    }\r\n}\r\n\r\nexport class MsgQueryBomb extends NetMessage {\r\n\r\n    pack(bomb): ArrayBuffer {\r\n        if (!bomb) return null;\r\n        return bomb.getExtraData();\r\n    }\r\n\r\n    unpack(data): BombExtraInfo {\r\n        if (!data) return null;\r\n        // id | endX | endY | ownerId\r\n        // 24 | 16   | 16   | 24\r\n        let bs = new BitStream(data);\r\n        let info = {\r\n            id: bs.readBits(24),\r\n            endX: bs.readBits(16),\r\n            endY: bs.readBits(16),\r\n            owner: bs.readBits(24),\r\n        }\r\n        return info;\r\n    }\r\n}\r\n\r\nexport class MsgJoinGame extends NetMessage {\r\n\r\n    pack(data: GameInitInfo): ArrayBuffer {\r\n        if (!data) return null;\r\n        let bs = new BitStream(new ArrayBuffer(10));\r\n        bs.writeBits(data.id, 24);\r\n        bs.writeBits(data.x, 16);\r\n        bs.writeBits(data.y, 16);\r\n        bs.writeBits(data.startHealth, 16);\r\n        return bs.view.getArrayBuffer(0, bs.byteIndex);\r\n    }\r\n\r\n    unpack(data): GameInitInfo {\r\n        if (!data) return null;\r\n        let bs = new BitStream(data);\r\n        let info = {\r\n            id: bs.readBits(24),\r\n            x: bs.readBits(16),\r\n            y: bs.readBits(16),\r\n            startHealth: bs.readBits(16),\r\n        }\r\n        return info;\r\n    }\r\n}\r\n\r\nexport class MsgLeaderBoard extends NetMessage {\r\n    pack(data: LbInfo[]): ArrayBuffer {\r\n        if (!data) return null;\r\n        let bs = new BitStream(new ArrayBuffer(14 * 6));\r\n        bs.writeUint8(data.length);\r\n        data.forEach(item => {\r\n            bs.writeBits(item.id, 24);\r\n            bs.writeUTF8String(item.name);\r\n            bs.writeUint8(item.score);\r\n        })\r\n        return bs.view.getArrayBuffer(0, bs.byteIndex);\r\n    }\r\n\r\n    unpack(data): LbInfo[] {\r\n        if (!data) return null;\r\n        // let bs = new BitStream(data);\r\n        // let info = [];\r\n        // let length = bs.readUint8();\r\n        // for (let i = 0; i < length; i++) {\r\n        //     info.push({\r\n        //         id: bs.readBits(24),\r\n        //         name: bs.readUTF8String(),\r\n        //         score: bs.readUint8()\r\n        //     })\r\n        // }\r\n        let info = [];\r\n        let arr = (data as string).split('|');\r\n        for (let i = 0; i < +arr[0]; i++) {\r\n            info.push({\r\n                id: +arr[i*3 + 1],\r\n                name: arr[i*3 + 2],\r\n                score: +arr[i*3 + 3]\r\n            })\r\n        }\r\n        return info;\r\n    }\r\n}\r\n\r\nexport class MsgServerData extends NetMessage {\r\n    deserialPlayer(stream: BitStream, spec: boolean = false): PlayerInfo {\r\n        // id | x  | y  | skin | death | action | direction | health | level | exp  | vulnerable | buff | bombable? | skillable? | cooldown? | lastInputSeq?\r\n        // 24 | 16 | 16 | 3    | 1     | 3      | 9         | 9      | 4     | 16   | 1          | 3    | 1         | 1          | 8         | 16\r\n        let info: PlayerInfo = {\r\n            id: stream.readBits(24),\r\n            x: stream.readBits(16),\r\n            y: stream.readBits(16),\r\n            // target_x: stream.readBits(16),\r\n            // target_y: stream.readBits(16),\r\n            cskin: stream.readBits(3),\r\n            opacity: stream.readBits(8),\r\n            death: stream.readBoolean(),\r\n            action: stream.readBits(3),\r\n            direction: stream.readBits(9),\r\n            health: stream.readBits(9),\r\n            level: stream.readBits(4),\r\n            exp: stream.readBits(16)*5,\r\n            vulnerable: stream.readBoolean(),\r\n            buff: stream.readBits(3),\r\n            buffs: []\r\n        }\r\n        \r\n        if (info.buff > 0) {\r\n            for (let i = 0; i < info.buff; i++) {\r\n                info.buffs.push(stream.readBits(3));\r\n            }\r\n        }\r\n        \r\n        if (spec) {\r\n            info.bombable = stream.readBoolean();\r\n            info.skillable = stream.readBoolean();\r\n            info.cooldown = stream.readBits(8);\r\n            info.lastInputSeq = stream.readBits(16);\r\n        }\r\n        return info;\r\n    }\r\n\r\n    deserialBomb(stream: BitStream): BombInfo {\r\n        // id | x  | y  | death | percent | exploded | skin\r\n        // 24 | 16 | 16 | 1     | 7       | 1        | 3\r\n        return {\r\n            id: stream.readBits(24),\r\n            x: stream.readBits(16),\r\n            y: stream.readBits(16),\r\n            opacity: stream.readBits(8),\r\n            death: stream.readBoolean(),\r\n            percent: stream.readBits(7),\r\n            exploded: stream.readBoolean(),\r\n            skin: stream.readBits(3), //@ for explosion skin\r\n        }\r\n    }\r\n\r\n    deserialExpBuble(stream: BitStream): ExpBubleInfo {\r\n        // id | x  | y  | death \r\n        // 24 | 16 | 16 | 1 \r\n        return {\r\n            id: stream.readBits(24),\r\n            x: stream.readBits(16),\r\n            y: stream.readBits(16),\r\n            opacity: stream.readBits(8),\r\n            death: stream.readBoolean(),\r\n            type: stream.readBits(3),\r\n        }\r\n    }\r\n\r\n    pack(data) {\r\n        if (!data) return null;\r\n        // Server Only\r\n        // num-player | player... | num-bomb | bomb... | num-exp | exp...\r\n        // let bs = new BitStream(new ArrayBuffer(1024));\r\n        // bs.writeUint8(data.players.length);\r\n        // data.players.forEach((player: Player, idx) => {\r\n        //     let data: BitStream = player.getNetData();\r\n        //     bs.writeBitStream(data, data.index, 0);\r\n        //     if(idx == 0) {\r\n        //         player.writeSpecData(bs);\r\n        //     }\r\n        // })\r\n        // bs.writeUint8(data.bombs.length);\r\n        // data.bombs.forEach((bomb: Bomb) => {\r\n        //     let data: BitStream = bomb.getNetData();\r\n        //     bs.writeBitStream(data, data.index, 0);\r\n        // })\r\n        // bs.writeUint8(data.bubles.length);\r\n        // data.bubles.forEach((buble: ExpBuble) => {\r\n        //     let data: BitStream = buble.getNetData();\r\n        //     bs.writeBitStream(data, data.index, 0);\r\n        // })\r\n\r\n        // return bs.view.getArrayBuffer(0, bs.byteIndex);\r\n        // Server Only End\r\n        return null;\r\n    }\r\n\r\n    unpack(data: ArrayBuffer) {\r\n        if (!data) return null;\r\n        let bs = new BitStream(data);\r\n        let info: GameData = { players: [], bombs: [], bubles: []};\r\n        let nPlayers = bs.readUint8();\r\n        for (let i = 0; i < nPlayers; i++) {\r\n            info.players.push(this.deserialPlayer(bs, i == 0));\r\n        }\r\n        let nBombs = bs.readUint8();\r\n        for (let i = 0; i < nBombs; i++) {\r\n            info.bombs.push(this.deserialBomb(bs));\r\n        }\r\n        let nExps = bs.readUint8();\r\n        for (let i = 0; i < nExps; i++) {\r\n            info.bubles.push(this.deserialExpBuble(bs));\r\n        }\r\n        return info;\r\n    }\r\n}\r\n\r\nexport class MsgInputAction extends NetMessage {\r\n\r\n    pack(data: PlayerInput) {\r\n        if (!data) return null;\r\n        let bs = new BitStream(new ArrayBuffer(8));\r\n        bs.writeBoolean(data.direction != null);\r\n        data.direction != null && bs.writeBits(data.direction, 9);\r\n        bs.writeBoolean(data.time != null);\r\n        data.time != null && bs.writeBits(data.time, 6);\r\n        bs.writeBoolean(data.seq != null);\r\n        data.seq != null && bs.writeBits(data.seq, 16);\r\n        bs.writeBoolean(data.fire != null);\r\n        data.fire != null && bs.writeBits(data.fire, 3);\r\n        bs.writeBoolean(data.fire_dir != null);\r\n        data.fire_dir != null && bs.writeBits(data.fire_dir, 9);\r\n        bs.writeBoolean(data.fire_range != null);\r\n        data.fire_range != null && bs.writeBits(data.fire_range, 8);\r\n        return bs.view.getArrayBuffer(0, bs.byteIndex);\r\n    }\r\n\r\n    unpack(data: ArrayBuffer): PlayerInput {\r\n        if (!data) return null;\r\n        let bs = new BitStream(data);\r\n        let info: any = {};\r\n        bs.readBoolean() && (info.direction = bs.readBits(9));\r\n        bs.readBoolean() && (info.time = bs.readBits(6));\r\n        bs.readBoolean() && (info.seq = bs.readBits(16));\r\n        bs.readBoolean() && (info.fire = bs.readBits(3));\r\n        bs.readBoolean() && (info.fire_dir = bs.readBits(9));\r\n        bs.readBoolean() && (info.fire_range = bs.readBits(8));\r\n        if (info.direction > 360) info.direction = bs.view.getBits(1, 9, true);\r\n        if (info.fire_dir > 360) info.direction = bs.view.getBits(39, 9, true);\r\n        return info;\r\n    }\r\n}\r\n\r\nexport class MsgDeath extends NetMessage {\r\n\r\n    pack(data: DeathInfo): ArrayBuffer {\r\n        if (!data) return null;\r\n        let bs = new BitStream(new ArrayBuffer(16));\r\n        bs.writeUTF8String(data.killer);\r\n        bs.writeUint16(data.time);\r\n        bs.writeUint8(data.score);\r\n        return bs.view.getArrayBuffer(0, bs.byteIndex);\r\n    }\r\n\r\n    unpack(data: ArrayBuffer): DeathInfo {\r\n        if (!data) return null;\r\n        let bs = new BitStream(data);\r\n        return {\r\n            killer: bs.readUTF8String(),\r\n            time: bs.readUint16(),\r\n            score: bs.readUint8(),\r\n        }\r\n    }\r\n}\r\n\r\nexport class MsgNofity extends NetMessage {\r\n\r\n    pack(data: NotifyInfo) {\r\n        if (!data) return null;\r\n        // let bs = new BitStream(new ArrayBuffer(22));\r\n        // bs.writeASCIIString(data.kill.killer);\r\n        // bs.writeASCIIString(data.kill.deathman);\r\n        // return bs.view.getArrayBuffer(0, bs.byteIndex);\r\n        // FIXME: pub/sub channel can not send binary data https://github.com/SocketCluster/sc-broker/issues/10\r\n        // try to encode by string\r\n        return data.kill.killer + \"|\" + data.kill.deathman;\r\n    }\r\n\r\n    unpack(data): NotifyInfo {\r\n        if (!data) return null;\r\n        // let bs = new BitStream(data);\r\n        // return {\r\n        //     kill: {\r\n        //         killer: bs.readASCIIString(),\r\n        //         deathman: bs.readASCIIString(),\r\n        //     }\r\n        // }\r\n        let info = (data as string).split('|');\r\n        return {\r\n            kill: {\r\n                killer: info[0],\r\n                deathman: info[1],\r\n            }\r\n        }\r\n    }\r\n}","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PersistentObject extends cc.Component\r\n{\r\n    onLoad()\r\n    {\r\n        cc.game.addPersistRootNode(this.node);\r\n    }\r\n}\r\n","import { ClientRequest } from './ClientRequest';\r\n\r\nexport default class PingRequest extends ClientRequest\r\n{\r\n    m_callback: (ping: number) => void;\r\n\r\n    public constructor(callback: (ping: number) => void)\r\n    {\r\n        super();\r\n        this.m_callback = callback;\r\n    }\r\n\r\n    public start()\r\n    {\r\n        ClientRequest.ms_client.ping(this.m_callback);\r\n        // this.StartRequest('t', (err, res)=>{\r\n        //     // console.log(\"ServerInfoRequest - start - OnRequestFinished - callback: \" + (this.m_callback ? \"not null\" : \"null\"));\r\n        //     console.log(\"ServerInfoRequest - OnRequestFinished - \" + res as string);\r\n        //     this.m_callback(this.ParseData(res));\r\n        // });\r\n    }\r\n}\r\n","import LabelLocalized from \"./LabelLocalized\";\r\n\r\nconst {ccclass, property, requireComponent, executeInEditMode, menu} = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(cc.RichText)\r\n@menu('i18n:MAIN_MENU.component.renderers/RichTextLocalized')\r\n@executeInEditMode\r\nexport default class RichTextLocalized extends LabelLocalized {\r\n\r\n    onLoad() {\r\n        this.label = this.getComponent(cc.RichText);\r\n        this.updateLabel();\r\n    }\r\n\r\n    updateLabel () {\r\n        if(this.label == null) {\r\n            this.label = this.getComponent(cc.RichText);\r\n        }\r\n        super.updateLabel();\r\n    }\r\n}","import { scformatter } from './SCFormatter';       // default sc codec\r\nimport { JsonPacker } from './JsonPacker';\r\n\r\nexport class SCCustomCodec {\r\n\r\n    static packer: JsonPacker = new JsonPacker();\r\n\r\n    private compressPublishPacket(object) {\r\n        if (object.event != '#publish' || object.data == null) {\r\n            return;\r\n        }\r\n\r\n        object.publish = {\r\n            channel: object.data.channel,\r\n            data: object.data.data\r\n        };\r\n\r\n        if (object.cid != null) {\r\n            object.publish.cid = object.cid;\r\n        }\r\n\r\n        delete object.event;\r\n        delete object.data;\r\n        delete object.cid;\r\n    }\r\n\r\n    private decompressPublishPacket(object) {\r\n        if (object.publish == null) {\r\n            return;\r\n        }\r\n\r\n        object.event = '#publish';\r\n        object.data = {\r\n            channel: object.publish.channel,\r\n            data: object.publish.data\r\n        }\r\n        if (object.publish.cid != null) {\r\n            object.cid = object.publish.cid;\r\n        }\r\n        delete object.publish;\r\n    }\r\n\r\n    private compressEmitPacket(object) {\r\n        if (object.event == null) {\r\n            return;\r\n        }\r\n\r\n        object.emit = {\r\n            event: object.event,\r\n            data: object.data\r\n        }\r\n        if (object.cid != null) {\r\n            object.emit.cid = object.cid;\r\n        }\r\n        delete object.event;\r\n        delete object.data;\r\n        delete object.cid;\r\n    }\r\n\r\n    private decompressEmitPacket(object) {\r\n        if (object.emit == null) {\r\n            return;\r\n        }\r\n\r\n        object.event = object.emit.event;\r\n        object.data = object.emit.data;\r\n        if (object.emit.cid != null) {\r\n            object.cid = object.emit.cid;\r\n        }\r\n        delete object.emit;\r\n    }\r\n\r\n    private compressResponsePacket(object) {\r\n        if (object.rid == null) {\r\n            return;\r\n        }\r\n\r\n        object.response = {\r\n            rid: object.rid,\r\n            data: object.data\r\n        };\r\n\r\n        delete object.rid;\r\n        delete object.error;\r\n        delete object.data;\r\n    }\r\n\r\n    private decompressResponsePacket(object) {\r\n        if (object.response == null) {\r\n            return;\r\n        }\r\n\r\n        object.rid = object.response.rid;\r\n        object.data = object.response.data;\r\n        delete object.response;\r\n    }\r\n\r\n    private clonePacket(object) {\r\n        let clone = {};\r\n        for (let i in object) {\r\n            if (object.hasOwnProperty(i)) {\r\n                clone[i] = object[i];\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n\r\n    private formatSinglePacket(object) {\r\n        object = this.clonePacket(object);\r\n        this.compressPublishPacket(object);\r\n        this.compressEmitPacket(object);\r\n        this.compressResponsePacket(object);\r\n        return object;\r\n    }\r\n\r\n    private deformatSinglePacket(object) {\r\n        this.decompressEmitPacket(object);\r\n        this.decompressPublishPacket(object);\r\n        this.decompressResponsePacket(object);\r\n    }\r\n\r\n    encode(object) {        \r\n        if (object && (\r\n            object.data instanceof ArrayBuffer ||\r\n            (object.data && object.data.data instanceof ArrayBuffer)\r\n        )) {            \r\n            return SCCustomCodec.packer.pack(this.formatSinglePacket(object));\r\n        }\r\n\r\n        return scformatter.encode(object);\r\n    }\r\n\r\n    decode(input) {\r\n        if (input instanceof ArrayBuffer || (typeof Buffer !== 'undefined' && input instanceof Buffer)) {\r\n            let object = SCCustomCodec.packer.unpack(input);\r\n            this.deformatSinglePacket(object);\r\n            return object;\r\n        }\r\n\r\n        return scformatter.decode(input);\r\n    }\r\n}","var base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\nvar validJSONStartRegex = /^[ \\n\\r\\t]*[{\\[]/;\r\n\r\nvar arrayBufferToBase64 = function (arraybuffer) {\r\n  var bytes = new Uint8Array(arraybuffer);\r\n  var len = bytes.length;\r\n  var base64 = '';\r\n\r\n  for (var i = 0; i < len; i += 3) {\r\n    base64 += base64Chars[bytes[i] >> 2];\r\n    base64 += base64Chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\r\n    base64 += base64Chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\r\n    base64 += base64Chars[bytes[i + 2] & 63];\r\n  }\r\n\r\n  if ((len % 3) === 2) {\r\n    base64 = base64.substring(0, base64.length - 1) + '=';\r\n  } else if (len % 3 === 1) {\r\n    base64 = base64.substring(0, base64.length - 2) + '==';\r\n  }\r\n\r\n  return base64;\r\n};\r\n\r\nvar binaryToBase64Replacer = function (key, value) {\r\n  if (ArrayBuffer && value instanceof ArrayBuffer) {\r\n    return {\r\n      base64: true,\r\n      data: arrayBufferToBase64(value)\r\n    };\r\n  } else if (typeof Buffer !== 'undefined') {\r\n    if (value instanceof Buffer){\r\n      return {\r\n        base64: true,\r\n        data: value.toString('base64')\r\n      };\r\n    }\r\n    // Some versions of Node.js convert Buffers to Objects before they are passed to\r\n    // the replacer function - Because of this, we need to rehydrate Buffers\r\n    // before we can convert them to base64 strings.\r\n    if (value && value.type === 'Buffer' && Array.isArray(value.data)) {\r\n      var rehydratedBuffer;\r\n      if (Buffer.from) {\r\n        rehydratedBuffer = Buffer.from(value.data);\r\n      } else {\r\n        rehydratedBuffer = new Buffer(value.data);\r\n      }\r\n      return {\r\n        base64: true,\r\n        data: rehydratedBuffer.toString('base64')\r\n      };\r\n    }\r\n  }\r\n  return value;\r\n};\r\n\r\n// Decode the data which was transmitted over the wire to a JavaScript Object in a format which SC understands.\r\n// See encode function below for more details.\r\nvar decode = function (input) {\r\n  if (input == null) {\r\n   return null;\r\n  }\r\n  // Leave ping or pong message as is\r\n  if (input === '#1' || input === '#2') {\r\n    return input;\r\n  }\r\n  var message = input.toString();\r\n\r\n  // Performance optimization to detect invalid JSON packet sooner.\r\n  if (!validJSONStartRegex.test(message)) {\r\n    return message;\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(message);\r\n  } catch (err) {}\r\n  return message;\r\n};\r\n\r\n// Encode a raw JavaScript object (which is in the SC protocol format) into a format for\r\n// transfering it over the wire. In this case, we just convert it into a simple JSON string.\r\n// If you want to create your own custom codec, you can encode the object into any format\r\n// (e.g. binary ArrayBuffer or string with any kind of compression) so long as your decode\r\n// function is able to rehydrate that object back into its original JavaScript Object format\r\n// (which adheres to the SC protocol).\r\n// See https://github.com/SocketCluster/socketcluster/blob/master/socketcluster-protocol.md\r\n// for details about the SC protocol.\r\nvar encode = function (object) {\r\n  // Leave ping or pong message as is\r\n  if (object === '#1' || object === '#2') {\r\n    return object;\r\n  }\r\n  return JSON.stringify(object, binaryToBase64Replacer);\r\n};\r\n\r\nexport class scformatter {\r\n    static encode = encode;\r\n    static decode = decode;\r\n}","import { SequenceNode } from './SequenceNode'\r\nimport { SequenceNodeShowPopupState } from './SequenceNodeShowPopup';\r\nimport PlayerRef from \"../../player-ref\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SequenceManager extends cc.Component\r\n{\r\n    @property(SequenceNode)\r\n    sequences: SequenceNode[] = [];\r\n\r\n    private m_nodeIdx: number = 0;\r\n\r\n    // private static ms_instance: SequenceManager;\r\n\r\n    onLoad()\r\n    {\r\n        // SequenceManager.ms_instance = this;console.log(\"SequenceManager - onLoad - \" + PlayerRef.current.first_launch_step);\r\n    }\r\n    \r\n    update (dt) { this.updateNode(dt); }\r\n\r\n    // public GetInstance() { return SequenceManager.ms_instance; }\r\n\r\n    public push(node: SequenceNode) { this.sequences.push(node); }\r\n\r\n    public updateNode(dt: number)\r\n    {\r\n        if(this.m_nodeIdx < this.sequences.length)\r\n        {\r\n            var node = this.sequences[this.m_nodeIdx];\r\n            node.UpdateNode(dt);\r\n            if(node.IsFinished())   this.m_nodeIdx++;\r\n        }\r\n    }\r\n}\r\n","import { SequenceNode } from './SequenceNode'\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SequenceNodeSerial extends SequenceNode\r\n{\r\n    sequences: SequenceNode[] = [];\r\n\r\n    private m_nodeIdx: number = 0;\r\n\r\n    public UpdateNode(dt: number)\r\n    {\r\n\r\n    }\r\n\r\n    public IsFinished(): boolean { return this.m_nodeIdx == this.sequences.length; }\r\n\r\n    public Finish() {}\r\n}\r\n","import { SequenceNodeShowSelectSkinPopup } from './SequenceNodeShowSelectSkinPopup'\r\nimport { SequenceNodeShowPopup } from './SequenceNodeShowPopup';\r\nimport PlayerRef from \"../../player-ref\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SequenceNodeShowGreetingPopup extends SequenceNodeShowSelectSkinPopup\r\n{\r\n    public ShowPopup()\r\n    {//console.log(\"SequenceNodeShowServerSelectionPopup - ShowPopup\");\r\n        this.main_menu.showGreetingPopup();\r\n        this.main_menu.selectSkinPopup_setTitle(\"WELCOME\");\r\n    }\r\n\r\n    public OnCloseButtonPressed(event, customEventData)\r\n    {console.log(\"SequenceNodeShowGreetingPopup - OnCloseButtonPressed\");\r\n        super.OnCloseButtonPressed(event, customEventData);\r\n        PlayerRef.current.first_launch_step = 1;\r\n    }\r\n}\r\n","import { SequenceNode } from './SequenceNode'\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nexport enum SequenceNodeShowPopupState\r\n{\r\n    INITIALIZED,\r\n    STARTED,\r\n    FINISHED,\r\n}\r\n\r\n@ccclass\r\nexport abstract class SequenceNodeShowPopup extends SequenceNode\r\n{\r\n    protected m_state: SequenceNodeShowPopupState = SequenceNodeShowPopupState.INITIALIZED;\r\n\r\n    public UpdateNode(dt: number)\r\n    {//console.log(\"SequenceNodeShowPopup - UpdateNode - state: \" + this.m_state);\r\n        if(this.m_state == SequenceNodeShowPopupState.INITIALIZED)\r\n        {\r\n            this.SetupGUI();\r\n            this.CreateConnection();\r\n            this.ShowPopup();\r\n            this.m_state = SequenceNodeShowPopupState.STARTED;\r\n        }\r\n    }\r\n\r\n    public IsFinished(): boolean { return this.m_state == SequenceNodeShowPopupState.FINISHED; }\r\n\r\n    public OnCloseButtonPressed(event, customEventData)\r\n    {console.log(\"SequenceNodeShowPopup - OnCloseButtonPressed\");\r\n        this.m_state = SequenceNodeShowPopupState.FINISHED;\r\n    }\r\n\r\n    protected abstract SetupGUI(): void;\r\n\r\n    protected abstract CreateConnection(): void;\r\n\r\n    public abstract ShowPopup(): void;\r\n}\r\n","import { SequenceNodeShowPopup, SequenceNodeShowPopupState } from './SequenceNodeShowPopup'\r\nimport MainMenu from '../menu/main-menu'\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport abstract class SequenceNodeShowSelectSkinPopup extends SequenceNodeShowPopup\r\n{\r\n    @property(cc.Node)\r\n    selectSkinPopup: cc.Node = null;\r\n\r\n    @property(MainMenu)\r\n    main_menu: MainMenu = null;\r\n\r\n    m_closeButton: cc.Button;\r\n    m_closeEvent: number;\r\n    \r\n    protected SetupGUI()\r\n    {\r\n        this.m_closeButton = this.selectSkinPopup.children[1].getChildByName(\"close\").getComponent(cc.Button);\r\n    }\r\n\r\n    protected CreateConnection()\r\n    {console.log(\"SequenceNodeShowSelectSkinPopup - CreateConnection\");\r\n        var clickEventHandler = new cc.Component.EventHandler();\r\n        clickEventHandler.target = this.node; // This node is the node to which your event handler code component belongs\r\n        clickEventHandler.component = \"SequenceNodeShowSelectSkinPopup\";// This is the code file name\r\n        clickEventHandler.handler = \"OnCloseButtonPressed\";\r\n\r\n        this.m_closeEvent = this.m_closeButton.clickEvents.push(clickEventHandler);\r\n    }\r\n\r\n    public Finish()\r\n    {\r\n        this.m_closeButton.clickEvents.splice(this.m_closeEvent, 1);\r\n    }\r\n}\r\n","import { SequenceNodeShowSelectSkinPopup } from './SequenceNodeShowSelectSkinPopup'\r\nimport { SequenceNodeShowPopupState } from './SequenceNodeShowPopup';\r\nimport PlayerRef from \"../../player-ref\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SequenceNodeShowServerSelectionPopup extends SequenceNodeShowSelectSkinPopup\r\n{\r\n    public ShowPopup()\r\n    {//console.log(\"SequenceNodeShowServerSelectionPopup - ShowPopup\");\r\n        this.main_menu.showServerSelectionPopup();\r\n    }\r\n\r\n    protected CreateConnection()\r\n    {\r\n        super.CreateConnection();\r\n\r\n        var clickEventHandler = new cc.Component.EventHandler();\r\n        clickEventHandler.target = this.node; // This node is the node to which your event handler code component belongs\r\n        clickEventHandler.component = \"SequenceNodeShowServerSelectionPopup\";// This is the code file name\r\n        clickEventHandler.handler = \"OnJoinButtonPressed\";\r\n\r\n        this.m_closeEvent = this.m_closeButton.clickEvents.push(clickEventHandler);\r\n    }\r\n\r\n    public OnCloseButtonPressed(event, customEventData)\r\n    {\r\n        super.OnCloseButtonPressed(event, customEventData);\r\n        PlayerRef.current.first_launch_step = 2;\r\n    }\r\n\r\n    public OnJoinButtonPressed(event, customEventData)\r\n    {\r\n        PlayerRef.current.first_launch_step = 2;\r\n    }\r\n}\r\n","import { SequenceNode } from './SequenceNode'\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SequenceNodeWait extends SequenceNode\r\n{\r\n    @property\r\n    delay: number = 0;\r\n\r\n    private m_counter: number = 0;\r\n    \r\n    public UpdateNode(dt: number)\r\n    {//console.log(\"SequenceNodeShowPopup - UpdateNode - m_counter: \" + this.m_counter + \" - delay: \" + this.delay);\r\n        this.m_counter += dt;\r\n    }\r\n\r\n    public IsFinished(): boolean { return this.m_counter >= this.delay; }\r\n\r\n    public Finish() {}\r\n}\r\n","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport abstract class SequenceNode extends cc.Component {\r\n    public abstract UpdateNode(dt: number): void;\r\n    public abstract IsFinished(): boolean;\r\n    public abstract Finish(): void;\r\n}\r\n","import { ClientRequest } from './ClientRequest';\r\nimport Client, { ServerDesc } from '../multiplayer/client';\r\nimport PlayerRef, { DesignType } from \"../../player-ref\";\r\n\r\n\r\nexport default class ServerConnectionRequest extends ClientRequest\r\n{\r\n    m_desc: ServerDesc;\r\n    m_onSuccessed: () => void;\r\n    m_onFailed: (error) => void;\r\n    m_force: boolean;\r\n\r\n    public constructor(desc: ServerDesc, onSuccessed: () => void, onFailed: (error) => void = null, force: boolean = false)\r\n    {\r\n        super();\r\n        this.m_desc = desc;\r\n        this.m_onSuccessed = onSuccessed;\r\n        this.m_onFailed = onFailed;\r\n        this.m_force = force;\r\n    }\r\n\r\n    public start()\r\n    {\r\n        // console.log(\"ServerConnectionRequest - start - desc:\" + this.m_desc );\r\n        ClientRequest.ms_client = new Client(this);\r\n        ClientRequest.ms_client.connectToHost(this.m_desc, this.m_onSuccessed, this.m_onFailed, this.m_force);\r\n    }\r\n}","import { ClientRequest } from './ClientRequest';\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ServerDisconnectionRequest extends ClientRequest\r\n{\r\n    public start() { if(ClientRequest.ms_client) ClientRequest.ms_client.disconnect(); }\r\n}\r\n","import { ClientRequest } from './ClientRequest';\r\nimport { BitStream } from '../multiplayer/shared/BitStream'\r\nimport { Message, MsgServerInfo, MsgGameInfo, MsgInputAction, MsgJoinGame, MsgQueryPlayer, MsgQueryBomb, MsgLeaderBoard, MsgServerData, MsgNofity, MsgDeath } from \"../multiplayer/shared/NetMessage\";\r\nimport { ServerInfo } from \"../multiplayer/shared/IMessageData\";\r\n\r\n\r\nexport default class ServerInfoRequest extends ClientRequest\r\n{\r\n    m_callback: (info: ServerInfo) => void;\r\n\r\n    public constructor(callback: (info: ServerInfo) => void)\r\n    {\r\n        super();\r\n        this.m_callback = callback;\r\n        // console.log(\"ServerInfoRequest - callback: \" + (this.m_callback ? \"not null\" : \"null\") + \" - \" + (callback ? \"not null\" : \"null\"));\r\n    }\r\n\r\n    public start()\r\n    {\r\n        this.StartRequest('t', (err, res)=>{\r\n            // console.log(\"ServerInfoRequest - start - OnRequestFinished - callback: \" + (this.m_callback ? \"not null\" : \"null\"));\r\n            // console.log(\"ServerInfoRequest - OnRequestFinished - \" + res as string);\r\n            this.m_callback(this.ParseData(res));\r\n        });\r\n    }\r\n\r\n    ParseData(data): ServerInfo\r\n    {\r\n        let r = {\r\n            player_count: data as number + 1//hoang.tuduc - include self\r\n        }\r\n        return r;\r\n    }\r\n\r\n    // OnRequestFinished(err, res)\r\n    // {\r\n    //     // let bs = new BitStream(res);\r\n    //     // let result = {\r\n    //     //     player_count: bs.readUint16(),\r\n    //     // }\r\n        \r\n    //     var r = res as string;\r\n    //     console.log(\"ServerInfoRequest - OnRequestFinished - \" + r);console.log(\"ServerInfoRequest - OnRequestFinished - callback: \" + (this.m_callback ? \"not null\" : \"null\"));\r\n    //     this.m_callback();\r\n    // }\r\n}\r\n","import Game from \"./game\";\r\nimport NetComponent from \"./net-component\";\r\nimport EventManager from \"../core/event-manager\";\r\nimport { BombInfo, BombExtraInfo } from \"./multiplayer/shared/IMessageData\";\r\nimport SoundManager from \"../core/sound-manager\";\r\nimport {ConfigGame} from \"./ConfigGame\";\r\nimport {Utils} from \"../utils\";\r\nimport Player from \"./player\";\r\nimport {PlayerAction} from \"./player\";\r\nimport Tutorial, { TUTORIAL_SUB_STATE, TUTORIAL_STATE } from \"./tutorial\";\r\n\r\nexport enum Effect {\r\n    None = 0,\r\n    //@ immune status\r\n    Immune,\r\n    //@ leader board\r\n    DmgX2,\r\n    DefX2,\r\n    ExpX2,\r\n    //@ battle effect\r\n    Burn,\r\n    Slow,\r\n    Bind, \r\n}\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Bomb extends NetComponent {\r\n\r\n    ownerId: number = 0;\r\n    targetPos: cc.Vec2 = null;\r\n    exploded: boolean = false;\r\n    timePercent: number = 0;\r\n    skin: number = 0;\r\n\r\n    // Nhan add\r\n    collider:cc.CircleCollider = null;\r\n\r\n    fire_angle: number = 0;\r\n    fire_range: number = 0;\r\n\r\n    owner: Player = null;\r\n    applyDamge: boolean = false;        // delay after bomb explore to apply damge\r\n    damage: number = ConfigGame.BOMB_BASE_DAMGE;       // bomb damge\r\n    effect: number; // effect for special skill or skin for normal attack\r\n    skill: {effect: Effect, cooldown: number} = null;\r\n    opacity: number = 255;\r\n    private startPos: cc.Vec2 = null;\r\n    private endPos: cc.Vec2 = null;\r\n    private timeFlight: number = ConfigGame.BOMB_LENGTH / ConfigGame.BOMB_SPEED;\r\n    private time: number = 0;\r\n    private extraData = null;\r\n\r\n    private _exploded = false;\r\n    private _flying = true;\r\n    private animation: cc.Animation;\r\n    private explosion_anim: string[] = ['fire_explosion', 'ice_explosion', 'grass_explosion'];\r\n    private fly_anim: string[] = ['fire_fly', 'ice_fly', 'grass_fly'];\r\n\r\n    onCollisionEnter(other, self) {\r\n        //console.log(\"Bomb Currently colliding\");  \r\n        if (this.collider)\r\n        {\r\n            this.collider.radius = 0;\r\n            this.collider.enabled = false;\r\n        }\r\n    }\r\n    onCollisionExit(other,self){\r\n        //console.log(\"Bomb Done colliding\");\r\n        if (this.collider)\r\n        {\r\n            this.collider.radius = 0;\r\n            this.collider.enabled = false;\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this.animation = this.getComponent(cc.Animation);\r\n    }\r\n\r\n    init(data: BombInfo) {\r\n        super.init(data);\r\n        this.node.opacity = data.opacity;\r\n        this.timePercent = data.percent;\r\n        this.exploded = data.exploded;\r\n        this.skin = data.skin;\r\n        this.node.setPosition(data.x, data.y);\r\n        if (Game.isTutorial)\r\n            this.setStartPos(data.x, data.y);\r\n    }\r\n\r\n    setStateData(data: BombInfo) {\r\n        super.setStateData(data);\r\n        this.node.setPosition(data.x, data.y);\r\n        if (Game.isTutorial)\r\n\t\t\tthis.setStartPos(data.x, data.y);\r\n        this.node.opacity = data.opacity;\r\n        this.timePercent = data.percent;\r\n        this.exploded = data.exploded;\r\n        this.skin = data.skin;\r\n    }\r\n\r\n    setExtraData(data: BombExtraInfo) {\r\n        this.ownerId = data.owner;\r\n        this.setTargetPos(data.endX, data.endY);\r\n    }\r\n\r\n    private setTargetPos(x: number, y: number) {\r\n        this.targetPos = cc.v2(x, y);\r\n        //let direction = this.targetPos.sub(this.node.position);\r\n        //let angle = Math.atan2(direction.y, direction.x) * 180 / Math.PI;\r\n        //this.node.rotation = 360 - angle + 180;\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (Game.isTutorial)\r\n        {\r\n            if (this.endPos != null)\r\n            {\r\n                if (this.exploded == false) {\r\n                    if (this.time >= (this.timeFlight/2) \r\n                        && Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill\r\n                        && Tutorial.tutorial_sub_status <= TUTORIAL_SUB_STATE.Tutorial_checkdoAction\r\n                        && Tutorial.instance.performAction <= 1\r\n                        )\r\n                        {\r\n                            // cc.log(\"Nhan --> Pause bomb \");\r\n                            // this.animation.pause(this.fly_anim[this.skin]);\r\n                            if (Tutorial.instance.performAction == 0)\r\n                                Tutorial.instance.performAction = 1;\r\n                            return;\r\n                        }\r\n                    this.time += dt;\r\n                    if (this.time >= this.timeFlight) \r\n\t\t\t\t\t{\r\n                        this.exploded = true;\r\n                    }\r\n                }\r\n                let pos = this.startPos.lerp(this.endPos, this.time / this.timeFlight);\r\n                this.node.x = Math.round(pos.x);\r\n                this.node.y = Math.round(pos.y);\r\n\r\n                this.timePercent = (this.time / this.timeFlight) * 100;\r\n            }\r\n        }\r\n        if (this._flying) {\r\n            this.animation.play(this.fly_anim[this.skin]);\r\n            this._flying = false;\r\n        }\r\n\r\n        // scale -> simulate bomb fly\r\n        let scale = cc.misc.lerp(0.75, 1, cc.misc.clamp01(this.timePercent > 50 ? (100 - this.timePercent)/50 : this.timePercent/50));\r\n        this.animation.node.setScale(scale);\r\n        \r\n        if(this.exploded && this._exploded == false) {\r\n            this._exploded = true;\r\n            this.animation.node.setScale(0.75);\r\n            this.animation.play(this.explosion_anim[this.skin]);\r\n            this.animation.on('finished', this.onAnimationEvent, this);  \r\n            if (this.collider)\r\n            {\r\n                //cc.log(\"Expand radius for check collision\");\r\n                this.collider.enabled = true;\r\n                this.collider.radius = 50;\r\n            }\r\n        }\r\n    }\r\n\r\n    onDeath(timeout: boolean) {\r\n        if (!Game.isTutorial)\r\n        {\r\n        EventManager.instance.dispatch(NetComponent.EVENT_NET_ENTITY_DEATH, this.id);\r\n        this.node.removeFromParent();\r\n        }\r\n    }\r\n\r\n    onAnimationEvent(type: string, state: cc.AnimationState) {\r\n        if(type === 'finished') {            \r\n            if(state.name.indexOf('explosion') > 0) {\r\n                this.death = true;\r\n                if (Game.isTutorial)\r\n                {\r\n                    this.endPos = null;\r\n                    this.time = 0;\r\n                    this._flying = true;\r\n                    this.node.opacity = 0;\r\n                    this.owner.bombable = true;\r\n                }\r\n            }\r\n            if (Game.isTutorial) {\r\n                Tutorial.instance.updateTutorialStatus();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Nhan add\r\n    setStartPos(x: number, y: number)\r\n    {\r\n        if (this.collider)\r\n        {\r\n            this.collider.enabled = false;\r\n            this.collider.radius = 0;\r\n        }\r\n        this.startPos = cc.v2(x, y + ConfigGame.PLAYER_HEIGHT);        \r\n    }\r\n    setEndPos(x: number, y: number)\r\n    {\r\n        //let x = Math.round(Math.cos(this.owner.fireInfo.angle) * owner.fireInfo.range);\r\n        //let y = Math.round(Math.sin(owner.fireInfo.angle) * owner.fireInfo.range);\r\n        if (this.collider)\r\n        {\r\n            this.collider.enabled = false;\r\n            this.collider.radius = 0;\r\n        }\r\n        this.endPos = cc.v2(x, y);\r\n    }\r\n    getEndPos(): cc.Vec2\r\n    {\r\n        return this.endPos;\r\n    }\r\n    updateEndPos()\r\n    {\r\n        //let x = Math.round(Math.cos(this.fire_angle) * this.fire_range);\r\n        //let y = Math.round(Math.sin(this.fire_range) * this.fire_range);\r\n        this.endPos = cc.v2(this.startPos.x , this.startPos.y + + ConfigGame.PLAYER_HEIGHT);\r\n    }\r\n\r\n    setExplodeStatus(is_exploded: boolean)\r\n    {\r\n        this._exploded = is_exploded;\r\n    }\r\n    setOwnerPlayer(m_player: Player)\r\n    {\r\n        this.owner = m_player;\r\n    }\r\n\r\n}","import Game from \"./game\";\r\nimport { Utils } from \"../utils\";\r\nimport Tutorial from \"./tutorial\";\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CameraControl extends cc.Component {\r\n\r\n    static instance: CameraControl = null;\r\n\r\n    @property(cc.Node)\r\n    targetPlayer: cc.Node = null;\r\n\r\n    \r\n    camera: cc.Camera = null;\r\n\r\n    private followPlayer: boolean = true;\r\n    private _dgMoveDirect: cc.Vec2 = cc.Vec2.ZERO;\r\n    private _dgCamSpeed = 300;\r\n    private _dgCamZoom = 0;\r\n    private _dgKeys = {};\r\n\r\n    private _offset = 120;\r\n\r\n    start() {\r\n        CameraControl.instance = this;\r\n\r\n        // register event\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n\r\n        this.camera = this.getComponent(cc.Camera);\r\n    }\r\n\r\n    moveToTarget() {\r\n        if (this.targetPlayer) {\r\n            let target = this.adjustPos(this.targetPlayer.position);\r\n            this.node.setPosition(target.x, target.y);\r\n        }\r\n    }\r\n\r\n\r\n    update(dt: number) {\r\n        if (this.followPlayer && this.targetPlayer) {\r\n            let target = this.adjustPos(this.targetPlayer.position);\r\n\r\n            // smooth follow\r\n            if (Game.isTutorial)\r\n            {\r\n\t\t\t\tif (Tutorial.instance)\r\n\t\t\t\t{\r\n                let x = Utils.moveTowards(this.node.x, target.x, Tutorial.instance.playerSpeed * dt);\r\n                let y = Utils.moveTowards(this.node.y, target.y, Tutorial.instance.playerSpeed * dt);\r\n                this.node.setPosition(x, y);\r\n\t\t\t\t}\r\n            }\r\n            else\r\n            {\r\n\t\t\t\tif (Game.instance)\r\n\t\t\t\t{\r\n                let x = Utils.moveTowards(this.node.x, target.x, Game.instance.playerSpeed * dt);\r\n                let y = Utils.moveTowards(this.node.y, target.y, Game.instance.playerSpeed * dt);\r\n                this.node.setPosition(x, y);\r\n\t\t\t\t}\r\n            }\r\n\r\n        } else {\r\n            if (this._dgMoveDirect.x != 0 || this._dgMoveDirect.y != 0) {\r\n                // move debug cam\r\n                let multiply = 1;       // use for speed on diagonal\r\n                if (this._dgMoveDirect.x != 0 && this._dgMoveDirect.y != 0) {\r\n                    multiply = 1.4;     // sqrt(2) ~ 1.4\r\n                }\r\n                let dx = this._dgMoveDirect.x * multiply * this._dgCamSpeed * dt / this.camera.zoomRatio;\r\n                let dy = this._dgMoveDirect.y * multiply * this._dgCamSpeed * dt / this.camera.zoomRatio;\r\n                this.node.setPosition(this.node.position.add(cc.v2(dx, dy)));\r\n            }\r\n\r\n            if (this._dgCamZoom != 0) {\r\n                this.camera.zoomRatio += this._dgCamZoom * this.camera.zoomRatio * 0.05;\r\n            }\r\n        }\r\n    }\r\n\r\n    private adjustPos(target: cc.Vec2): cc.Vec2 {\r\n        // check bound\r\n        let l = target.x - this.node.width / 2;\r\n        let r = target.x + this.node.width / 2;\r\n        let t = target.y + this.node.height / 2;\r\n        let b = target.y - this.node.height / 2;\r\n\r\n        if (Game.isTutorial)\r\n        {\r\n\t\t\tif (Tutorial.instance)\r\n\t\t\t{\r\n            if (l < -this._offset) target.x = this.node.width / 2 - this._offset;\r\n            if (r > Tutorial.instance.worldSize.x + this._offset) target.x = Tutorial.instance.worldSize.x - this.node.width / 2 + this._offset;\r\n            if (b < -this._offset) target.y = this.node.height / 2 - this._offset;\r\n            if (t > Tutorial.instance.worldSize.y + this._offset) target.y = Tutorial.instance.worldSize.y - this.node.height / 2 + this._offset;\r\n\t\t\t}\r\n        }\r\n        else\r\n        {\r\n\t\t\tif (Game.instance)\r\n\t\t\t{\r\n            if (l < -this._offset) target.x = this.node.width / 2 - this._offset;\r\n        if (r > Game.instance.worldSize.x + this._offset) target.x = Game.instance.worldSize.x - this.node.width / 2 + this._offset;\r\n        if (b < -this._offset) target.y = this.node.height / 2 - this._offset;\r\n        if (t > Game.instance.worldSize.y + this._offset) target.y = Game.instance.worldSize.y - this.node.height / 2 + this._offset;\r\n\t\t\t}\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    setFollow(follow: boolean) {\r\n        this.followPlayer = follow;\r\n        if (follow) {\r\n            this.node.setPosition(this.adjustPos(this.targetPlayer.position));\r\n        }\r\n    }\r\n\r\n    setTarget(target: cc.Node) {\r\n        this.targetPlayer = target;\r\n        this.setFollow(this.followPlayer);\r\n    }\r\n\r\n    getTarget() {\r\n        return this.targetPlayer;\r\n    }\r\n\r\n    onKeyUp(event: cc.Event.EventKeyboard) {\r\n        this._dgKeys[event.keyCode] = 0;\r\n        if (event.keyCode == cc.macro.KEY.up) {\r\n            this._dgMoveDirect.y = 0;\r\n        } else if (event.keyCode == cc.macro.KEY.down) {\r\n            this._dgMoveDirect.y = 0;\r\n        } else if (event.keyCode == cc.macro.KEY.left) {\r\n            this._dgMoveDirect.x = 0;\r\n        } else if (event.keyCode == cc.macro.KEY.right) {\r\n            this._dgMoveDirect.x = 0;\r\n        }\r\n        // zoom\r\n        else if (event.keyCode == 109) {     // key '+'\r\n            this._dgCamZoom = 0;\r\n        } else if (event.keyCode == 107) {     // key '-'\r\n            this._dgCamZoom = 0;\r\n        }\r\n    }\r\n\r\n    onKeyDown(event: cc.Event.EventKeyboard) {\r\n        this._dgKeys[event.keyCode] = 1;\r\n        // move\r\n        if (event.keyCode == cc.macro.KEY.up) {\r\n            this._dgMoveDirect.y = 1;\r\n        } else if (event.keyCode == cc.macro.KEY.down) {\r\n            this._dgMoveDirect.y = -1;\r\n        } else if (event.keyCode == cc.macro.KEY.left) {\r\n            this._dgMoveDirect.x = -1;\r\n        } else if (event.keyCode == cc.macro.KEY.right) {\r\n            this._dgMoveDirect.x = 1;\r\n        }\r\n        // zoom\r\n        else if (event.keyCode == 109) {     // key '+'\r\n            this._dgCamZoom = 1;\r\n        } else if (event.keyCode == 107) {     // key '-'\r\n            this._dgCamZoom = -1;\r\n        } else if (event.keyCode == 110) {     // key '.'\r\n            this.camera.zoomRatio = 1;\r\n        }\r\n\r\n        // focus or not\r\n        if (event.keyCode == cc.macro.KEY.f && this._dgKeys[cc.macro.KEY.shift]) {\r\n            this.setFollow(!this.followPlayer);\r\n        }\r\n    }\r\n}","import { GameInfo, GameInitInfo, GameData, PlayerInfo, BombInfo, LbInfo, PlayerExtraInfo, BombExtraInfo, NotifyInfo, DeathInfo, PlayerInput } from \"./shared/IMessageData\";\r\nimport { SCCustomCodec } from \"./shared/SCCustomCodec\";\r\nimport { Message, MsgGameInfo, MsgInputAction, MsgJoinGame, MsgQueryPlayer, MsgQueryBomb, MsgLeaderBoard, MsgServerData, MsgNofity, MsgDeath } from \"./shared/NetMessage\";\r\nimport SoundManager from \"../../core/sound-manager\";\r\nimport MainMenu from \"../menu/main-menu\";\r\nimport Player from \"../player\";\r\n\r\nimport PlayerRef from \"../../player-ref\";//hoang.tuduc - get last server user select\r\n\r\n// game to socket cluster implement\r\n\r\nexport interface ServerDesc {\r\n    name: string,\r\n    host: string,\r\n    port: number,\r\n    secure: boolean\r\n}\r\n\r\nexport interface ClientListener {\r\n    onGameInfo(info: GameInfo);\r\n    onJoinGame(info: GameInitInfo);\r\n    onServerData(data: GameData);\r\n    onError(error);\r\n    onDeath(data: DeathInfo);\r\n    onNotiMessage(msg: NotifyInfo);\r\n    onLeaderboardChange(data: LbInfo[]);\r\n}\r\n\r\n// let localhost = {name: \"192.168.1.8\", host: \"113.173.97.155\", port: 8000, secure: false };\r\n//let localhost = {name: \"192.168.1.8\", host: \"192.168.1.8\", port: 8000, secure: false };\r\n\r\nexport default class Client {\r\n    private currentTick = 0;        // number of tick receive from server, use to debug package loss\r\n\r\n    private static ms_socket: SCClientSocket = null;//hoang.tuduc - only socket\r\n\r\n    private socket: SCClientSocket = null;\r\n    private channel: SCChannel = null;\r\n    private game: ClientListener = null;\r\n\r\n    constructor(game: ClientListener) {\r\n        this.game = game;\r\n    }\r\n\r\n    connect() {\r\n        // console.log(\"Client - connect - : \" + this.socket);\r\n        if(this.socket) return;\r\n\r\n        var server = MainMenu.servers[PlayerRef.current.last_server_selection];\r\n        //server = localhost;\r\n        this.socket = socketCluster.create({\r\n            // //hostname: '127.0.0.1',\r\n            //hostname: '10.219.12.186',\r\n            // local\r\n            // hostname: '10.219.8.191',\r\n            // port: 8000,\r\n            // private server\r\n            //hostname: '35.201.210.174',\r\n            //port: 443,\r\n            // html5 server\r\n            \r\n            // hostname: '13.233.33.68',\r\n            hostname:server.host,//'wss.ludigames.com',\r\n            port: server.port,//3001,\r\n            secure: server.secure,//true,\r\n            rejectUnauthorized: false,\r\n\r\n            autoReconnect: false,\r\n            codecEngine: new SCCustomCodec(),\r\n        })\r\n        \r\n        this.socket.on('connect', () => {//hoang.tuduc - server is connected at select server\r\n            // cc.log(\"Socket connected\");\r\n\r\n            this.socket.emit(Message.GameInfo, null, (error, data) => {\r\n                if (error == null) {// console.log(\"Client - connect - msg\");\r\n                    this.game.onGameInfo(new MsgGameInfo().unpack(data));\r\n                } else {\r\n                    this.game.onError(\"Get game info error: \" + error);\r\n                }\r\n            })\r\n        })\r\n        this.socket.on('error', (error) => {\r\n            \r\n            cc.warn(\"error: \" + error.message);\r\n            this.game.onError(error);\r\n        })\r\n        this.socket.on('disconnect', () => {\r\n            cc.warn(\"disconnect \" + this.socket.getState());\r\n            this.shutdown();\r\n        })\r\n        this.socket.on(Message.Death, (data) => {\r\n            this.game.onDeath(new MsgDeath().unpack(data));\r\n        })\r\n    }\r\n\r\n    connectToHost(desc: ServerDesc, onConnected: () => void, onFailed: (e: Error) => void = null, force: boolean = false)\r\n    {        \r\n        if(!force && this.socket)\r\n        {\r\n            onConnected();//hoang.tuduc - server connected so we mock callback onConnected\r\n            return;\r\n        }\r\n\r\n        this.socket = Client.ms_socket;\r\n\r\n        if(this.socket) this.disconnect();//// console.log(\"Client - connectToHost - force: \" + force);\r\n\r\n        if(force || !this.socket)\r\n        {\r\n            // console.log(\"Client - connectToHost - host: \" + desc.host);\r\n            this.socket = socketCluster.create({\r\n                // //hostname: '127.0.0.1',\r\n                //hostname: '10.219.12.186',\r\n                // local\r\n                // hostname: '10.219.8.191',\r\n                // port: 8000,\r\n                // private server\r\n                //hostname: '35.201.210.174',\r\n                //port: 443,\r\n                // html5 server\r\n                \r\n                // hostname: '13.233.33.68',\r\n                // hostname:'wss.ludigames.com',\r\n                hostname: desc.host,//'jellimon-be.ludigames.com',//\r\n                port: desc.port,//3001,//\r\n                secure: desc.secure,//true,//\r\n                rejectUnauthorized: false,\r\n\r\n                autoReconnect: false,\r\n                codecEngine: new SCCustomCodec(),\r\n            })\r\n\r\n            Client.ms_socket = this.socket;//hoang.tuduc - hold socket\r\n        }\r\n\r\n        this.socket.on('connect', () => {\r\n            // cc.log(\"Socket connected\");\r\n            onConnected();\r\n        })        \r\n        this.socket.on('error', (error) => { // console.log()\r\n            // cc.warn(\"error \" + this.socket.getState());\r\n            if(onFailed)    onFailed(error);\r\n        })\r\n        this.socket.on('disconnect', () => {\r\n            // cc.warn(\"disconnect \" + this.socket.getState());\r\n            this.shutdown();\r\n        })\r\n    }\r\n\r\n    shutdown() {// console.log(\"Client - shutdown\");\r\n        if (!this.socket || this.socket.getState() != \"closed\") return;\r\n\r\n        this.socket.destroy();\r\n        this.socket = null;\r\n    }\r\n\r\n    disconnect() { if (!this.socket || this.socket.getState() != \"open\") return;\r\n        // console.log(\"Client - disconnect - \" + (!this.socket || this.socket.getState() != \"open\"));\r\n        this.socket.disconnect();\r\n    }\r\n\r\n    sendAction(action: PlayerInput) { if (!this.socket) return;\r\n        // console.log(\"Client - sendAction - \" + this.socket.id + \" - \" + action.direction);\r\n        this.socket.emit(Message.InputAction, new MsgInputAction().pack(action));\r\n    }\r\n\r\n    //hoang.tuduc - impl send request\r\n    sendRequest(event: string, callback: (error: Error, res: any) => void) {\r\n        this.socket.emit(event, null, callback);\r\n    }\r\n\r\n    joinGame(player: {name, cskin, bskin}) {// console.log(\"Client - joinGame\");\r\n        if (!this.socket) return;\r\n        \r\n        this.socket.emit(Message.JoinGame, player, (error, data) => {\r\n            if (error == null) {\r\n                this.game.onJoinGame(new MsgJoinGame().unpack(data));\r\n                this.registerServerData();\r\n            } else\r\n                this.game.onError(error);\r\n        })\r\n    }\r\n\r\n    getPlayerExtraInfo(id: number, callback: (info: PlayerExtraInfo) => void) {// console.log(\"Client - joinGame\");\r\n        if (!this.socket) return;\r\n\r\n        this.socket.emit(Message.QueryPlayer, id, (error, data) => {\r\n            if (error == null) {\r\n                callback(new MsgQueryPlayer().unpack(data));\r\n            }\r\n            else\r\n                this.game.onError(error);\r\n        })\r\n    }\r\n\r\n    getBombExtraInfo(id: number, callback: (info: BombExtraInfo) => void) {// console.log(\"Client - getBombExtraInfo\");\r\n        if (!this.socket) return;\r\n\r\n        this.socket.emit(Message.QueryBomb, id, (error, data) => {\r\n            if (error == null) {\r\n                callback(new MsgQueryBomb().unpack(data));\r\n            }\r\n            else\r\n                this.game.onError(error);\r\n        })\r\n    }\r\n\r\n    getLeaderBardData(id: number, callback: (lbdata: LbInfo[]) => void) {// console.log(\"Client - getLeaderBardData\");\r\n        if (!this.socket) return;\r\n\r\n        this.socket.emit(Message.LeaderBoard, id, (error, data) => {\r\n            if (error == null)\r\n                callback(new MsgLeaderBoard().unpack(data));\r\n            else\r\n                this.game.onError(error);\r\n        })\r\n    }\r\n\r\n    registerServerData() {// console.log(\"Client - registerServerData\");\r\n        if (!this.socket) return;\r\n\r\n        this.socket.on(Message.ServerData, (data) => {\r\n            this.game.onServerData(new MsgServerData().unpack(data));\r\n        })\r\n\r\n        this.socket.subscribe(Message.Notify).watch((data) => {\r\n            this.game.onNotiMessage(new MsgNofity().unpack(data));\r\n        })\r\n\r\n        this.socket.subscribe(\"lbdata\").watch((data) => {\r\n            this.game.onLeaderboardChange(new MsgLeaderBoard().unpack(data));\r\n        })\r\n\r\n        this.socket.subscribe(\"fps-dropped\").watch((data) => {\r\n            cc.log(\"[fps-dropped]\" + data);\r\n        })\r\n\r\n        this.socket.on(\"server-sfx-trigger\", (data) => {\r\n            SoundManager.instance.playEffect(data);\r\n        });\r\n    }\r\n\r\n    ping(callback: (pingTime: number) => void) {// console.log(\"Client - ping\");\r\n        if (!this.socket) return;\r\n\r\n        let startTime = Date.now();\r\n        this.socket.emit('ping', null, () => {\r\n            let time = Date.now() - startTime;\r\n            callback(time);\r\n        })\r\n    }\r\n}\r\n","// Using this class as a static configuration for project\r\n\r\nexport default class Config {\r\n    // this mus be unique for each project\r\n    static PROJECT_ID = \"Template\";\r\n    static PROJECT_VERSION = \"1.0.0\";\r\n}","import Game from \"../game\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Debug extends cc.Component {\r\n\r\n    @property({type: Game})\r\n    game: Game = null;\r\n\r\n    @property({type: cc.Label})\r\n    debugInfoText: cc.Label = null;\r\n\r\n    @property()\r\n    showCollidBox = false;\r\n\r\n    private debugDrawer: cc.Graphics = null;\r\n    private drawBombRange = true;\r\n    private debugInfo: {} = {};\r\n    private joinGame = false;\r\n\r\n    update(dt: number) {\r\n        if(this.joinGame == false && this.game.localPlayer) {\r\n            this._onJoinGame();\r\n        }\r\n\r\n    }\r\n\r\n    lateUpdate() {\r\n        // draw collider\r\n        this.drawCollder();\r\n    }\r\n\r\n    _onJoinGame() {\r\n        this.joinGame = true;\r\n        this.debugPing();\r\n    }\r\n\r\n    debugPing() {\r\n        this.game.client && this.schedule(() => {\r\n            this.game.client.ping(time => {\r\n                this.setInfo(\"ping\", \"\" + time + \"ms\");\r\n            })\r\n        }, 3);\r\n    }\r\n\r\n    setInfo(key: string, value: string) {\r\n        this.debugInfo[key] = value;\r\n        this.updateDebugInfo();\r\n    }\r\n\r\n    updateDebugInfo() {\r\n        let debugText = \"\";\r\n        for(let key in this.debugInfo) {\r\n            debugText += key + \" : \" + this.debugInfo[key] + '\\n';\r\n        }\r\n        this.debugInfoText.string = debugText;\r\n    }\r\n\r\n    drawCollder() {\r\n        if (!this.showCollidBox) return;\r\n\r\n        if (this.debugDrawer == null) {\r\n            let node = cc.find(\"Debug_Drawer\");\r\n            if (node == null) {\r\n                node = new cc.Node(\"Debug_Drawer\");\r\n                node.zIndex = cc.macro.MAX_ZINDEX;\r\n                cc.game.addPersistRootNode(node);\r\n            }\r\n            this.debugDrawer = node.addComponent(cc.Graphics);\r\n        }\r\n\r\n        this.debugDrawer.clear();\r\n        for (let id in this.game.players) {\r\n            this._drawNode(this.game.players[id].node, this.game.playerSize.x / 2, this.game.playerSize.y / 2);\r\n        }\r\n        this.game.localPlayer && this._drawNode(this.game.localPlayer.node, this.game.playerSize.x / 2, this.game.playerSize.y / 2);\r\n\r\n        if (this.drawBombRange) {\r\n            let w2 = this.game.bombRange * 0.5;\r\n            let h2 = this.game.bombRange * 0.8660254037844386;\r\n            for (let id in this.game.bombs) {\r\n                if (this.game.bombs[id].exploded) {\r\n                    this._drawNode(this.game.bombs[id].node, w2, h2);\r\n                    this._drawNode(this.game.bombs[id].node, h2, w2);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    _drawNode(node: cc.Node, w2: number, h2: number) {\r\n        this.debugDrawer.strokeColor = cc.Color.WHITE;\r\n        let world = node.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n        this.debugDrawer.moveTo(world.x - w2, world.y + h2);\r\n        this.debugDrawer.lineTo(world.x + w2, world.y + h2);\r\n        this.debugDrawer.lineTo(world.x + w2, world.y - h2);\r\n        this.debugDrawer.lineTo(world.x - w2, world.y - h2);\r\n        this.debugDrawer.close();\r\n        this.debugDrawer.stroke();\r\n    }\r\n}","// this class use for manage own event sending between game object\r\n// why we do not use cocos event manager like emit, dispatchevent\r\n//      - emit: it only work on the same node\r\n//      - dispatch event: it only work buble (we not send cross object)\r\n\r\nclass Listenner {\r\n    target: cc.Node = null;\r\n    callback: Function = null;\r\n    priority: number = 0;\r\n    excuteOnce: boolean = false;\r\n}\r\n\r\nexport default class EventManager {\r\n\r\n    private static _instance: EventManager = null;\r\n    static get instance() {\r\n        if(EventManager._instance == null)\r\n            EventManager._instance = new EventManager();\r\n\r\n        return EventManager._instance;\r\n    }\r\n\r\n    private eventListenners: {[key: string]: Listenner[]} = {};\r\n\r\n    register(event: string, callback: Function, target: any = null, priority: number = 0, excuteOnce: boolean = false): Function {\r\n        let listenner = {target: target, callback: callback, priority: priority, excuteOnce: excuteOnce};\r\n        if(this.eventListenners[event]) {   // already have evnt type -> push back it in list listenner\r\n            this.eventListenners[event].push(listenner);\r\n        } else { // if not create list\r\n            this.eventListenners[event] = [];\r\n            this.eventListenners[event].push(listenner);\r\n        }\r\n        // sort base on prirority\r\n        this.eventListenners[event].sort((a, b) => {\r\n            return b.priority - a.priority;         // bigger priority -> most front of array\r\n        });\r\n\r\n        return callback;    // return callback to easy store it, and use in unregister function\r\n    }\r\n\r\n    registerOnce(event: string, callback: Function, target: any = null, priority: number = 0) {\r\n        this.register(event, callback, target, priority, true);\r\n    }\r\n\r\n    unregister(event: string, callback: Function, target: any = null) {\r\n        if(this.eventListenners[event]) {\r\n            let toRemove: number[] = [];\r\n            for(let i = 0; i < this.eventListenners[event].length; i++) {\r\n                let listenner = this.eventListenners[event][i];\r\n                if(callback == null) {  // remove for all listenner on node target\r\n                    if(listenner.target == target)\r\n                        toRemove.push(i);\r\n                }  else {\r\n                    if(listenner.target == target && listenner.callback == callback)\r\n                        toRemove.push(i);\r\n                }                \r\n            }\r\n            this.eventListenners[event] = this.eventListenners[event].filter((val, id) => {\r\n                return toRemove.indexOf(id) === -1;\r\n            });\r\n            // remove if event has empty\r\n            if(this.eventListenners[event].length == 0) {\r\n                delete this.eventListenners[event];\r\n            }\r\n        }\r\n    }\r\n\r\n    // unregister all listenner for target\r\n    unregisterTarget(target: any) {\r\n        for(let event in this.eventListenners) {\r\n            let toRemove: number[] = [];\r\n            for(let i = 0; i < this.eventListenners[event].length; i++) {\r\n                let listenner = this.eventListenners[event][i];\r\n                if(listenner.target == target)\r\n                    toRemove.push(i);\r\n            }\r\n            this.eventListenners[event] = this.eventListenners[event].filter((val, id) => {\r\n                return toRemove.indexOf(id) === -1;\r\n            });\r\n            // remove if event has empty\r\n            if(this.eventListenners[event].length == 0) {\r\n                delete this.eventListenners[event];\r\n            }\r\n        }\r\n    }\r\n\r\n    // remove all listener for event\r\n    remove(event: string) {\r\n        if(this.eventListenners[event]) {\r\n            delete this.eventListenners[event];\r\n        }\r\n    }\r\n\r\n    dispatch(event: string, ...params: any[]) {\r\n        if(this.eventListenners[event]) {\r\n            let excuteOnce: Listenner[] = [];\r\n            this.eventListenners[event].forEach(listenner => {\r\n                if(listenner.target) {\r\n                    listenner.callback.call(listenner.target, params[0], params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8], params[9]);\r\n                } else {\r\n                    listenner.callback(params[0], params[1], params[2], params[3], params[4], params[5], params[6], params[7], params[8], params[9]);\r\n                }\r\n                if(listenner.excuteOnce == true) {\r\n                    excuteOnce.push(listenner);\r\n                }\r\n            });\r\n\r\n            excuteOnce.forEach(listenner => {\r\n                this.unregister(event, listenner.callback, listenner.target);\r\n            });\r\n        }\r\n    }\r\n}\r\n","import NetComponent from \"./net-component\";\r\nimport EventManager from \"../core/event-manager\";\r\nimport { ExpBubleInfo } from \"./multiplayer/shared/IMessageData\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ExpBuble extends NetComponent {\r\n    @property({type: cc.SpriteFrame})\r\n    frames: cc.SpriteFrame[] = []\r\n\r\n    start() {\r\n        //this.node.zIndex = -1;\r\n    }\r\n\r\n    init(data: ExpBubleInfo) {\r\n        super.init(data);\r\n        this.node.opacity = data.opacity;\r\n        this.node.setPosition(data.x, data.y);\r\n        this.node.getComponent(cc.Sprite).spriteFrame = this.frames[data.type];\r\n    }\r\n\r\n    setStateData(data: ExpBubleInfo) {\r\n        super.setStateData(data);\r\n        this.node.opacity = data.opacity;\r\n        this.death = data.death;\r\n        this.node.getComponent(cc.Sprite).spriteFrame = this.frames[data.type];\r\n    }\r\n\r\n    onDeath(timeout: boolean) {\r\n        EventManager.instance.dispatch(NetComponent.EVENT_NET_ENTITY_DEATH, this.id);\r\n\r\n        if(timeout) {\r\n            this.node.removeFromParent();\r\n        } else {\r\n            // anim death\r\n            this.node.runAction(cc.sequence(\r\n                cc.fadeOut(0.2),\r\n                cc.callFunc(() => {\r\n                    this.node.removeFromParent();\r\n                })\r\n            ))\r\n        }\r\n    }\r\n\r\n}","\r\n//import firebase from \"../libs/firebase_662\"\r\n//let firebase = require('firebase/app');\r\n\r\nimport PlayerRef from \"../player-ref\";\r\nimport Popup from \"../core/popup\";\r\n\r\ndeclare var firebase:any;\r\n\r\n//require('firebase/auth');\r\n\r\n//const {ccclass, property} = cc._decorator;\r\n\r\nexport default class firebaseApp // extends cc.Node \r\n{\r\n  private static _instance: firebaseApp = null;\r\n  private _app:any = null;\r\n  //private authofApp = null;\r\n  anonymousID: string = null;\r\n  private isAnonymousSignIn = false;\r\n\r\n  txtNotify:cc.Label = null;\r\n\r\n\r\n  private firebaseConfig = {\r\n    apiKey: \"AIzaSyCmyZFtG71zLuMfQNm-xyWAGLUAqPuuZfY\",\r\n    authDomain: \"testfbase-2ce37.firebaseapp.com\",\r\n    databaseURL: \"https://testfbase-2ce37.firebaseio.com\",\r\n    projectId: \"testfbase-2ce37\",\r\n    storageBucket: \"testfbase-2ce37.appspot.com\",\r\n    messagingSenderId: \"797184681679\",\r\n    appId: \"1:797184681679:web:1a6a3ca7491d9cdda8b9ba\",\r\n    measurementId: \"G-PHL8Y5V5GC\"\r\n  };\r\n\r\n  \r\n  public static get instance(): firebaseApp {\r\n    if(firebaseApp._instance == null) \r\n      firebaseApp._instance = new firebaseApp();\r\n      return firebaseApp._instance;\r\n  }\r\n  \r\n\r\n  setOutputComponent (txtLable: cc.Label)\r\n  {\r\n    this.txtNotify = txtLable;\r\n    this.txtNotify.string =\"\";\r\n  }\r\n\r\n  initFirebaseApp()\r\n  {\r\n    firebaseApp._instance = this;\r\n    if (!firebase.apps.length) {\r\n      this._app = firebase.initializeApp(this.firebaseConfig, \"Jellimon\"); //for multi-app reference to 1 firebase\r\n      //firebase.initializeApp(this.firebaseConfig, \"Jellimon\");//for one-app reference to 1 firebase\r\n      firebase.analytics(this._app);\r\n      console.log(\"Nhan --> get App Name after initializeApp: \" + this._app.name);\r\n    }\r\n  }\r\n\r\n  initAuth()\r\n  {\r\n    if (firebaseApp.instance == null) return;\r\n\r\n    //cc.log(\"Firebase -->initAuth --> START\");\r\n    //this.authofApp = firebase.auth(); // if we call firebase.auth() without param, firebase will get 'Default' app\r\n\r\n    firebase.auth(this._app).signInAnonymously().catch(function(error) {\r\n      // Handle Errors here.\r\n      cc.log(\"Firebase -->signInAnonymously --> error code: \" + error.code);\r\n      cc.log(\"Firebase -->signInAnonymously --> error Mess: \" + error.errorMessage);\r\n\r\n    });\r\n\r\n    // If signInAnonymously is completed, callback function that was registed for onAuthStateChanged will be called\r\n    firebase.auth(this._app).onAuthStateChanged(function(user) {\r\n      console.log('User state change detected from the Background script of the Chrome Extension:', user);\r\n      console.log(\"Firebase -->1 user.uid : \" + user.uid);\r\n      console.log(\"Firebase -->1 user.isAnonymous : \" + user.isAnonymous);\r\n      console.log(\"Firebase --> currentUser.uid : \" + firebase.auth(firebaseApp._instance._app).currentUser.uid);\r\n      \r\n      if (user.isAnonymous)\r\n      {\r\n        firebaseApp._instance.anonymousID = user.uid;\r\n        firebaseApp.instance.writeGameData(user.uid);\r\n      }\r\n      else{\r\n        PlayerRef.current.crediental = user.uid;\r\n        firebaseApp.instance.loadGameData(user.uid);\r\n      }\r\n    });\r\n\r\n    //let credential = firebase.auth.GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\r\n    // Using a popup.\r\n    \r\n  }\r\n\r\n  public GoogleAuth()\r\n  {\r\n    let provider = new firebase.auth.GoogleAuthProvider();\r\n    provider.addScope('profile');\r\n    provider.addScope('email');\r\n    firebase.auth().signInWithPopup(provider).then(function(result) {\r\n      // This gives you a Google Access Token.\r\n      let token = result.credential.accessToken;\r\n      // The signed-in user info.\r\n      let user = result.user;\r\n      console.log(\"Firebase -->1 google Token : \" + token);\r\n    });\r\n  }\r\n\r\n  public writeUserData(userId: number, name: string, _control: number, user: number, bombskin:number, map:number, _streak: number,\r\n                      _alive:number, _showhelp: number, _isRabitTutorial: number, _isPenguinTutorial: number, _isLeafTutorial: number)\r\n  {\r\n    firebase.database().ref('users/' + userId).get({\r\n      username: name,\r\n      control: _control,\r\n      characterType : user,\r\n      bombType : bombskin,\r\n      mapType: map,\r\n      streak: _streak,\r\n      alive:_alive,\r\n      showhelp: _showhelp,\r\n      isRabitTutorial: _isRabitTutorial,\r\n      isPenguinTutorial: _isPenguinTutorial,\r\n      isLeafTutorial: _isLeafTutorial,\r\n    },function(error) {\r\n      if (error) {\r\n        cc.log(\"Firebase -->writeUserData --> error code: \" + error.code);\r\n        cc.log(\"Firebase -->writeUserData --> error Mess: \" + error.errorMessage);\r\n      } else {\r\n        // Data saved successfully!\r\n        cc.log(\"Firebase -->writeUserData --> Data saved successfully\");\r\n      }\r\n    });\r\n  }\r\n\r\n  public writeGameData(uid:string)\r\n  {\r\n    if (firebaseApp._instance == null)\r\n      return;\r\n    else\r\n      console.log(\"_instance.anonymousID : \" + uid);\r\n\r\n    firebase.firestore(this._app).collection(\"users\").doc(uid).set({\r\n      username: PlayerRef.current.name,\r\n      control: PlayerRef.current.control,\r\n      characterType : PlayerRef.current.user,\r\n      bombType : PlayerRef.current.bomb,\r\n      mapType: PlayerRef.current.map,\r\n      streak: PlayerRef.current.streak,\r\n      alive: PlayerRef.current.alive,\r\n      showhelp: PlayerRef.current.show_help,\r\n      isRabitTutorial: PlayerRef.current.isRabitTutorial,\r\n      isPenguinTutorial: PlayerRef.current.isPenguinTutorial,\r\n      isLeafTutorial: PlayerRef.current.isLeafTutorial,\r\n      },function(error) {\r\n      if (error) {\r\n        cc.log(\"Firebase -->writeUserData --> error code: \" + error.code);\r\n        cc.log(\"Firebase -->writeUserData --> error Mess: \" + error.errorMessage);\r\n      } else {\r\n      // Data saved successfully!\r\n        cc.log(\"Firebase -->writeUserData --> Data saved successfully\");\r\n      }\r\n    });\r\n\r\n\r\n    // firebase.firestore(this._app).collection(\"users\").add({\r\n    //     first: \"Ada\",\r\n    //     last: \"Lovelace\",\r\n    //     born: 1815\r\n    // })\r\n    // .then(function(docRef) {\r\n    //     console.log(\"Document written with ID: \" + docRef.id);\r\n    // })\r\n    // .catch(function(error) {\r\n    //     console.error(\"Error adding document: \" + error);\r\n    // });\r\n  }\r\n\r\n  public loadGameData(uid:string)\r\n  {\r\n    if (firebaseApp._instance == null)\r\n      return;\r\n    else\r\n      console.log(\"_instance.anonymousID : \" + uid);\r\n\r\n    firebase.firestore(this._app).collection(\"users\").doc(uid).get().then(function(doc) {\r\n      if (doc.exists) {\r\n        console.log(\"Document data: \", doc.data());\r\n        let dataToString = doc.data();\r\n        //PlayerRef.current.name = doc.data().username + \"__AAAAA\";\r\n        //console.log(\"Document PlayerRef.current.name:\" + doc.data().username);\r\n        PlayerRef.current.name = dataToString.username;\r\n        PlayerRef.current.control = dataToString.control;\r\n        PlayerRef.current.user = dataToString.characterType;\r\n        PlayerRef.current.bomb = dataToString.bombType;\r\n        PlayerRef.current.map = dataToString.mapType;\r\n        PlayerRef.current.streak = dataToString.streak;\r\n        PlayerRef.current.alive = dataToString.alive;\r\n        PlayerRef.current.show_help = dataToString.showhelp;\r\n        PlayerRef.current.isRabitTutorial = dataToString.isRabitTutorial;\r\n        PlayerRef.current.isPenguinTutorial = dataToString.isPenguinTutorial;\r\n        PlayerRef.current.isLeafTutorial = dataToString.isLeafTutorial;\r\n      } else {\r\n          // doc.data() will be undefined in this case\r\n          console.log(\"No such document!\");\r\n      }\r\n  }).catch(function(error) {\r\n      console.log(\"Error getting document:\", error);\r\n  });\r\n\r\n  }\r\n\r\n  public SignInWithEmailPass(email:string , pass:string)\r\n  {\r\n    if (firebaseApp.instance.txtNotify)\r\n      firebaseApp.instance.txtNotify.string = '';\r\n    firebase.auth(this._app).signInWithEmailAndPassword(email, pass).catch(function(error) {\r\n      // Handle Errors here.\r\n      let errorCode = error.code;\r\n      let errorMessage:string = error.message;\r\n      // [START_EXCLUDE]\r\n      if (errorCode === 'auth/wrong-password') {\r\n        //alert('Wrong password.');\r\n        if (firebaseApp.instance.txtNotify)\r\n          firebaseApp.instance.txtNotify.string = 'Wrong password.';\r\n      } else {\r\n        if (firebaseApp.instance.txtNotify)\r\n          firebaseApp.instance.txtNotify.string = errorMessage + \" Please register account again.\";\r\n      }\r\n\r\n\r\n      //console.log(error);\r\n      //document.getElementById('quickstart-sign-in').disabled = false;\r\n      // [END_EXCLUDE]\r\n    });\r\n  }\r\n\r\n\r\n  public RegisterEmailPass(email:string , pass:string)\r\n  {\r\n    if (firebaseApp.instance.txtNotify)\r\n      firebaseApp.instance.txtNotify.string = '';\r\n    firebase.auth(this._app).createUserWithEmailAndPassword(email, pass).catch(function(error) {\r\n      // Handle Errors here.\r\n      let errorCode = error.code;\r\n      let errorMessage:string = error.message;\r\n      // [START_EXCLUDE]\r\n      if (errorCode === 'auth/weak-password') {\r\n        //alert('Wrong password.');\r\n        if (firebaseApp.instance.txtNotify)\r\n          firebaseApp.instance.txtNotify.string = 'The password is too weak.';\r\n      } else {\r\n        if (firebaseApp.instance.txtNotify)\r\n          firebaseApp.instance.txtNotify.string = errorMessage;\r\n      }\r\n      //console.log(error);\r\n    });\r\n  }\r\n\r\n}","import Loader from \"../core/loader\";\r\nimport Player from \"./player\";\r\nimport Bomb from \"./bomb\";\r\nimport Client, { ClientListener } from \"./multiplayer/client\";\r\nimport { GameInfo, GameInitInfo, GameData, LbInfo, NotifyInfo, DeathInfo } from \"./multiplayer/shared/IMessageData\";\r\nimport PlayerRef, { DesignType } from \"../player-ref\";\r\nimport CameraControl from \"./camera-control\";\r\nimport PlayerControl from \"./player-control\";\r\nimport Leaderboard from \"./ui/leaderboard\";\r\nimport EventManager from \"../core/event-manager\"\r\nimport Notifier from \"./notifier\";\r\nimport MiniMap from \"./ui/minimap\";\r\nimport ExpBuble from \"./exp-buble\";\r\nimport PlayerControlLocal from \"./player-control-local\";\r\nimport NetComponent from \"./net-component\";\r\nimport Popup from \"../core/popup\";\r\nimport SpecialSkill from \"./ui/special-skill\";\r\nimport Cacher from \"./resources-cacher\";\r\nimport SoundManager from \"../core/sound-manager\";\r\n/**\r\n * Client - Server connect step\r\n * - C - Open connection to server. (if success then)\r\n * - C - Request game info. (send: 'gameinfo' msg to server)\r\n * - S - Return game info. content: <world_w>|<world_h>|[other infos]\r\n * - C - Recive game info to init world.\r\n * - C - Request join. (send: 'join' msg with data: <player_name>)\r\n * - S - Accept join. Send back: <player id>|<start pos>|<start health>#<all current player infos: id|name|pos>\r\n * - C - Init players. Subscribe game update msg channel 'serverdata'\r\n * - S - Send game info at 30fps. <player id>|<pos><dir>|<player action>;<player id>|<pos><dir>|<player action>#<bom id>|<pos>|[explore]\r\n * - C - Send local action. <player action>\r\n * \r\n * - S - Send death - end\r\n * - C - Request player name. Send 'queryplayer' msg with data <player id> - S - return with player name or null if not exist\r\n */\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Game extends cc.Component implements ClientListener {\r\n\r\n    static instance: Game = null;\r\n    static isTutorial: boolean = true;\r\n\r\n    // lhchi add\r\n\tstatic USE_NEW_PORTAL: boolean = true;\r\n    static USE_DYNAMIC_BOMB: boolean = false; // use for Dynamic range of bomb\r\n    static pressed_btnfire: boolean = false;\r\n    static dynamic_range = 20;\r\n    static min_range = 20;\r\n    static max_range = 100;\r\n    static count = 3;\r\n\r\n    @property(cc.Node)\r\n    worldRoot: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    map: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    killerPopup: cc.Node = null;\r\n\r\n    @property(Notifier)\r\n    notifier: Notifier = null;\r\n\r\n    @property(Leaderboard)\r\n    leaderboard: Leaderboard = null;\r\n\r\n    @property(MiniMap)\r\n    miniMap: MiniMap = null;\r\n\r\n    @property({type: cc.Prefab})\r\n    playerPrefabs: cc.Prefab[] = [];\r\n\r\n    @property(cc.Prefab)\r\n    bombPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    expBublePrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    targetPrefab: cc.Prefab = null;\r\n\r\n    @property({type: cc.SpriteFrame})\r\n    mcFrames: cc.SpriteFrame[] = [];\r\n\r\n    localPlayer: Player = null;\r\n    localTarget: cc.Node = null;\r\n    players: { [key: number]: Player } = {};\r\n    bombs: { [key: number]: Bomb } = {};\r\n    bubles: { [key: number]: ExpBuble } = {};\r\n    \r\n    client: Client = null;\r\n    private isDeath: boolean = false;\r\n\r\n\r\n    // game info\r\n    worldSize: cc.Vec2 = null;\r\n    playerSize: cc.Vec2 = null;\r\n    bombRange: number = 0;\r\n    playerSpeed: number = 0;\r\n    skill: SpecialSkill = null;\r\n\r\n    onLoad() {\r\n        if (!Loader.loaded) return;      // prevent run when loader init\r\n\r\n        Popup.instance.setTarget(this.node.getChildByName(\"uiRoot\")); //set target\r\n        Popup.instance.showWaitingPopup(\"connecting to server...\");\r\n        Game.instance = this;\r\n        this.client = new Client(this);\r\n        this.client.connect();\r\n\r\n        //load map\r\n        let tilemap = this.map.addComponent(cc.TiledMap);\r\n        tilemap.tmxAsset = Cacher.instance.map[\"asset\"];\r\n        tilemap.tmxAsset.textures[0] = Cacher.instance.map[\"texture\"][PlayerRef.current.map];\r\n    }\r\n\r\n    start() {\r\n        if (!Loader.loaded) return;      // prevent run when loader init\r\n        EventManager.instance.register(NetComponent.EVENT_NET_ENTITY_DEATH, this.onNetEntityDeath, this);\r\n        SoundManager.instance.playMusic(\"m_ih_bgm\");\r\n        this.map.active = true;\r\n\r\n        if(Game.USE_DYNAMIC_BOMB == true)\r\n        {\r\n            ((this.node.getChildByName(\"uiRoot\")).getChildByName(\"fire-pad\")).getChildByName(\"bg\").active = true;\r\n        }\r\n        else\r\n        {\r\n            ((this.node.getChildByName(\"uiRoot\")).getChildByName(\"fire-pad\")).getChildByName(\"bg\").active = false;\r\n        }\r\n    }\r\n\r\n    onNetEntityDeath(id: string) {\r\n        if (this.players[id]) {\r\n            delete this.players[id];\r\n            this.miniMap.removeFromMap([id]);\r\n        } else if (this.bombs[id]) {\r\n            delete this.bombs[id];\r\n        } else if (this.bubles[id]) {\r\n            delete this.bubles[id];\r\n        }\r\n    }\r\n\r\n    // clientlistener implement\r\n    onGameInfo(info: GameInfo) {//console.log(\"hoang.tuduc - game - onGameInfo\");\r\n        cc.log(\"game info: \" + info.worldW + \" - \" + info.worldH);\r\n        this.worldRoot.width = info.worldW;\r\n        this.worldRoot.height = info.worldH;\r\n\r\n        this.worldSize = cc.v2(info.worldW, info.worldH);\r\n        this.playerSize = cc.v2(info.playerW, info.playerH);\r\n        this.bombRange = info.bombRange;\r\n        this.playerSpeed = info.playerSpeed;\r\n\r\n        // join game\r\n        this.client.joinGame({name: PlayerRef.current.name, cskin: PlayerRef.current.user, bskin: PlayerRef.current.bomb});\r\n    }\r\n\r\n    onJoinGame(info: GameInitInfo) {\r\n        // lb data\r\n        //this.schedule(this.updateLeaderBoard.bind(this), 0.5);\r\n        // create my player\r\n        let myPlayer = cc.instantiate(this.playerPrefabs[PlayerRef.current.user]).getComponent(Player);\r\n        myPlayer.init({ ...info, level: 1, exp: 0, health: info.startHealth, name: PlayerRef.current.name, cskin: PlayerRef.current.user});\r\n        myPlayer.node.addComponent(PlayerControlLocal).init(this.client);\r\n        this.worldRoot.addChild(myPlayer.node);\r\n        this.localPlayer = myPlayer;\r\n        CameraControl.instance.setTarget(myPlayer.node);\r\n        \r\n        this.skill = this.getComponent(SpecialSkill);\r\n        this.skill.setPlayerSkill();\r\n        \r\n        if (!this.localTarget) {\r\n            this.localTarget = cc.instantiate(this.targetPrefab);\r\n            this.localTarget.active = false;\r\n            this.worldRoot.addChild(this.localTarget);\r\n        }\r\n        \r\n        //dismis waiting popup\r\n        Popup.instance.hideWaitingPopup();\r\n    }\r\n\r\n    onServerData(data: GameData) {\r\n        data.players.forEach(pinfo => {\r\n            if (this.localPlayer.id == pinfo.id) {  // process for local player\r\n                this.localPlayer.controller.setServerData(pinfo);\r\n                this.skill.setData(pinfo.cskin, pinfo.skillable, pinfo.cooldown);\r\n            } else if (this.players[pinfo.id]) {\r\n                this.players[pinfo.id].controller.setServerData(pinfo);\r\n            } else {    // new player join\r\n                let player = cc.instantiate(this.playerPrefabs[pinfo.cskin]).getComponent(Player);\r\n                player.init({ ...pinfo, name: \"\" });\r\n                player.node.addComponent(PlayerControl);\r\n                this.worldRoot.addChild(player.node);\r\n                this.players[player.id] = player;\r\n                this.client.getPlayerExtraInfo(player.id, data => {\r\n                    if (data && data.id == player.id) {\r\n                        player.setPlayerName(data.name);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        data.bombs.forEach(binfo => {\r\n            if (this.bombs[binfo.id]) {\r\n                this.bombs[binfo.id].setStateData(binfo);\r\n            } else {\r\n                let bomb = cc.instantiate(this.bombPrefab).getComponent(Bomb);\r\n                bomb.init(binfo);\r\n                this.worldRoot.addChild(bomb.node);\r\n                this.bombs[binfo.id] = bomb;\r\n                this.client.getBombExtraInfo(bomb.id, data => {\r\n                    if (data && data.id == bomb.id) {\r\n                        bomb.setExtraData(data);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        data.bubles.forEach(bubleInfo => {\r\n            if (this.bubles[bubleInfo.id]) {\r\n                this.bubles[bubleInfo.id].setStateData(bubleInfo);\r\n            } else {\r\n                let buble = cc.instantiate(this.expBublePrefab).getComponent(ExpBuble);\r\n                buble.init(bubleInfo);\r\n               // cc.log(buble);\r\n                //buble.node.color = cc.Color.RED;\r\n                this.worldRoot.addChild(buble.node);\r\n                this.bubles[bubleInfo.id] = buble;\r\n            }\r\n        })\r\n        \r\n        //@ update minimap\r\n        this.miniMap.updatePlayersPosition(this.players);\r\n    }\r\n\r\n    updateLeaderBoard() {\r\n        if (!this.localPlayer) return;\r\n\r\n        this.client.getLeaderBardData(this.localPlayer.id, (data) => {\r\n            this.leaderboard.setData(data);\r\n            this.miniMap.updatePlayersDisplay(data);\r\n            this.localPlayer.controller.updateRank(data, true);\r\n            for (let id in this.players) {\r\n                this.players[id].controller.updateRank(data);\r\n            }\r\n        })\r\n    }\r\n\r\n    onLeaderboardChange(data: LbInfo[]) {\r\n        this.leaderboard.setData(data);\r\n        this.miniMap.updatePlayersDisplay(data);\r\n        this.localPlayer.controller.updateRank(data, true);\r\n        for (let id in this.players) {\r\n            this.players[id].controller.updateRank(data);\r\n        }\r\n    }\r\n\r\n    updateLocalTarget(direction: number, range: number) {\r\n        if (direction > -1 && range > 0) {\r\n            let len = range * this.bombRange / 100;\r\n            let rad = direction * Math.PI / 180;\r\n            let x = this.localPlayer.node.x + Math.round(len * Math.cos(rad));\r\n            let y = this.localPlayer.node.y + this.playerSize.y + Math.round(len * Math.sin(rad));\r\n            this.localTarget.setPosition(x, y);\r\n            this.localTarget.active = true;\r\n        } else {\r\n            this.localTarget.active = false;\r\n        }\r\n    }\r\n\r\n    onDeath(data: DeathInfo) {\r\n        PlayerRef.current.updateLocalRecord(data.score, data.time);\r\n        //this.unschedule(this.updateLeaderBoard.bind(this));\r\n        \r\n        this.isDeath = true;\r\n        this.killerPopup.active = true;\r\n        let timePlay = \"\" + Math.floor(data.time / 60) + \"\\' \" + Math.floor(data.time % 60) + \"\\\"\";\r\n        this.killerPopup.getComponentInChildren(cc.Label).string = \"Killed by \" + data.killer;\r\n        \r\n        // * Bug Fixed ['10592233']: '[HTML5][AP] : AUT will take more time Loading time to re-enter the AP after exiting through ECS.\r\n        // this.client.disconnect();\r\n\r\n        this.killerPopup.runAction(cc.sequence(\r\n            cc.fadeIn(0.5),\r\n            cc.delayTime(1),\r\n            cc.fadeOut(0.25),\r\n            cc.callFunc(() => {\r\n                // this.client.shutdown();\r\n                this.killerPopup.active = false;\r\n                SoundManager.instance.stop(\"m_ih_bgm\");\r\n                // show ADS\r\n                Game.instance.showAds();\r\n            }),\r\n        ));\r\n\t\t\r\n        this.scheduleOnce(function() {   \r\n            Popup.instance.showConfirmPopup(\r\n                this.mcFrames[PlayerRef.current.user],\r\n                timePlay, //time-played\r\n                data.score.toString(), //score\r\n                this.replay.bind(this),\r\n                this.quit.bind(this)\r\n            );        \r\n       }, 3);\r\n    }\r\n\r\n    replay() {\r\n        if (window[\"dataLayer\"]) {\r\n            window[\"dataLayer\"].push({\r\n                'event': 'ga_event',\r\n                'ga_category': 'Gamepage',\r\n                'ga_action': 'Start',\r\n                'ga_label': window[\"productTitle\"],\r\n                'ga_noninteraction': false\r\n            });\r\n        }\r\n        cc.director.loadScene('game');\r\n    }\r\n\r\n    quit() {\r\n        if (window[\"dataLayer\"]) {\r\n            window[\"dataLayer\"].push({\r\n                'event': 'ga_event',\r\n                'ga_category': 'Gamepage',\r\n                'ga_action': 'Completion',\r\n                'ga_label': window[\"productTitle\"],\r\n                'ga_noninteraction': false\r\n            });\r\n        }\r\n        this.client.disconnect();\r\n        cc.director.loadScene('main-menu');\r\n    }\r\n\r\n    onNotiMessage(msg: NotifyInfo) {\r\n        if (msg.kill) {\r\n            SoundManager.instance.playRandom([\"vo_jelly_die_1\", \"vo_jelly_die_2\", \"vo_jelly_die_3\", \"vo_jelly_die_4\"]);\r\n            this.notifier.addNotify(\"<color=#00ff00>\" + msg.kill.killer + \"</c> killed <color=#ff0000>\" + msg.kill.deathman + \"</c>\");\r\n        }\r\n    }\r\n\r\n    onError(error) {\r\n        // console.log(\"game - onError - \" + this.isDeath);\r\n        //this.unschedule(this.updateLeaderBoard.bind(this));\r\n        if(this.isDeath) return;\r\n\r\n        cc.error(error);//console.log(\"game - onError - \" + error);\r\n        this.client.shutdown();\r\n        Popup.instance.showInfoPopup(\r\n            \"Opss, something's wrong...\\nPlease try again later!\", \r\n            () => { \r\n                cc.director.loadScene('main-menu') \r\n            }\r\n        )\r\n        //cc.director.loadScene('main-menu');\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this);\r\n        delete this.client;\r\n    }\r\n\r\n    onButtonQuit(event) {\r\n        SoundManager.instance.stop(\"m_ih_bgm\");\r\n        SoundManager.instance.playEffect(\"sfx_ui_back\");\r\n        Popup.instance.showInfoPopup(\r\n            null, \r\n            this.quit.bind(this), \r\n            true, \r\n            () => { SoundManager.instance.playMusic(\"m_ih_bgm\");}\r\n        );\r\n    }\r\n\r\n    showAds()\r\n    {\r\n        console.log(\"showAds()\");\r\n        if (window[\"enableADS\"])\r\n        {\r\n            console.log(\"showing ADS\");\r\n            try {\r\n                window[\"playAds\"]();\r\n            }\r\n            catch(error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Player from \"../player\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HealthBar extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    private segments: cc.Node = null;\r\n\r\n    @property({type: [cc.SpriteFrame]})\r\n    healthColors: cc.SpriteFrame[] = [];\r\n\r\n    private healthBar: cc.ProgressBar;\r\n    private curColor = 0; //@ green\r\n    //private colorFrames: {[key: string]: cc.SpriteFrame} = {}\r\n\r\n\r\n    start() {\r\n        this.healthBar = this.getComponent(cc.ProgressBar);\r\n        this.curColor = 0;\r\n        // [\"red\", \"green\"].forEach(color => {\r\n        //     cc.loader.loadRes(\"textures/blood_\" + color + \".png\", function(err, data){\r\n        //         this.colorFrames[color] = new cc.SpriteFrame(data);\r\n        //     }.bind(this));\r\n        // })\r\n    }\r\n\r\n    updateHealth(level: number, current: number) {\r\n        if(!this.healthBar) return;\r\n        \r\n        this.healthBar.progress = current / Player.getHealth(level);\r\n        \r\n        // segs\r\n        //let segno = Math.ceil(total / 35);\r\n        if (level >= 2) {\r\n            let cursegno = this.segments.childrenCount;\r\n            for(let i = cursegno; i < level; i++) {\r\n                let seg = cc.instantiate(this.segments.children[0]);\r\n                this.segments.addChild(seg);\r\n            }\r\n        }\r\n    }\r\n\r\n    // use to update health color notify on local player\r\n    updateNotify() {\r\n        if (this.healthBar.progress < 0.3 && this.curColor == 0) {\r\n            this.curColor = 1;\r\n            this.healthBar.getComponentInChildren(cc.Sprite).spriteFrame = this.healthColors[this.curColor];\r\n        } else if (this.healthBar.progress == 1 && this.curColor == 1) {\r\n            this.curColor = 0;\r\n            this.healthBar.getComponentInChildren(cc.Sprite).spriteFrame = this.healthColors[this.curColor];\r\n        }\r\n    }\r\n}","import PlayerRef from \"../../player-ref\";\r\nimport SoundManager from \"../../core/sound-manager\";\r\n// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HelpPage extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    menuPage: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    apPage: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    ticked: cc.Node = null;\r\n\r\n\r\n    @property(cc.Label)\r\n    textPage: cc.Label = null;\r\n\r\n    @property(cc.Button)\r\n    previous: cc.Button = null;\r\n    \r\n    @property(cc.Button)\r\n    next: cc.Button = null;\r\n\r\n    static firstLaunch_shouldShow = true;\r\n\r\n    start () {\r\n        this.ticked.active = PlayerRef.current.show_help < 1;\r\n        this.node.active = HelpPage.firstLaunch_shouldShow && PlayerRef.current.show_help > 0;\r\n        //HelpPage.firstLaunch_shouldShow = false;\r\n    }\r\n\r\n    onButtonsPress(event, customEventData) {\r\n        if (customEventData == 0) { // dont show\r\n            SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n            let show_help = PlayerRef.current.show_help;\r\n            PlayerRef.current.show_help = 1 - show_help;\r\n            this.ticked.active = PlayerRef.current.show_help < 1;\r\n        } else if (customEventData == 3) { // skip\r\n            SoundManager.instance.playEffect(\"sfx_ui_back\");\r\n            this.node.active = false;\r\n            HelpPage.firstLaunch_shouldShow = false;\r\n        } else {\r\n            SoundManager.instance.playEffect(\"sfx_ui_next\");\r\n            this.apPage.active = (customEventData == 2);\r\n            this.menuPage.active = (customEventData == 1);\r\n            this.textPage.string = (customEventData + \"/2\");\r\n            this.previous.node.active = (customEventData == 2);\r\n            this.next.node.active = (customEventData == 1);\r\n        } \r\n    }\r\n}\r\n","if(!window.i18n) window.i18n = {};\r\nif(!window.i18n.languages) window.i18n.languages = {};\r\n\r\n\r\nconst Polyglot = require('polyglot');\r\nconst supported_languages = window.i18n.supported_languages || [];\r\n\r\nlet saveLanguage = CC_EDITOR ? null : cc.sys.localStorage.getItem(\"__gamesave-language\");\r\nlet lang = '';\r\nif(saveLanguage == null) {      // first time, load default from system lang\r\n    lang = cc.sys.language;\r\n    if(supported_languages.length > 0 && supported_languages.indexOf(lang) == -1) {   // system lang not support -> choose the 1st\r\n        lang = supported_languages[0];\r\n        // save selected\r\n        if(!CC_EDITOR) {\r\n            cc.sys.localStorage.setItem(\"__gamesave-language\", lang);\r\n        }\r\n    }\r\n} else {    // we have the save lang\r\n    lang = saveLanguage;\r\n}\r\n\r\n\r\nlet data = window.i18n.languages[lang] || {}; // update this to set your default displaying language in editor\r\n// let polyglot = null;\r\nlet polyglot = new Polyglot({phrases: data, allowMissing: true});\r\n\r\n\r\nmodule.exports = {\r\n    /**\r\n     * This method allow you to switch language during runtime, language argument should be the same as your data file name\r\n     * such as when language is 'zh', it will load your 'zh.js' data source.\r\n     * @method init\r\n     * @param language - the language specific data file name, such as 'zh' to load 'zh.js'\r\n     */\r\n    init (language) {\r\n        if(!window.i18n.languages[language]) {\r\n            console.warn('Language is not support: ' + language);\r\n            return false;\r\n        }\r\n        if(!CC_EDITOR && window.i18n.languages[language]) {    // save lang\r\n            cc.sys.localStorage.setItem(\"__gamesave-language\", language);\r\n        }\r\n        lang = language;\r\n        data = window.i18n.languages[lang] || {};\r\n        polyglot.replace(data);\r\n        return true;\r\n    },\r\n    /**\r\n     * return the save language\r\n     */\r\n    getSaveLang () {\r\n        return cc.sys.localStorage.getItem(\"__gamesave-language\");\r\n    },\r\n    /**\r\n     * this method takes a text key as input, and return the localized string\r\n     * Please read https://github.com/airbnb/polyglot.js for details\r\n     * @method t\r\n     * @return {String} localized string\r\n     * @example\r\n     *\r\n     * var myText = i18n.t('MY_TEXT_KEY');\r\n     *\r\n     * // if your data source is defined as\r\n     * // {\"hello_name\": \"Hello, %{name}\"}\r\n     * // you can use the following to interpolate the text\r\n     * var greetingText = i18n.t('hello_name', {name: 'nantas'}); // Hello, nantas\r\n     */\r\n    t (key, opt) {\r\n        return polyglot.t(key, opt);\r\n    }\r\n};","import Input, { InputData } from \"./input\";\r\nimport Game from \"./game\";\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n// keyboard controller support\r\n\r\n@ccclass\r\nexport default class KeyInput extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    dpad: cc.Node = null;\r\n\r\n    private keys = {};      // key status\r\n    private preAngle = -1;\r\n\r\n    start() {\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    }\r\n\r\n    update() {\r\n        this.updateMove();\r\n    }\r\n\r\n    setInput(data: InputData) {\r\n        Input.instance.set(data, 0);        // touch weight: 1, keyboard weight: 0\r\n    }\r\n\r\n    onKeyUp(event: cc.Event.EventKeyboard) {\r\n        let code = event.keyCode;\r\n        code == cc.macro.KEY.up ? code = cc.macro.KEY.w : null;\r\n        code == cc.macro.KEY.down ? code = cc.macro.KEY.s : null;\r\n        code == cc.macro.KEY.left ? code = cc.macro.KEY.a : null;\r\n        code == cc.macro.KEY.right ? code = cc.macro.KEY.d : null;\r\n        this.keys[code] = 0;\r\n        // fire\r\n        if (code == cc.macro.KEY.space) {\r\n            if(!Game.USE_DYNAMIC_BOMB)\r\n            {\r\n                Game.pressed_btnfire = false;\r\n            }\r\n            this.setInput({ fire: 1 , fire_dir: Game.instance.localPlayer.direction, fire_range: Game.dynamic_range});\r\n        } else if ( code == cc.macro.KEY.shift ) {\r\n            this.setInput({ fire: 2 , fire_dir: Game.instance.localPlayer.direction, fire_range: 100});\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    onKeyDown(event: cc.Event.EventKeyboard) {\r\n        let code = event.keyCode;\r\n        code == cc.macro.KEY.up ? code = cc.macro.KEY.w : null;\r\n        code == cc.macro.KEY.down ? code = cc.macro.KEY.s : null;\r\n        code == cc.macro.KEY.left ? code = cc.macro.KEY.a : null;\r\n        code == cc.macro.KEY.right ? code = cc.macro.KEY.d : null;\r\n        if(!Game.USE_DYNAMIC_BOMB && code == cc.macro.KEY.space) \r\n        {\r\n            Game.pressed_btnfire = true;\r\n        }\r\n        this.keys[code] = 1;\r\n    }\r\n\r\n    updateMove() {\r\n        // check move\r\n        let angle = this.getMoveDirection();\r\n\r\n        if (angle > -1) {\r\n            this.preAngle = angle;\r\n            this.setInput({ direction: angle });\r\n            //@ update dpad\r\n            if (this.dpad.active) {\r\n                let rad = angle * Math.PI / 180;\r\n                let x = Math.round(Math.cos(rad) * 100);\r\n                let y = Math.round(Math.sin(rad) * 100);\r\n                this.dpad.getChildByName(\"indicator\").setPosition(x, y);\r\n            }\r\n        } else if (this.preAngle != -1) {        // stop\r\n            this.setInput({ direction: -1 });\r\n            this.preAngle = -1;\r\n            if (this.dpad.active) {\r\n                this.dpad.getChildByName(\"indicator\").setPosition(cc.Vec2.ZERO);\r\n            }\r\n        }\r\n    }\r\n\r\n    getMoveDirection(): number {\r\n        let moveDirection = -1;\r\n        if (this.keys[cc.macro.KEY.w]) {\r\n            if (this.keys[cc.macro.KEY.a]) moveDirection = 135;\r\n            else if (this.keys[cc.macro.KEY.d]) moveDirection = 45;\r\n            else moveDirection = 90;\r\n        } else if (this.keys[cc.macro.KEY.d]) {\r\n            if (this.keys[cc.macro.KEY.w]) moveDirection = 45;\r\n            else if (this.keys[cc.macro.KEY.s]) moveDirection = 360 - 45;\r\n            else moveDirection = 0;\r\n        } else if (this.keys[cc.macro.KEY.s]) {\r\n            if (this.keys[cc.macro.KEY.d]) moveDirection = 360 - 45;\r\n            else if (this.keys[cc.macro.KEY.a]) moveDirection = 360 - 135;\r\n            else moveDirection = 360 - 90;\r\n        } else if (this.keys[cc.macro.KEY.a]) {\r\n            if (this.keys[cc.macro.KEY.w]) moveDirection = 135;\r\n            else if (this.keys[cc.macro.KEY.s]) moveDirection = 360 - 135;\r\n            else moveDirection = 180;\r\n        }\r\n        return moveDirection;\r\n    }\r\n\r\n}","import Game from \"./game\"\r\nimport CameraControl from \"./camera-control\";\r\nimport PlayerRef, { ControlType } from \"../player-ref\";\r\n\r\nimport Input, { InputData } from \"./input\";\r\nimport { Utils } from \"../utils\";\r\nimport Tutorial, { TUTORIAL_STATE, TUTORIAL_SUB_STATE } from \"./tutorial\";\r\nimport { PlayerAction } from \"./player\";\r\n\r\nconst { ccclass, property, requireComponent } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TouchInput extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    touchZone: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    dpad: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    buttonFire: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    buttonSkill: cc.Node = null;\r\n\r\n    private angle = -1;\r\n    private startPos: cc.Vec2 = null;\r\n    private defaultDpadPos: cc.Vec2 = null;\r\n\r\n    private fireCenterPos: cc.Vec2 = null;\r\n    private fireInfo: {fire: number, fire_dir: number, fire_range: number} = null;\r\n    \r\n    private buttonZIndex = 0;\r\n    \r\n\r\n    start() {\r\n        if (PlayerRef.current.control == ControlType.DPad) {\r\n            this.dpad.active = true;\r\n            this.defaultDpadPos = this.dpad.position;\r\n            \r\n            //@ align touch zone to left side\r\n            let wg = this.touchZone.getComponent(cc.Widget);\r\n            wg.right = 480;\r\n            wg.updateAlignment();\r\n        }\r\n        \r\n        [this.touchZone, this.buttonFire, this.buttonSkill].forEach(zone => {\r\n            zone.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n            zone.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n            zone.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n            zone.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);    \r\n        })\r\n    }\r\n\r\n    update(dt: number) {\r\n        let info = null;\r\n        // movement\r\n        if(this.startPos) {\r\n            info = Utils.extend(info, {direction: Math.round(this.angle)});\r\n        }\r\n        // target indicator is moving\r\n        if (this.fireCenterPos) {\r\n            info = Utils.extend(info, this.fireInfo);\r\n        }\r\n\r\n        if (Game.isTutorial)\r\n        {\r\n            // cc.log('USE_DYNAMIC_BOMB -- update()');\r\n            if(Game.pressed_btnfire)\r\n            {\r\n                Game.dynamic_range += Game.count;\r\n                if(Game.dynamic_range >= Game.max_range)\r\n                {\r\n                    Game.dynamic_range = Game.max_range;\r\n                }\r\n                Tutorial.instance.updateLocalTarget(0, Game.dynamic_range);  \r\n            }\r\n            else\r\n            {\r\n                Game.dynamic_range = Game.min_range;\r\n                Tutorial.instance.updateLocalTarget(0, 0);             \r\n            }\r\n        }\r\n        else\r\n        {\r\n            // if(Game.USE_DYNAMIC_BOMB && !Game.isTutorial && Game.instance && Game.instance.localPlayer)\r\n            if(!Game.USE_DYNAMIC_BOMB && Game.instance && Game.instance.localPlayer)\r\n            { \r\n                // cc.log('USE_DYNAMIC_BOMB -- update()');\r\n                if(Game.pressed_btnfire)\r\n                {\r\n                    Game.dynamic_range += Game.count;\r\n                    if(Game.dynamic_range >= Game.max_range)\r\n                    {\r\n                        Game.dynamic_range = Game.max_range;\r\n                    }\r\n                    Game.instance.updateLocalTarget(Game.instance.localPlayer.direction, Game.dynamic_range);  \r\n                }\r\n                else\r\n                {\r\n                    Game.dynamic_range = Game.min_range;\r\n                    Game.instance.updateLocalTarget(0, 0);             \r\n                }\r\n            }\r\n        }\r\n\r\n        // already fired -> reset the fire info        \r\n        if (!Game.isTutorial)\r\n        {\r\n            if (Game.instance)\r\n                if (Game.instance.localPlayer)\r\n                    if (this.fireInfo && Game.instance.localPlayer.isFiring) {\r\n                        this.fireInfo = null;\r\n                        info = Utils.extend(info, {fire: 0, fire_dir: -1, fire_range: 0});\r\n                    }\r\n        }\r\n        else\r\n        {\r\n            if (this.fireInfo && Tutorial.instance.TutorialPlayer.isFiring) {\r\n                this.fireInfo = null;\r\n                info = Utils.extend(info, {fire: 0, fire_dir: -1, fire_range: 0});\r\n            }\r\n        }\r\n\r\n        if (Game.isTutorial)\r\n        {\r\n            if (Tutorial.instance)\r\n                if (Tutorial.instance.performAction == 3)\r\n                    return;\r\n                else\r\n                    info && this.setInput(info);\r\n            else\r\n                info && this.setInput(info);\r\n        }\r\n        else\r\n        {   info && this.setInput(info);}\r\n    }\r\n\r\n    setInput(data: InputData) {\r\n        Input.instance.set(data, 1);        // touch weight: 1, keyboard weight: 0\r\n    }\r\n\r\n    //touch event\r\n    onTouchStart(event) {\r\n        if (event.target == this.touchZone) {\r\n            this.startPos = event.getLocation();\r\n            if (Game.isTutorial \r\n                && (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_shield || Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill)\r\n                && Tutorial.tutorial_sub_status == TUTORIAL_SUB_STATE.Tutorial_checkdoAction\r\n                && Tutorial.instance.performAction == 2\r\n                )\r\n            {\r\n                Tutorial.instance.performAction = 3;\r\n            }\r\n            if (Game.isTutorial)\r\n                if (Tutorial.instance)\r\n                    if (Tutorial.instance.performAction == 3)\r\n                        return;\r\n\r\n            if (this.dpad.active) {\r\n                if (Game.isTutorial)\r\n                {\r\n                    if (Tutorial.tutorial_status != TUTORIAL_STATE.Tutorial_skill)\r\n                    {\r\n                        let touchPos = this.dpad.parent.convertToNodeSpaceAR(this.startPos);\r\n                        this.dpad.setPosition(touchPos);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    let touchPos = this.dpad.parent.convertToNodeSpaceAR(this.startPos);\r\n                    this.dpad.setPosition(touchPos);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (event.target == this.buttonFire)\r\n        {\r\n            if(!Game.USE_DYNAMIC_BOMB)\r\n            {\r\n                this.buttonFire.getChildByName(\"indicator\").setScale(0.8);\r\n                Game.pressed_btnfire = true;  \r\n            }\r\n            else\r\n            {\r\n                this.buttonZIndex = event.target.zIndex;\r\n                event.target.zIndex = cc.macro.MAX_ZINDEX;\r\n                let center = event.target.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n                this.fireCenterPos = center;\r\n            }\r\n        }\r\n        else if (event.target == this.buttonSkill)\r\n        {\r\n            this.buttonZIndex = event.target.zIndex;\r\n            event.target.zIndex = cc.macro.MAX_ZINDEX;\r\n            let center = event.target.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n            this.fireCenterPos = center;\r\n        }\r\n    }\r\n\r\n    onTouchMove(event) {\r\n        if (event.target == this.touchZone) {\r\n            if (this.startPos) {\r\n                let dx, dy;\r\n                if (this.dpad.active) {\r\n                    dy = event.getLocationY() - this.startPos.y;\r\n                    dx = event.getLocationX() - this.startPos.x;\r\n                } else if (this.touchZone.active) {\r\n                    let touchPos = CameraControl.instance.camera.getScreenToWorldPoint(event.getLocation(), null);\r\n                    if (!Game.isTutorial)\r\n                    {\r\n                        dy = touchPos.y - Game.instance.localPlayer.node.position.y;\r\n                        dx = touchPos.x - Game.instance.localPlayer.node.position.x;\r\n                    }\r\n                    else\r\n                    {\r\n                        dy = touchPos.y - Tutorial.instance.TutorialPlayer.node.position.y;\r\n                        dx = touchPos.x - Tutorial.instance.TutorialPlayer.node.position.x;\r\n                    }\r\n                }\r\n                this.angle = Math.atan2(dy, dx);\r\n\r\n                //@ update dpad position  \r\n                if (this.dpad.active) {\r\n                    if (dx*dx + dy*dy > 100*100) {\r\n                        dx = Math.round(Math.cos(this.angle) * 100);\r\n                        dy = Math.round(Math.sin(this.angle) * 100);\r\n                    }\r\n\r\n                    if (Game.isTutorial)\r\n                        if (Tutorial.instance)\r\n                            if (Tutorial.instance.performAction == 3)\r\n                                return;\r\n\r\n                    this.dpad.getChildByName(\"indicator\").setPosition(dx, dy);\r\n                }\r\n\r\n                //@ convert to degree\r\n                this.angle *= 180 / Math.PI;\r\n                if (this.angle < 0) this.angle += 360;            \r\n            }\r\n        }\r\n\r\n        // Nhan note: for active skill(old version)\r\n        //if (event.target == this.buttonFire || event.target == this.buttonSkill) {\r\n        if (event.target == this.buttonFire && Game.USE_DYNAMIC_BOMB) {\r\n            let dx = event.getLocationX() - this.fireCenterPos.x;\r\n            let dy = event.getLocationY() - this.fireCenterPos.y;\r\n            let angle = Math.atan2(dy, dx);\r\n            let range = Math.sqrt(dx*dx + dy*dy);\r\n\r\n            if ( range > 100 ) {\r\n                range = 100;\r\n                dx = Math.round(Math.cos(angle) * 100);\r\n                dy = Math.round(Math.sin(angle) * 100);\r\n            }\r\n            event.target.getChildByName(\"indicator\").setPosition(dx, dy);\r\n            \r\n            angle *= 180 / Math.PI;\r\n            if (angle < 0) angle += 360;   \r\n\r\n            this.fireInfo = Utils.extend(this.fireInfo, {fire_dir: angle, fire_range: Math.round(range)});\r\n        }\r\n    }\r\n\r\n    onTouchEnd(event) {   \r\n        if (event.target == this.touchZone) {\r\n            if (this.dpad.active) {\r\n                this.dpad.getChildByName(\"indicator\").setPosition(cc.Vec2.ZERO);\r\n\t\t    if (this.defaultDpadPos)\r\n                this.dpad.setPosition(this.defaultDpadPos);\r\n            }\r\n            if (this.startPos != null) {\r\n                this.startPos = null;\r\n                this.setInput({direction: -1});\r\n            }\r\n            if (Game.isTutorial \r\n                && (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_shield || Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill)\r\n                && Tutorial.tutorial_sub_status == TUTORIAL_SUB_STATE.Tutorial_checkdoAction\r\n                && Tutorial.instance.performAction == 3\r\n                )\r\n            {\r\n                Tutorial.instance.performAction = 4;\r\n            }\r\n        }\r\n\r\n        if (event.target == this.buttonFire)\r\n        {\r\n            if(!Game.USE_DYNAMIC_BOMB)\r\n            {\r\n                this.buttonFire.getChildByName(\"indicator\").setScale(1);                 \r\n                if (Game.isTutorial)\r\n                {\r\n                    this.setInput({fire: 1, fire_dir: 0, fire_range: Game.dynamic_range});     \r\n                }\r\n                else\r\n                {\r\n                    this.setInput({fire: 1, fire_dir: Game.instance.localPlayer.direction, fire_range: Game.dynamic_range});     \r\n                }               \r\n                Game.pressed_btnfire = false;  \r\n            }\r\n            else\r\n            {\r\n                this.fireInfo = Utils.extend(this.fireInfo, {fire: event.target == this.buttonFire ? 1 : 2});\r\n                this.setInput(this.fireInfo);\r\n                event.target.getChildByName(\"indicator\").setPosition(cc.Vec2.ZERO);\r\n                event.target.zIndex = this.buttonZIndex;\r\n                this.fireCenterPos = null;\r\n            }\r\n        }\r\n        else if (event.target == this.buttonSkill)\r\n        {\r\n            this.fireInfo = Utils.extend(this.fireInfo, {fire: event.target == this.buttonFire ? 1 : 2});\r\n            this.setInput(this.fireInfo);\r\n            event.target.getChildByName(\"indicator\").setPosition(cc.Vec2.ZERO);\r\n            event.target.zIndex = this.buttonZIndex;\r\n            this.fireCenterPos = null;\r\n        }\r\n    }\r\n\r\n  \r\n\r\n    onButtonFire(event, customEventData) {        \r\n        if (+customEventData == 2) { // skill\r\n            event.target.getComponent(cc.Button).interactable = false;\r\n        }\r\n\r\n        if (Game.isTutorial)\r\n            this.setInput({fire: customEventData, fire_dir: Tutorial.instance.TutorialPlayer.direction, fire_range: 100});\r\n        else\r\n            this.setInput({fire: customEventData, fire_dir: Game.instance.localPlayer.direction, fire_range: 100});\r\n    }\r\n}\r\n","import { Utils } from \"../utils\";\r\n\r\nexport interface InputData {\r\n    direction?: number;\r\n    fire?: number; //0: idle, 1: normal attack, 2: special attack\r\n    fire_dir?: number;\r\n    fire_range?: number;\r\n}\r\n\r\nexport default class Input {\r\n    private static _instance: Input = null;\r\n    public static get instance(): Input {\r\n        if (Input._instance == null) {\r\n            Input._instance = new Input();\r\n        }\r\n        return Input._instance;\r\n    }\r\n\r\n    private inputSources: { [key: number]: InputData } = {};\r\n\r\n    set(data: InputData, weight: number) {\r\n        if (this.inputSources[weight]) data = Utils.extend(this.inputSources[weight], data);\r\n        this.inputSources[weight] = data;\r\n    }\r\n\r\n    clear() {\r\n        this.inputSources = {};\r\n    }\r\n\r\n    getData(): InputData {\r\n        let data = null;\r\n        for (let weight in this.inputSources) {\r\n            data = Utils.extend(data, this.inputSources[weight]);\r\n        }\r\n        this.inputSources = {};\r\n        return data;\r\n    }\r\n}","import { LbInfo } from \"../multiplayer/shared/IMessageData\";\r\nimport Game from \"../game\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Leaderboard extends cc.Component {\r\n\r\n    @property(cc.Prefab)\r\n    entryPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Node)\r\n    content: cc.Node = null;\r\n\r\n    @property({ type: [cc.SpriteFrame] })\r\n    ranks: cc.SpriteFrame[] = [];\r\n\r\n    start() {\r\n    }\r\n\r\n    setData(data: LbInfo[]) {\r\n        let i = 0;\r\n        //console.log(\"setData: length: \" + data.length); \r\n        data.forEach((item, idx) => {\r\n            let rank = idx + 1;\r\n            let entry = this.content.children[i++];\r\n            if (!entry) {\r\n                entry = cc.instantiate(this.entryPrefab);\r\n                entry.getChildByName(\"rank-icon\").addComponent(cc.Sprite);\r\n                this.content.addChild(entry);\r\n            }\r\n            if (rank <= 3) {\r\n                entry.getChildByName(\"rank-icon\").active=true;\r\n                entry.getChildByName(\"rank-icon\").getComponent(cc.Sprite).spriteFrame = this.ranks[rank - 1];                \r\n                entry.getChildByName(\"rank\").active = false;\r\n            } else {\r\n                entry.getChildByName(\"rank-icon\").active=false;\r\n                entry.getChildByName(\"rank\").active = true;\r\n                entry.getChildByName(\"rank\").getComponent(cc.Label).string = \"\" + rank + \".\";\r\n            }\r\n            entry.getChildByName(\"score\").getComponent(cc.Label).string = \"\" + item.score;\r\n\r\n            let name = entry.getChildByName(\"name\");\r\n            Game.instance.localPlayer.id == item.id ? name.color = cc.Color.GREEN : name.color = cc.Color.WHITE;\r\n            name.getComponent(cc.Label).string = \"\" + item.name;\r\n        });\r\n\r\n        while (i < this.content.childrenCount) {\r\n            let entry = this.content.children[i++];\r\n            entry.removeFromParent();\r\n        }\r\n    }\r\n}","import EventManager from \"../../core/event-manager\";\r\nimport Player from \"../player\";\r\nimport SoundManager from \"../../core/sound-manager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class LevelExpControl extends cc.Component {\r\n    @property(cc.Label)\r\n    text: cc.Label = null;\r\n\r\n    private expBar: cc.ProgressBar = null;\r\n\r\n    start() {\r\n        this.expBar = this.getComponent(cc.ProgressBar);\r\n        EventManager.instance.register(Player.EVENT_LOCAL_PLAYER_EXP_CHANGE, this.onExpUpdate, this);\r\n    }\r\n\r\n    onExpUpdate(level: number, exp: number) {\r\n        let levelExp = Player.getLevelExp(level);\r\n        this.expBar.progress = exp / levelExp;\r\n        this.text.string = \"Lvl: \" + level + \" / Exp: \" + exp;\r\n    }\r\n\r\n    onDestroy() {\r\n        EventManager.instance.unregisterTarget(this);\r\n    }\r\n\r\n}","import TransportMessage from \"./transport-message\";\r\nimport PlayerRef from \"../player-ref\";\r\nimport EventManager from \"./event-manager\";\r\nimport SoundManager from \"./sound-manager\";\r\nimport Localization from \"./localization\";\r\nimport Cacher from \"../game/resources-cacher\";\r\n\r\n// this will load loader.scene to init all our needed for game\r\n// this script need attach to each scene 1 time (in canvas obj)\r\n// we can also attach more manager to 'loader' scene then listen to it init complete\r\n\r\nconst {ccclass, property, executionOrder} = cc._decorator;\r\n\r\n@ccclass\r\n@executionOrder(-100)\r\nexport default class Loader extends cc.Component {\r\n\r\n    public static loaded: boolean = false;\r\n\r\n    private nextScene = \"main-menu\";\r\n\r\n    @property\r\n    targetLoad: string = \"\";\r\n\r\n    onLoad() {\r\n        // check if loader is load before\r\n        if(Loader.loaded == false) {            \r\n            if(this.getCurrentSceneName() != 'loader') {\r\n                let nextScene = this.targetLoad != \"\" ? this.targetLoad : this.getCurrentSceneName();\r\n                TransportMessage.instance.send('loader', 'nextScene', nextScene);\r\n                cc.director.loadScene('loader');\r\n            } else {\r\n                Loader.loaded = true;\r\n                let next = TransportMessage.instance.get('loader', 'nextScene');\r\n                this.nextScene = next != null ? next : this.nextScene;\r\n            }\r\n        }\r\n    }\r\n\r\n    start() {\r\n        if(this.getCurrentSceneName() == 'loader') {\r\n            this.initLoader();\r\n        }\r\n    }\r\n\r\n    // lib need to load before game\r\n    private _loadInstances = {\r\n        \"PlayerRef\": false,\r\n        \"Sound\": false,\r\n        \"Character\": false,\r\n    }\r\n    private initLoader() {\r\n        \r\n        // listen on manager init done\r\n        EventManager.instance.registerOnce('PlayerRef-init', ()=>{\r\n            this._loadInstances[\"PlayerRef\"] = true;\r\n        }, this)\r\n        EventManager.instance.registerOnce('Sound_initialized', ()=>{\r\n            this._loadInstances[\"Sound\"] = true;\r\n        }, this)\r\n        EventManager.instance.registerOnce('Resources-Cached', () => {\r\n            this._loadInstances[\"Character\"] = true;\r\n        })\r\n        // init other manager\r\n        PlayerRef.current; \r\n        Cacher.instance.load();\r\n        SoundManager.instance.init();\r\n        if (Localization.getCurrentLanguage() == null) {\r\n            Localization.setLanguage(cc.sys.language);\r\n        }\r\n    }\r\n\r\n    private _loadGame = false;\r\n    update(dt) {\r\n    // goNext() {\r\n        if(PlayerRef.current.initialized) this._loadInstances[\"PlayerRef\"] = true;\r\n        \r\n        let allLoaded = true;\r\n        for(let inst in this._loadInstances) {\r\n            if(this._loadInstances[inst] == false) {\r\n                allLoaded = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(allLoaded && !this._loadGame) {\r\n            // start next scene when all complete\r\n            this._loadGame = true;\r\n            cc.director.loadScene(this.nextScene);\r\n        }\r\n    }\r\n\r\n    private getCurrentSceneName(): string {\r\n        let scene: string = \"\";\r\n        (cc.game as any)._sceneInfos.forEach(element => {\r\n            if(element.uuid == (cc.director as any)._scene._id) {\r\n                scene = element.url;\r\n                scene = scene.substring(scene.lastIndexOf('/')+1).match(/[^\\.]+/)[0]\r\n            }\r\n        });\r\n\r\n        return scene;\r\n    }\r\n}","// helper class to local text\r\n\r\nlet i18n = require('i18n');\r\nexport default class Localization {\r\n\r\n    /**\r\n     * Get translate text for key\r\n     * @param key text key\r\n     */\r\n    static get(key: string): string {\r\n        let text = i18n.t(key);\r\n        if(text == \"\") text = \"N/A\";\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Set game language to new lang\r\n     * It also set the save lang to new lang if valid\r\n     * @param lang \r\n     */\r\n    static setLanguage(lang: string) {\r\n        if(i18n.init(lang)) {\r\n            // reload localize item on screen\r\n            let rootNodes = cc.director.getScene().children;\r\n            // walk all nodes with localize label and update\r\n            let allLocalizedLabels = [];\r\n            for (let i = 0; i < rootNodes.length; ++i) {\r\n                let labels = rootNodes[i].getComponentsInChildren('LabelLocalized');\r\n                Array.prototype.push.apply(allLocalizedLabels, labels);\r\n            }\r\n            for (let i = 0; i < allLocalizedLabels.length; ++i) {\r\n                let label = allLocalizedLabels[i];\r\n                label.updateLabel();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the current save language\r\n     */\r\n    static getCurrentLanguage() {\r\n        return i18n.getSaveLang();\r\n    }\r\n}","import Popup from \"../../core/popup\";\r\nimport PlayerRef, { ControlType, DesignType } from \"../../player-ref\";\r\nimport Cacher from \"../resources-cacher\";\r\nimport Game from \"../game\";\r\nimport SoundManager from \"../../core/sound-manager\";\r\nimport firebaseAppInst from \"../firebaseAppInst\"\r\nimport { Utils } from \"../../utils\";\r\nimport ServerConnectionRequest from \"../online/ServerConnectionRequest\";//hoang.tuduc - impl server info\r\nimport ServerDisconnectionRequest from \"../online/ServerDisconnectionRequest\";//hoang.tuduc - impl server info\r\nimport ServerInfoRequest from \"../online/ServerInfoRequest\";//hoang.tuduc - impl server info\r\nimport PingRequest from \"../online/PingRequest\";\r\nimport { ServerInfo } from \"../multiplayer/shared/IMessageData\";//hoang.tuduc - impl server info\r\nimport { ServerDesc } from \"../multiplayer/client\";//hoang.tuduc - impl server info\r\n\r\n\r\ndeclare var myLudiSDK:any;\r\n\r\nexport enum Tabs {\r\n    None = -1,\r\n    Bomb = 0,\r\n    Character,\r\n    Map,\r\n    Skill,\r\n    Control,\r\n    Servers\r\n}\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MainMenu extends cc.Component {\r\n    @property({type: cc.SpriteFrame})\r\n    controlFrames: cc.SpriteFrame[] = [];\r\n\r\n    @property({type: cc.SpriteFrame})\r\n    tabFrames: cc.SpriteFrame[] = [];\r\n\r\n    @property({type: cc.SpriteFrame})\r\n    contentFrames: cc.SpriteFrame[] = []\r\n\r\n    @property(cc.Node)\r\n    popupProfile: cc.Node = null;\r\n\r\n    @property(cc.JsonAsset)\r\n    badWords: cc.JsonAsset = null;\r\n\r\n    @property(cc.EditBox)\r\n    nameBox: cc.EditBox = null;\r\n    @property(cc.Node)\r\n    popupAbout: cc.Node = null;\r\n\r\n    private item: number;\r\n    private tab: Tabs = Tabs.None;\r\n    \r\n    private mainChar: cc.Animation = null;\r\n    private mainSkill: cc.Sprite = null;\r\n    private mainGreeting: cc.Label = null;\r\n    \r\n    private popup: cc.Node = null;\r\n    private gotoAP: boolean;\r\n\r\n    private mc_anim = [\"rabbit\", \"penguin\", \"leaf\"];\r\n    private popup_title = [\"BOMB COLOR\", \"YOUR CHARACTER\", \"MAP\",\"\", \"SETTING\", \"SELECT SERVER\"];\r\n\r\n        // Ori\r\n        // { name: \"SERVER 1\", host: \"wss.ludigames.com\", port: 3001, secure: true },\r\n        // { name: \"SERVER 2\", host: \"jellimon-be.ludigames.com\", port: 3001, secure: true },\r\n\r\n        //Good\r\n        // { name: \"SERVER 1\", host: \"gameserver-sin.ludigames.com\", port: 3001, secure: true },\r\n        // { name: \"SERVER 2\", host: \"jellimon-be.ludigames.com\", port: 3001, secure: true },\r\n\r\n        //Test\r\n        // { name: \"SERVER 1\", host: \"gameserver-sin.ludigames.com\", port: 3001, secure: true },\r\n        // { name: \"SERVER 2\", host: \"gameserver-sin.ludigames.com\", port: 8000, secure: false },\r\n        // { name: \"SERVER PC\", host: \"192.168.1.8\", port: 8000, secure: false }, // Khanh.LHB\r\n        // { name: \"SERVER NAT\", host: \"113.173.97.155\", port: 8000, secure: false }, // Khanh.LHB\r\n        // 3.1.133.90:3001\r\n\r\n\r\n    public static servers = [\r\n        { name: \"SERVER 1\", host: \"gameserver-sin.ludigames.com\", port: 3001, secure: true },\r\n        { name: \"SERVER 2\", host: \"jellimon-be.ludigames.comasdasd\", port: 3001, secure: true },\r\n    ];\r\n\r\n    private pingColors = [cc.Color.GREEN, cc.Color.YELLOW, cc.Color.RED];\r\n\r\n    private posAboutStart = -120;\r\n    private posAboutEnd = 3700;\r\n    private speed_pos = 70;\r\n\r\n    private VERSION = \"v1.0.5a\";\r\n\r\n    private nameEditing = false;\r\n\r\n    onLoad() {\r\n        this.updateSound();\r\n    }\r\n\r\n    start () {        \r\n        this.popup = this.node.getChildByName(\"selectSkinPopup\");\r\n        \r\n        let container = cc.find(\"/Canvas/main-menu-content\");\r\n        this.mainChar = container.children[1].getComponent(cc.Animation);\r\n        this.mainSkill = container.children[2].children[1].getComponent(cc.Sprite);\r\n        this.mainGreeting = container.children[3].children[1].getComponent(cc.Label);\r\n        this.setupMainContent();\r\n        this.checkTutorial();\r\n        this.gotoAP = false;\r\n        \r\n        Popup.instance && Popup.instance.setTarget(this.node);\r\n\r\n        SoundManager.instance.playMusic(\"m_ih_menu\");\r\n        //firebaseAppInst.instance.initFirebaseApp();\r\n        //firebaseAppInst.instance.initAuth();\r\n\r\n        let content = this.popupProfile.getChildByName(\"content\");\r\n        let OnputNode = content.getChildByName(\"OutputMsg\");\r\n        let OutputMsg = OnputNode.getComponent(cc.Label);\r\n        //firebaseAppInst.instance.setOutputComponent(OutputMsg);\r\n\r\n        //firebaseAppInst.instance.writeGameData();\r\n\r\n        // Nhan note: we add source ludiSDK script in index.html\r\n        // Todo: \r\n\r\n        //myLudiSDK.phpTest = 1;\r\n        //myLudiSDK.consoleLog = 1;\r\n        //myLudiSDK.saveData(\"id=FmNTLYapyjdGY0oISDhfC01euxT2&pk=Jellimon&data=[]&exData='addd'&score=0\", this.showLog);\r\n\r\n        // gtm tracking\r\n        if (window[\"dataLayer\"]) \r\n\t\t{\r\n\t\t\tconsole.log(\"pushing dataLayer...\");\r\n\t\t\twindow[\"dataLayer\"].push({\r\n\t\t\t\t'event': 'ga_event',\r\n\t\t\t\t'ga_category': 'Gamepage',\r\n\t\t\t\t'ga_action': 'Main Menu',\r\n\t\t\t\t'ga_label': window[\"productTitle\"],\r\n\t\t\t\t'ga_noninteraction': true\r\n\t\t\t});\r\n\t\t\tMainMenu.gtm_gameReturn();\r\n\t\t}\r\n        //----------------\r\n    }\r\n\r\n    // gtm tracking\r\n    static gtm_gameReturn() \r\n    {\r\n        console.log(\"gtm_gameReturn()\");\r\n        let currentDayObject = new Date();\r\n        let currentMilis: number = currentDayObject.getTime();\r\n\r\n        let lastPlayInDays: any = Utils.Atob(cc.sys.localStorage.getItem(Utils.Btoa(window[\"productKey\"] + \"gameReturn_lastPlayInDays\"))); \r\n        let currentPlayInDays: any = \"\";\r\n\t\tlet firstDayInDays: any = Utils.Atob(cc.sys.localStorage.getItem(Utils.Btoa(window[\"productKey\"] + \"gameReturn_firstDayInDays\"))); \r\n        \r\n        let firstDayGTM: string = Utils.Atob(cc.sys.localStorage.getItem(Utils.Btoa(window[\"productKey\"] + \"gameReturn_firstDayGTM001\"))); \r\n        let daysGTM: string = \"Dxx\"; \r\n        // default val\r\n        \r\n        if (firstDayGTM == null) // first time user play this game\r\n        {\r\n            firstDayInDays = lastPlayInDays = Math.ceil(currentMilis/(24*60*60*1000));\r\n            firstDayGTM = \"\" + currentDayObject.getFullYear() + Utils.zeropad(currentDayObject.getMonth() + 1, 2) + Utils.zeropad(currentDayObject.getDate(), 2);\r\n            daysGTM = \"D00\";\r\n\r\n            cc.sys.localStorage.setItem(Utils.Btoa(window[\"productKey\"] + \"gameReturn_lastPlayInDays\"), Utils.Btoa(lastPlayInDays)); \r\n            cc.sys.localStorage.setItem(Utils.Btoa(window[\"productKey\"] + \"gameReturn_firstDayGTM001\"), Utils.Btoa(firstDayGTM));   \r\n            cc.sys.localStorage.setItem(Utils.Btoa(window[\"productKey\"] + \"gameReturn_firstDayInDays\"), Utils.Btoa(firstDayInDays));   \r\n            \r\n\t\t\tif(Game.USE_NEW_PORTAL == true)\r\n\t\t\t{\r\n\t\t\t\tlet ga_label = daysGTM + \"-\" + window[\"productTitle\"];\r\n\t\t\t\twindow[\"dataLayer\"].push({\r\n\t\t\t\t\t'event': 'ga_event',\r\n\t\t\t\t\t'ga_category': 'Gamepage',\r\n\t\t\t\t\t'ga_action': 'Return',\r\n\t\t\t\t\t'ga_label': ga_label,\r\n\t\t\t\t\t'ga_noninteraction': true\r\n\t\t\t\t\t//'days': daysGTM\r\n\t\t\t\t});  \r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\twindow[\"dataLayer\"].push({\r\n\t\t\t\t\t'event': 'gameReturn',\r\n\t\t\t\t\t'ga_category': 'Gamepage',\r\n\t\t\t\t\t'ga_action': 'Return',\r\n\t\t\t\t\t'ga_label': window[\"productTitle\"],\r\n\t\t\t\t\t'ga_noninteraction': true\r\n\t\t\t\t\t//'days': daysGTM\r\n\t\t\t\t}); \r\n\t\t\t}                \r\n        } \r\n        else { // from the 2nd time\r\n            currentPlayInDays = Math.ceil(currentMilis/(24*60*60*1000));\r\n            // currentPlayInDays++;\r\n            if (currentPlayInDays > lastPlayInDays) // if >= 1 day\r\n            {\r\n                daysGTM = \"D\" + Utils.zeropad((currentPlayInDays - parseInt(firstDayInDays)), 2);\r\n\r\n                lastPlayInDays = currentPlayInDays;\r\n                cc.sys.localStorage.setItem(Utils.Btoa(window[\"productKey\"] + \"gameReturn_lastPlayInDays\"), Utils.Btoa(lastPlayInDays)); \r\n                if(Game.USE_NEW_PORTAL == true)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet ga_label = daysGTM + \"-\" + window[\"productTitle\"];\r\n\t\t\t\t\twindow[\"dataLayer\"].push({\r\n\t\t\t\t\t\t'event': 'ga_event',\r\n\t\t\t\t\t\t'ga_category': 'Gamepage',\r\n\t\t\t\t\t\t'ga_action': 'Return',\r\n\t\t\t\t\t\t'ga_label': ga_label,\r\n\t\t\t\t\t\t'ga_noninteraction': true\r\n\t\t\t\t\t\t//'days': daysGTM\r\n\t\t\t\t\t});  \r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\twindow[\"dataLayer\"].push({\r\n\t\t\t\t\t\t'event': 'gameReturn',\r\n\t\t\t\t\t\t'ga_category': 'Gamepage',\r\n\t\t\t\t\t\t'ga_action': 'Return',\r\n\t\t\t\t\t\t'ga_label': window[\"productTitle\"],\r\n\t\t\t\t\t\t'ga_noninteraction': true\r\n\t\t\t\t\t\t//'days': daysGTM\r\n\t\t\t\t\t}); \r\n\t\t\t\t}           \r\n            }\r\n        }\r\n    }\r\n    //----------------\r\n\r\n    showLog(err: number, respone: string)\r\n    {\r\n        cc.log(\"ludiSDK error: \", respone);\r\n    }\r\n\r\n    showCustomPopup(name: string, title: string)\r\n    {\r\n        this.popup.active = true;\r\n\r\n        //hoang.tuduc - hide all custom content exclude close button and selected content\r\n        let cs = this.popup.children[1].children;\r\n        cs.forEach(c => { c.active = c.name == \"close\" || c.name == name; });\r\n\r\n        // this.setupPopupContent(tab);\r\n        this.selectSkinPopup_setTitle(title);\r\n    }\r\n\r\n    selectSkinPopup_setTitle(title: string)\r\n    {\r\n        let l = this.popup.children[2].children[0].getComponent(cc.Label);\r\n        l.string = title;\r\n    }\r\n\r\n    activePopup(active = true, customize = true) {\r\n        let content = this.popup.children[1].children;\r\n        content[0].active = active && customize;\r\n        content[1].active = active && customize;\r\n        content[2].active = active && !customize;\r\n        content[3].active = active && !customize;\r\n        content[4].active = false;//hoang.tuduc - hide etension content\r\n        this.popup.active = active;\r\n    }   \r\n\r\n    // Nhan add \r\n    checkTutorial()\r\n    {\r\n        let tmp: number = +PlayerRef.current.user;\r\n        switch (tmp)\r\n        {\r\n            case 0://DesignType.Fire:\r\n                    Game.isTutorial = (PlayerRef.current.isRabitTutorial == 1);\r\n                break;\r\n            case 1://DesignType.Grass:\r\n                // if (PlayerRef.current.isPenguinTutorial == 0)\r\n                //     Game.isTutorial = false;\r\n                // else\r\n                //     Game.isTutorial = true;\r\n                Game.isTutorial = (PlayerRef.current.isPenguinTutorial == 1);\r\n                \r\n                break;\r\n            case 2://DesignType.Ice:\r\n                    Game.isTutorial = (PlayerRef.current.isLeafTutorial == 1);\r\n                break;\r\n            default:\r\n                //cc.log (\"Nhan --> default\");\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    onButtonPlay() {\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");//console.log(\"MainMenu - onButtonPlay\");\r\n        // this.goToBattle();\r\n        var server = MainMenu.servers[PlayerRef.current.last_server_selection];\r\n        if(server == null)\r\n        {\r\n            this.showServerSelectionPopup();\r\n            return;\r\n        }\r\n        \r\n        //hoang.tuduc - class game will self handle\r\n        // if(!server) server = MainMenu.servers[0];\r\n        // var serverConnectionRequest = new ServerConnectionRequest(server, () => this.goToBattle(), () => {}, true);\r\n        // serverConnectionRequest.start();\r\n\r\n        this.goToBattle();\r\n    }\r\n    \r\n    onButtonHelp(event, customEventData) {\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        this.node.getChildByName(\"helpPopup\").active = true;\r\n    }\r\n    onButtonClose(event, customEventData) {\r\n        SoundManager.instance.playEffect(\"sfx_ui_back\");\r\n        this.setPlayerRef();\r\n        this.activePopup(false);\r\n        this.node.getChildByName(\"infoPopup\").active = false;\r\n        this.tab = Tabs.None;\r\n    }\r\n    onEditting() {\r\n        if (!this.nameEditing) return;\r\n        this.nameBox.string = this.nameBox.string.trim();\r\n    }\r\n\r\n    onEditedName(editBox: cc.EditBox) {\r\n        if (!this.nameEditing) return;\r\n        this.nameEditing = false; //@ done editing\r\n\r\n        cc.log('onEditedName()')\r\n        let badName = false;\r\n        let lower = editBox.string.toLowerCase();\r\n        if(editBox.string.length == 0 || lower.indexOf(' ') != -1) { // * Bug Fixed ['10588809']: '[HTML5][Settings] : User can use blank player name.\r\n            badName = true;\r\n        } else for (let lang in this.badWords.json) {\r\n            if (this.badWords.json[lang]['blacklisted'].indexOf(lower) >= 0) {\r\n                badName = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (badName) {\r\n            Popup.instance.showInfoPopup(\r\n                \"Empty or Invalid character's name.\\nPlease be polite in naming!\", \r\n                () => {\r\n                    editBox.string = editBox.placeholder = PlayerRef.current.name;\r\n                    // editBox.setFocus(); // fix bug: Close the popup when user name is empty, the old name will be exit on Main Menu\r\n                    this.nameEditing = true;\r\n                }\r\n            );\r\n        } else {\r\n            PlayerRef.current.name = editBox.string;\r\n            this.mainGreeting.string = \"Welcome \" + editBox.string +\"!\";\r\n            let items = cc.find(\"/board/content-control/character-name\", this.popup).children;\r\n            items[2].active = false; \r\n            items[0].children[0].getComponent(cc.Label).string = editBox.string;\r\n            items[0].children[0].active = true;\r\n            // items[1].active = true;\r\n        }\r\n    }\r\n\r\n    onButtonGreeting() {\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        this.showGreetingPopup();\r\n    }\r\n\r\n    onButtonControl() {\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        this.activePopup(true, false)\r\n        this.setupPopupContent(Tabs.Control);\r\n    }\r\n\r\n    onButtonAbout() {\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        this.node.getChildByName(\"infoPopup\").active = true;\r\n\r\n        let pos_page = (this.popupAbout.getChildByName(\"Mask_page\")).getChildByName(\"pageAll\");\r\n        // set version\r\n        pos_page.getChildByName(\"version\").getComponent(cc.Label).string = this.VERSION;    \r\n\r\n        pos_page.y = this.posAboutStart;\r\n        pos_page.setPosition(pos_page.x, pos_page.y);        \r\n    }\r\n\r\n    update(dt: number) {\r\n        if(this.popup.active)\r\n        {\r\n            // set position for button Close\r\n            let board = this.popup.getChildByName(\"board\");\r\n            let btn_close = board.getChildByName(\"close\");\r\n            btn_close.setPosition(board.getPosition().x + board.width/2 - 60, board.getPosition().y + board.height/2 - 40);   \r\n        }\r\n        if(this.node.getChildByName(\"infoPopup\").active)\r\n        {\r\n            // set position for button Close\r\n            let board = this.popupAbout.getChildByName(\"board\");\r\n            let btn_close = board.getChildByName(\"close\");\r\n            btn_close.setPosition(board.getPosition().x + board.width/2 - 60, board.getPosition().y + board.height/2 - 40);   \r\n\r\n            let pos_page = (this.popupAbout.getChildByName(\"Mask_page\")).getChildByName(\"pageAll\");\r\n            pos_page.y += (this.speed_pos * dt); \r\n            if(pos_page.y >= this.posAboutEnd)\r\n            {\r\n                pos_page.y = this.posAboutStart;\r\n            }\r\n            pos_page.setPosition(pos_page.x, pos_page.y);\r\n        }\r\n    }\r\n\r\n    onButtonSound() {        \r\n        if(SoundManager.instance.soundEnable)\r\n        {\r\n            SoundManager.instance.setEnable(false);\r\n        }\r\n        else\r\n        {            \r\n            SoundManager.instance.setEnable(true);\r\n            SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        }\r\n        this.updateSound();\r\n    }\r\n\r\n    updateSound() {\r\n        let btn_sound = this.node.getChildByName(\"buttonSound\");\r\n        let btn_soundOff = this.node.getChildByName(\"buttonSound-off\");\r\n        if(SoundManager.instance.soundEnable)\r\n        {\r\n            btn_sound.active = true;\r\n            btn_soundOff.active = false;\r\n            SoundManager.instance.resumeAll();\r\n        }\r\n        else\r\n        {\r\n            btn_sound.active = false;\r\n            btn_soundOff.active = true;\r\n            SoundManager.instance.pauseAll();\r\n        }       \r\n    }\r\n\r\n    onButtonSkin(){\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        this.activePopup();\r\n        this.setupPopupContent(Tabs.Character);\r\n    }\r\n\r\n    onButtonChangeName() {\r\n        cc.log('onButtonChangeName()')\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        let items = cc.find(\"/board/content-control/character-name\", this.popup).children;\r\n        items[0].children[0].active = false; \r\n        items[1].active = false;\r\n        this.nameBox.placeholder = this.nameBox.string = PlayerRef.current.name;\r\n        this.nameBox.node.active = true;\r\n        this.nameBox.focus();\r\n        this.nameEditing = true;\r\n    }\r\n\r\n    onTabButton(event, customEventData) {\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        if (this.tab != customEventData) {\r\n            this.setPlayerRef();\r\n            this.setupPopupContent(customEventData, event.target);\r\n        }\r\n    }\r\n\r\n    onArrowButton(event, customEventData) {\r\n        SoundManager.instance.playEffect(\"sfx_ui_next\");\r\n        let total = Math.abs(customEventData);\r\n        if (total > 2) {\r\n            if (customEventData > 0) { // to right\r\n                if (++this.item == total) this.item = 0;\r\n            }\r\n            else if (customEventData < 0) { //to left\r\n                if (--this.item < 0) this.item = (total - 1);\r\n            }\r\n        } else {\r\n            this.item = 1 - this.item;\r\n            let left = this.popup.children[1].children[3].children[0];\r\n            left.active = this.item < 1;\r\n            let right = this.popup.children[1].children[3].children[1];\r\n            right.active = this.item > 0;\r\n        }\r\n        this.setupPopupContent(this.tab);\r\n    }\r\n\r\n    setupMainContent() {\r\n        this.mainChar.play(this.mc_anim[+PlayerRef.current.user]);\r\n        this.mainSkill.spriteFrame = this.contentFrames[+PlayerRef.current.user + Tabs.Skill * 3];\r\n        this.mainGreeting.string = this.mainGreeting.string = \"Welcome, \" + PlayerRef.current.name +\"!\";\r\n    }\r\n\r\n    setPlayerRef() {\r\n        if (this.tab == Tabs.Bomb) {\r\n            PlayerRef.current.bomb = this.item;\r\n        } else if (this.tab == Tabs.Character) {\r\n            PlayerRef.current.user = this.item;\r\n        } else if (this.tab == Tabs.Map) {\r\n            PlayerRef.current.map = this.item;\r\n        } else if (this.tab == Tabs.Control) {\r\n            PlayerRef.current.control = this.item;\r\n        }\r\n        \r\n        this.checkTutorial();\r\n\r\n        this.setupMainContent();\r\n    }\r\n\r\n    getPlayerRef(): number {\r\n        let item: number = -1;\r\n        if (this.tab == Tabs.Bomb) {\r\n            item = PlayerRef.current.bomb;\r\n        } else if (this.tab == Tabs.Character) {\r\n            item = PlayerRef.current.user;\r\n        } else if (this.tab == Tabs.Map) {\r\n            item = PlayerRef.current.map;\r\n        } else if (this.tab == Tabs.Control) {\r\n            item = PlayerRef.current.control;\r\n        }\r\n        \r\n        return item;\r\n    }\r\n\r\n    setupPopupContent(tab: Tabs, target?: cc.Node) {\r\n        if (this.tab < Tabs.Bomb || this.tab != tab) {\r\n            this.tab = tab;\r\n            this.item = this.getPlayerRef();\r\n            let title = this.popup.children[2].children[0].getComponent(cc.Label);\r\n            title.string = this.popup_title[tab];\r\n        }\r\n        if (this.tab < Tabs.Control) {\r\n            let container = cc.find(\"/board/content-skin\", this.popup);\r\n            container.children[3].children.forEach((child, i) => { \r\n                child.getComponent(cc.Sprite).spriteFrame = (i == tab) ? this.tabFrames[i + 3] : this.tabFrames[i];\r\n            })\r\n            //container.children[0].active = !(this.tab == Tabs.Map);\r\n            this.setupSkinContent(container);\r\n        } else if(this.tab < Tabs.Servers) {\r\n            this.setupControlContent();\r\n        } else {\r\n            this.setupServersContent(tab);\r\n        }\r\n    }\r\n\r\n    setupSkinContent(container: cc.Node) {\r\n        let center: number = +this.item;\r\n        let left: number = center > 0 ? center - 1 : 2;\r\n        let right: number = center < 2 ? center + 1 : 0;\r\n\r\n        let chars:cc.Node[] = container.children[1].children;\r\n        chars[0].getComponent(cc.Sprite).spriteFrame = this.contentFrames[left + this.tab * 3];\r\n        chars[1].getComponent(cc.Sprite).spriteFrame = this.contentFrames[right + this.tab * 3];\r\n        chars[2].getComponent(cc.Sprite).spriteFrame = this.contentFrames[center + this.tab * 3];\r\n        \r\n        let skill: cc.Node = container.children[2];\r\n        if (this.tab == Tabs.Character) {\r\n            skill.children[0].getComponent(cc.Sprite).spriteFrame = this.contentFrames[left + Tabs.Skill * 3];\r\n            skill.children[1].getComponent(cc.Sprite).spriteFrame = this.contentFrames[right + Tabs.Skill * 3];\r\n            skill.children[2].getComponent(cc.Sprite).spriteFrame = this.contentFrames[center + Tabs.Skill * 3];\r\n            skill.active = true;\r\n        } else {\r\n            skill.active = false;\r\n        }\r\n    }\r\n\r\n    setupControlContent() {\r\n        let name = cc.find(\"/board/content-control/character-name/name-bg/name\", this.popup);\r\n        name.getComponent(cc.Label).string = PlayerRef.current.name;\r\n\r\n        if(cc.sys.isMobile)\r\n        {\r\n            let desc = cc.find(\"board/content-control/control-type/desc\", this.popup);\r\n            desc.getComponent(cc.Label).string = \"USE D-PAD TO MOVE JELLY\";\r\n        }\r\n\r\n        let type = cc.find(\"board/content-control/control-type/popup-control-type/image-desc\", this.popup);\r\n        type.getComponent(cc.Sprite).spriteFrame = this.controlFrames[this.item];\r\n    \r\n        this.popup.children[1].children[3].children[0].active = !cc.sys.isMobile && this.item < 1;\r\n        this.popup.children[1].children[3].children[1].active = !cc.sys.isMobile && this.item > 0;\r\n    }\r\n\r\n    setupServersContent(tab: Tabs) {\r\n    }\r\n    \r\n    onButtonLogin()\r\n    {\r\n        let content = this.popupProfile.getChildByName(\"content\");\r\n        let emailInput = content.getChildByName(\"EmailInput\");\r\n        let emailnode = emailInput.getChildByName(\"editbox\");\r\n        let emailEDBox = emailnode.getComponent(cc.EditBox);\r\n        //let email = emailEDBox.string;\r\n        //cc.log(\"Nhan --> email: \" + emailEDBox.string);// ok\r\n        \r\n        let passInput = content.getChildByName(\"passInput\");\r\n        let passwordnode = passInput.getChildByName(\"editbox\");\r\n        let passwordEDBox = passwordnode.getComponent(cc.EditBox);\r\n        \r\n        //firebaseAppInst.instance.SignInWithEmailPass(emailEDBox.string, passwordEDBox.string);\r\n    }\r\n\r\n    onButtonRegister()\r\n    {\r\n        let content = this.popupProfile.getChildByName(\"content\");\r\n        let emailInput = content.getChildByName(\"EmailInput\");\r\n        let emailnode = emailInput.getChildByName(\"editbox\");\r\n        let emailEDBox = emailnode.getComponent(cc.EditBox);\r\n        //let email = emailEDBox.string;\r\n        //cc.log(\"Nhan --> email: \" + emailEDBox.string);// ok\r\n        \r\n        let passInput = content.getChildByName(\"passInput\");\r\n        let passwordnode = passInput.getChildByName(\"editbox\");\r\n        let passwordEDBox = passwordnode.getComponent(cc.EditBox);\r\n        \r\n        //firebaseAppInst.instance.RegisterEmailPass(emailEDBox.string, passwordEDBox.string);\r\n    }\r\n\r\n    onServerSelectionButtonPressed()\r\n    {\r\n        this.showServerSelectionPopup();\r\n    }\r\n\r\n    onServerButtonPressed(event, customEventData)\r\n    {\r\n\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        var cs = this.popup.children[1].children[4].children[0].children;//server_table chlidren\r\n        //hoang.tuduc - tick and highlight selection\r\n        for(var i = 0; i < cs.length; i++)\r\n        {\r\n            // console.log(\"main-menu - onServerPressed - customEventData: \" + customEventData + \" - i: \" + i);\r\n            cs[i].children[0].children[1].active = i == customEventData;\r\n            cs[i].children[1].children[1].active = i == customEventData;\r\n        }\r\n        \r\n        // if(PlayerRef.current.last_server_selection == customEventData)  return;//hoang.tuduc - don't reconenct to current server\r\n        \r\n        PlayerRef.current.last_server_selection = customEventData;\r\n        this.onServerSelected(MainMenu.servers[customEventData]);//\"SERVER \" + (parseInt(customEventData) + 1));//hoang.tuduc - template\r\n    }\r\n\r\n    onServerSelected(server: ServerDesc)\r\n    {\r\n        var title = this.popup.children[1].children[4].children[1].children[1].children[0].getComponent(cc.Label);\r\n        console.log(\"MainMenu - onServerSelected - title: \" + (title ? \"not null\" : \"null\") + \" - server: \" + (server ? \"not null\" : \"null\"));\r\n        title.string = server.name;\r\n\r\n        var join = this.popup.children[1].children[4].children[1].children[4].children[0].getComponent(cc.Button);\r\n        join.enabled = false;//hoang.tuduc - player can't join while get server info\r\n\r\n        var enable = (enabled: boolean) =>\r\n        {\r\n            var cs = this.popup.children[1].children[4].children[0].children;//server_table chlidren\r\n            for(var i = 0; i < cs.length; i++)\r\n            {\r\n                cs[i].getComponent(cc.Button).enabled = enabled && i != PlayerRef.current.last_server_selection;//hoang.tuduc - no need enable server which user select\r\n                cs[i].children[1].getChildByName(\"disable\").active = !enabled;\r\n                // var server_select_tick = cs[i].children[0].children[0].getComponent(cc.Button);\r\n                // var server_select_name = cs[i].children[0].children[0].getComponent(cc.Button);\r\n\r\n                // server_select_tick.enabled = false;console.log(\"hoang.tuduc - MainMenu - onServerSelected - \" + server_select_tick.name);\r\n                // server_select_name.enabled = false;\r\n            }\r\n        }\r\n\r\n        enable(false);//hoang.tuduc - user can't change server while wait for server respone\r\n\r\n        this.popup.children[1].children[4].children[1].children[2].getComponent(cc.Label).string = \"\";//hoang.tuduc - waiting server response\r\n        var status = this.popup.children[1].children[4].children[1].children[3];\r\n        status.getComponent(cc.Label).string = \"waiting server response...\";//hoang.tuduc - waiting server response\r\n        status.color = cc.Color.WHITE;\r\n\r\n        var serverConnectionRequest = new ServerConnectionRequest(server, () =>\r\n        {\r\n            console.log(\"MainMenu::onServerSelected - onConnected() - Server: \" + server.name);\r\n            var serverInfoRequest = new ServerInfoRequest((info: ServerInfo) =>//this.onServerInfoChanged);//hoang.tudc - unknow why use funtion this.popup... null\r\n            {\r\n                var player_count_format = \"Players: %d/200\";\r\n                player_count_format = player_count_format.replace(\"%d\", info.player_count.toString());\r\n                var count = this.popup.children[1].children[4].children[1].children[2].getComponent(cc.Label)\r\n                count.string = player_count_format;//info.player_count.toString();\r\n\r\n                join.enabled = true;\r\n                join.node.active = info.player_count < 200;//hoang.tuduc - limit player\r\n                // enable(true);\r\n            });\r\n            var pingRequest = new PingRequest((ping: number) =>\r\n            {\r\n                var ping_format = \"Ping: %d\";\r\n                ping_format = ping_format.replace(\"%d\", ping.toString());\r\n                status.color = this.pingColors[ping < 60 ? 0 : ping < 120 ? 1 : 2];\r\n                status.getComponent(cc.Label).string = ping_format;\r\n                enable(true);\r\n                var serverDisconnectionRequest = new ServerDisconnectionRequest();\r\n                serverDisconnectionRequest.start();//hoang.tuduc - we don't need connection\r\n            })\r\n            serverInfoRequest.start();\r\n            pingRequest.start();\r\n        }, (error) =>\r\n        {\r\n            console.log(\"MainMenu - onServerSelected - connect fail\" + error)\r\n            status.getComponent(cc.Label).string = \"CONNECTION FAILED\";\r\n            status.color = cc.Color.RED;\r\n            enable(true);\r\n        }, true);\r\n        serverConnectionRequest.start();\r\n    }\r\n\r\n    onJoinNowPressed()\r\n    {\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        this.goToBattle();\r\n    }\r\n\r\n    onServerInfoChanged(info: ServerInfo)\r\n    {\r\n        var count = this.popup.children[1].children[4].children[1].children[2].getComponent(cc.Label)\r\n        count.string = info.player_count.toString();\r\n    }\r\n\r\n    showGreetingPopup()\r\n    {\r\n        this.onButtonControl();\r\n        this.onButtonChangeName();\r\n    }\r\n\r\n    showServerSelectionPopup()\r\n    {\r\n        let online = window.navigator.onLine;\r\n        if(!online) {\r\n            this.ShowPopupSomethingWrong();\r\n            return;\r\n        }\r\n        this.showCustomPopup(\"servers_selection_content\", this.popup_title[Tabs.Servers]);//console.log(\"MainMenu - showServerSelectionPopup - \" + PlayerRef.current.last_server_selection);\r\n        var index = PlayerRef.current.first_launch_step == 0 || PlayerRef.current.last_server_selection == null ? 0 : PlayerRef.current.last_server_selection;\r\n        this.onServerButtonPressed(null, index);//hoang.tuduc - server 1 is default\r\n    }\r\n\r\n    goToBattle()\r\n    {      //console.log(\"MainMenu - goToBattle\");  \r\n        // tracking\r\n        if (window[\"dataLayer\"]) \r\n        {\r\n            window[\"dataLayer\"].push({\r\n                'event': 'ga_event',\r\n                'ga_category': 'Gamepage',\r\n                'ga_action': 'Start',\r\n                'ga_label': window[\"productTitle\"],\r\n                'ga_noninteraction': true\r\n            });\r\n        }\r\n        //SoundManager.instance.stopAll();\r\n        SoundManager.instance.playEffect(\"sfx_ui_select\");\r\n        if (!this.gotoAP) {\r\n            this.gotoAP = true;\r\n            \r\n            Popup.instance.showWaitingPopup(\"Loading... \");\r\n            //cc.log(\"Nhan --> call onButtonPlay need checkTutorial\");\r\n            PlayerRef.current;\r\n            this.checkTutorial();\r\n\t\t\tif (Game.isTutorial == true)\r\n\t\t\t{\r\n\t\t\t\tcc.director.preloadScene('tutorial',(err) => {\r\n\t\t\t\t\tcc.director.loadScene('tutorial', () => {\r\n                        SoundManager.instance.stop(\"m_ih_menu\");\r\n\t\t\t\t\t\tPopup.instance.hideWaitingPopup();\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\t\t\t\t\r\n\t\t\t\tcc.director.preloadScene('game',(err) => {\r\n\t\t\t\t\tcc.director.loadScene('game', () => {\r\n                        SoundManager.instance.stop(\"m_ih_menu\");\r\n\t\t\t\t\t\tPopup.instance.hideWaitingPopup();\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n        }\r\n    }\r\n\r\n    ShowPopupSomethingWrong() {\r\n        Popup.instance.showInfoPopup(\r\n            \"Opss, something's wrong...\\nPlease try again later!\", \r\n            () => { \r\n                cc.director.loadScene('main-menu') \r\n            }\r\n        )\r\n        //cc.director.loadScene('main-menu');\r\n    }\r\n}","\r\nimport Game from \"../game\";\r\nimport Player from \"../player\";\r\nimport { LbInfo } from \"../multiplayer/shared/IMessageData\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MiniMap extends cc.Component {\r\n\r\n    @property(cc.Prefab)\r\n    indicatorPrefab: cc.Prefab = null;\r\n\r\n    @property({type: [cc.SpriteFrame]})\r\n    ranks: cc.SpriteFrame[] = [];\r\n\r\n    \r\n\r\n    private ratio: number = 130 / 960; //@ ratio = mini-map radius * 2 / view height\r\n    private radius: number = 55;\r\n    indicators: { [key: string]: cc.Node } = {};\r\n\r\n    start() {\r\n        let ind = cc.instantiate(this.indicatorPrefab);\r\n        ind.color = cc.Color.BLUE;\r\n        ind.setPosition(cc.Vec2.ZERO); //@ local player indicator always at center\r\n        this.node.addChild(ind);\r\n    }\r\n\r\n    updatePlayersPosition(players: { [key: string]: Player }) {\r\n        //@ update player's position on mimi-map\r\n        for (let id in players) {\r\n\r\n            let dx = (players[id].node.position.x - Game.instance.localPlayer.node.position.x) * this.ratio;\r\n            let dy = (players[id].node.position.y - Game.instance.localPlayer.node.position.y) * this.ratio;\r\n            let x = dx, y = dy;\r\n            if(dx * dx + dy * dy > this.radius * this.radius) {\r\n                let rad = Math.atan2(dy, dx);\r\n                x = Math.cos(rad) * this.radius;\r\n                y = Math.sin(rad) * this.radius;\r\n            }\r\n\r\n            if (!this.indicators[id]) {\r\n                let ind = cc.instantiate(this.indicatorPrefab);\r\n                //ind.color = cc.Color.RED;\r\n                this.node.addChild(ind);\r\n                this.indicators[id] = ind;\r\n            }\r\n            this.indicators[id].setPosition(x, y);\r\n        }\r\n    }\r\n\r\n    updatePlayersDisplay(data: LbInfo[]) {\r\n        data.forEach((item, idx) => {\r\n            let rank = idx + 1;\r\n            if (this.indicators[item.id]) {\r\n                if (rank > 3) {\r\n                    this.indicators[item.id].setContentSize(8, 8);\r\n                } else  {\r\n                    //this.indicators[item.id].color = cc.Color.WHITE;\r\n                    this.indicators[item.id].setContentSize(16, 16);\r\n                    this.indicators[item.id].getComponent(cc.Sprite).spriteFrame = this.ranks[rank-1];\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    removeFromMap(leftPlayerId: string[]) {\r\n        leftPlayerId.forEach(id => {\r\n            if(this.indicators[id]) {\r\n                this.indicators[id].removeFromParent();\r\n                delete this.indicators[id];\r\n            }\r\n        })\r\n    }\r\n}\r\n","// use this super class to present server sync object\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NetComponent extends cc.Component {\r\n\r\n    static EVENT_NET_ENTITY_DEATH = \"net_entity_death\";\r\n\r\n    private _cid: number = 0; //@ change to _cid to avoid error 1510：Illegal target which doesn't have uuid or instanceId.\r\n    protected x: number = 0;\r\n    protected y: number = 0;\r\n    protected death: boolean = false;\r\n    private lastStateTime: number = 0;      // last time receive data from server, out of time -> treat object death\r\n    private isDestroying: boolean = false;\r\n\r\n    get id() { return this._cid; }\r\n\r\n    init(data: {id, x, y}) {\r\n        this._cid = data.id;\r\n        this.x = data.x;\r\n        this.y = data.y;\r\n        this.lastStateTime = Date.now();\r\n    }\r\n\r\n    setStateData(data: {x, y}) {\r\n        this.x = data.x || this.x;\r\n        this.y = data.y || this.y;\r\n        this.lastStateTime = Date.now();\r\n    }\r\n\r\n    isDeath() {\r\n        return this.death || (Date.now() - this.lastStateTime > 3000);\r\n    }\r\n\r\n    setDeath(death: boolean) {\r\n        this.death = death;\r\n    }\r\n\r\n    onDeath(timeout?: boolean) {}\r\n\r\n    lateUpdate() {\r\n        if(this.isDeath() && !this.isDestroying) {\r\n            this.isDestroying = true;\r\n            if(this.death) {\r\n                this.onDeath();\r\n            } else {\r\n                this.onDeath(true);\r\n            }\r\n        }\r\n    }\r\n\r\n}","\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n\r\n@ccclass\r\nexport default class Notifier extends cc.Component {\r\n    @property(cc.Prefab)\r\n    notifyItem: cc.Prefab = null;\r\n\r\n    private container: cc.Layout = null;\r\n\r\n    start() {\r\n        this.container = this.getComponent(cc.Layout);\r\n    }\r\n\r\n    addNotify(message: string) {\r\n        let noti = cc.instantiate(this.notifyItem);\r\n        noti.getComponent(cc.RichText).string = message;\r\n        this.node.insertChild(noti, 0);\r\n        noti.runAction(cc.sequence(\r\n            cc.delayTime(3),\r\n            cc.fadeOut(0.5),\r\n            cc.callFunc(() => {\r\n                noti.removeFromParent();\r\n            })\r\n        ))\r\n    }\r\n}","import Player, { PlayerAction, PlayerStatus } from \"./player\";\r\nimport PlayerControl from \"./player-control\";\r\nimport Client from \"./multiplayer/client\";\r\nimport Input, { InputData } from \"./input\";\r\nimport { PlayerInfo, PlayerInput } from \"./multiplayer/shared/IMessageData\";\r\nimport EventManager from \"../core/event-manager\";\r\nimport Game from \"./game\";\r\nimport {ConfigGame} from \"./ConfigGame\";\r\nimport Tutorial, { TUTORIAL_SUB_STATE, TUTORIAL_STATE } from \"./tutorial\";\r\nimport PlayerRef, { DesignType } from \"../player-ref\";\r\nimport CameraControl from \"./camera-control\";\r\nimport SoundManager from \"../core/sound-manager\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PlayerControlLocal extends PlayerControl {\r\n\r\n    private client: Client;\r\n\r\n    private lastInputTime: number = null;\r\n    private lastInputSeq: number = 0;\r\n    private pendingInputs: PlayerInput[] = [];\r\n\r\n    init(client: Client) {\r\n        this.client = client;\r\n        Input.instance.clear();\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        //this.player.directionSprite.node.active = true;     // active indicator direction sprite\r\n        // default data\r\n        EventManager.instance.dispatch(Player.EVENT_LOCAL_PLAYER_EXP_CHANGE, 1, 0);\r\n        if (this.client != null)\r\n        this.player.updateAction(PlayerAction.Idle, 90);\r\n    }\r\n\r\n    setServerData(playerInfo: PlayerInfo) {\r\n        if(this.client != null)\r\n        {\r\n        super.setServerData(playerInfo);\r\n        if (this.player.level != playerInfo.level || this.player.exp != playerInfo.exp) {\r\n            EventManager.instance.dispatch(Player.EVENT_LOCAL_PLAYER_EXP_CHANGE, playerInfo.level, playerInfo.exp);\r\n        }\r\n        }\r\n    }\r\n\r\n    handleDeath(): boolean {\r\n        return true;    // do nothing for local player\r\n    }\r\n\r\n    update(dt: number) {\r\n        // fixing #10591055\r\n        // if (!Game.isTutorial)\r\n        //     if (this.player.isDeath()) return;\r\n\r\n        if (this.client != null)\r\n            this.processServerData();\r\n            \r\n        this.processInput();\r\n    }\r\n\r\n    processServerData() {\r\n        while (this.serverData.length > 0) {\r\n            let data = this.serverData.shift();\r\n            this.player.updatePlayerInfo(data.x, data.y, data.opacity, data.health, data.level, data.exp, data.death, data.vulnerable, data.bombable, data.skillable, data.buffs);\r\n            this.player.cskin = data.cskin;\r\n            this.player.healthBar.updateNotify();\r\n            let lastProcessedInputSeq = data.lastInputSeq;\r\n            this.player.setPosition(data.x, data.y);\r\n            if (this.pendingInputs.length > 0) {\r\n                let i = 0;\r\n                while (i < this.pendingInputs.length) {\r\n                    let input = this.pendingInputs[i];\r\n                    if (input.seq <= lastProcessedInputSeq) {\r\n                        this.pendingInputs.splice(i, 1);\r\n                    } else {\r\n                        this.applyInput(input);\r\n                        i++;\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.player.action != data.action || this.player.direction != data.direction) {\r\n                    this.player.updateAction(data.action, data.direction);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processInput() {\r\n        let now = Date.now();\r\n        let last = this.lastInputTime || now;\r\n        let dt = (now - last);\r\n        this.lastInputTime = now;\r\n\r\n        let inputData = Input.instance.getData();\r\n        if (inputData) {\r\n            let playerInput: PlayerInput = {\r\n                direction: inputData.direction,\r\n                time: dt,\r\n                seq: (this.lastInputSeq++ & 0xffff),\r\n                fire: inputData.fire,\r\n                fire_dir: inputData.fire_dir,\r\n                fire_range: inputData.fire_range\r\n            }\r\n            if (this.validateInput(playerInput)) {\r\n                // send input to server\r\n\t\tif (this.client != null)\r\n\t\t{\r\n                this.client.sendAction(playerInput);\r\n                this.applyInput(playerInput);\r\n                this.pendingInputs.push(playerInput);\r\n\r\n                }\r\n                else\r\n                {\r\n                this.applyInput(playerInput);\r\n                this.pendingInputs.push(playerInput);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    validateInput(input: PlayerInput) {\r\n        if (input.time < 40) return true;\r\n        return false;\r\n    }\r\n\r\n    applyInput(input: PlayerInput) {\r\n        // Nhan rem\r\n        //let playerAction: PlayerAction;\r\n        // Nhan change\r\n        let playerAction: number =  -1;\r\n        let direction: number = this.player.direction;\r\n        let deltaPos: cc.Vec2 = null;\r\n        // move state\r\n        if (input.direction >= 0) {\r\n            playerAction = PlayerAction.Move;\r\n            direction = cc.misc.clampf(input.direction, 0, 360);\r\n\r\n            let dx = 0;\r\n            let dy = 0;\r\n                let angleRad = direction * Math.PI / 180;         // to rads\r\n\r\n\r\n                let playerSpeed;\r\n                if (Game.isTutorial)\r\n                    playerSpeed = ConfigGame.PLAYER_SPEED;\r\n                else\r\n                    playerSpeed = Game.instance.playerSpeed;\r\n\t\t\t\t\r\n                \r\n            dx = Math.cos(angleRad) * playerSpeed * input.time / 1000.0;\r\n            dy = Math.sin(angleRad) * playerSpeed * input.time / 1000.0;\r\n\r\n            deltaPos = cc.v2(Math.round(dx), Math.round(dy));\r\n\r\n        } else if (input.direction < 0) {\r\n            playerAction = PlayerAction.Idle;\r\n        }   // incase NaN -> input not include direction value\r\n\r\n        if (Game.isTutorial)\r\n        {\r\n            // cc.log(\"Nhan --> input.fire_dir = \" + input.fire_dir);\r\n            // cc.log(\"Nhan --> input.fire_range = \" + input.fire_range);\r\n            // if (input != null && input.fire_dir != null && input.fire_range != null)\r\n            !input.fire && Tutorial.instance.updateLocalTarget(input.fire_dir, input.fire_range);\r\n        }\r\n        else\r\n        {\r\n            if(Game.USE_DYNAMIC_BOMB)\r\n                !input.fire && Game.instance.updateLocalTarget(input.fire_dir, input.fire_range);\r\n        }\r\n        // fire state\r\n        if (input.fire) {\r\n            if (this.player.bombable && input.fire == 1) {\r\n                playerAction = PlayerAction.Fire;\r\n                if (Game.isTutorial)\r\n                {\r\n                    //Tutorial.instance.updateBombSkill(2);\r\n                    if (this.player.m_bomb && this.player.m_bomb.collider)\r\n                        this.player.m_bomb.collider.tag = 2;\r\n                }\r\n            } \r\n            else if (this.player.skillable && input.fire == 2) {\r\n                // Nhan note: change active skill (throwing special bomb) to passive skill (speed, shield, invisible)\r\n                // playerAction = PlayerAction.Fire;\r\n                if (this.player.cskin == DesignType.Fire) {\r\n                    //cc.log(\"Nhan --> input.fire --> DesignType.Fire\");\r\n                    let angleRad = direction * Math.PI / 180;\r\n                    let dx = Math.cos(angleRad) * 160;\r\n                    let dy = Math.sin(angleRad) * 160;\r\n                    deltaPos = cc.v2(Math.round(dx), Math.round(dy));\r\n                    if (Game.isTutorial)\r\n                    {\r\n                        this.player.collider.enabled =false;\r\n                        Tutorial.instance.BOTplayer.collider.enabled = false;\r\n                    }\r\n\r\n                } else if (this.player.cskin == DesignType.Ice) {\r\n                    this.player.effectsNode.children[0].active = true;\r\n                } else if (this.player.cskin == DesignType.Grass) {\r\n                    this.player.node.opacity = 100;\r\n                }\r\n\r\n                if (Game.isTutorial)\r\n                {\r\n                    if (this.player.m_bomb && this.player.m_bomb.collider)\r\n                        this.player.m_bomb.collider.tag = 3;\r\n                    if ( Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill\r\n                        && Tutorial.tutorial_sub_status == TUTORIAL_SUB_STATE.Tutorial_checkdoAction\r\n                        && Tutorial.instance.performAction == 1\r\n                        )\r\n                        {\r\n                            Tutorial.instance.performAction = 2;\r\n                        }\r\n                    //Tutorial.instance.TutorialPlayer.updatePlayerInfo(0, 0,255, 70, 1, 0, false, false, true, true, []);\r\n                }\r\n                //this.player.activeEffect(+PlayerRef.current.user + 5);\r\n\r\n            }\r\n        }\r\n\r\n        // apply to local player\r\n        //if (playerAction != null) \r\n\t\t{\r\n            if (this.player.action != playerAction || this.player.direction != direction) {\r\n                this.player.updateAction(playerAction, direction);\r\n            }\r\n            \r\n            // Nhan add\r\n            //if (deltaPos != null && this.player.action == PlayerAction.Move) {\r\n            if (deltaPos != null) {\r\n                if (Game.isTutorial)\r\n                {\r\n                    let pos = this.player.node.position.add(deltaPos);\r\n                    if (pos.x < -460)\r\n                        pos.x= -460;\r\n                    if (pos.x > 460)\r\n                        pos.x= 460;\r\n\r\n                    if (pos.y < -300)\r\n                        pos.y= -300;\r\n                    if (pos.y > 300)\r\n                        pos.y= 300;\r\n\r\n                    this.player.setPosition(pos.x, pos.y);\r\n                }\r\n                else\r\n                {\r\n                    let pos = this.player.node.position.add(deltaPos);\r\n                    if (pos.x - ConfigGame.PLAYER_HALF_W < 0) pos.x = ConfigGame.PLAYER_HALF_W;\r\n                    if (pos.x + ConfigGame.PLAYER_HALF_W > ConfigGame.WORLD_WIDTH) pos.x = ConfigGame.WORLD_WIDTH - ConfigGame.PLAYER_HALF_W;\r\n                    if (pos.y - ConfigGame.PLAYER_HALF_H < 0) pos.y = ConfigGame.PLAYER_HALF_H;\r\n                    if (pos.y + ConfigGame.PLAYER_HALF_H > ConfigGame.WORLD_HEIGHT) pos.y = ConfigGame.WORLD_HEIGHT - ConfigGame.PLAYER_HALF_H;\r\n                    this.player.setPosition(pos.x, pos.y);      // FIXME: node pos or serverpos???\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}","// remote player control class\r\n\r\nimport Player, { PlayerAction } from \"./player\";\r\nimport { PlayerInfo, LbInfo } from \"./multiplayer/shared/IMessageData\";\r\nimport Game from \"./game\";\r\nconst { ccclass, property, requireComponent } = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(Player)\r\nexport default class PlayerControl extends cc.Component {\r\n\r\n    protected player: Player;\r\n    protected serverData: PlayerInfo[] = [];\r\n    private positionBuffer: [cc.Vec2, number][] = [];\r\n\r\n    onLoad() {\r\n        this.player = this.getComponent(Player);\r\n        this.player.controller = this;\r\n    }\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    setServerData(playerInfo: PlayerInfo) {\r\n        if (!Game.isTutorial)\r\n            this.serverData.push(playerInfo);\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (!Game.isTutorial)\r\n        {\r\n            this.processServerData();\r\n            this.processPosition();\r\n        }\r\n        else{\r\n            this.processPosition();\r\n        }\r\n    }\r\n\r\n    processServerData() {\r\n        while (this.serverData.length > 0) {\r\n            let data = this.serverData.shift();\r\n            this.player.setServerData(data);\r\n            this.positionBuffer.push([cc.v2(data.x, data.y), Date.now()]);\r\n        }\r\n    }\r\n\r\n    handleDeath(): boolean {\r\n        return false;\r\n    }\r\n\r\n    private processPosition() {     // interpolate remote player pos\r\n        let renderTime = Date.now() - (1000.0 / 30);    // 30 = server fps\r\n\r\n        while (this.positionBuffer.length >= 2 && this.positionBuffer[1][1] <= renderTime) {\r\n            this.positionBuffer.shift();\r\n        }\r\n\r\n        // Interpolate between the two surrounding authoritative positions.\r\n        if (this.positionBuffer.length >= 2 && this.positionBuffer[0][1] <= renderTime && renderTime <= this.positionBuffer[1][1]) {\r\n            let from: cc.Vec2 = this.positionBuffer[0][0];\r\n            let to: cc.Vec2 = this.positionBuffer[1][0];\r\n            let t0 = this.positionBuffer[0][1];\r\n            let t1 = this.positionBuffer[1][1];\r\n\r\n            let pos = from.lerp(to, (renderTime - t0) / (t1 - t0));\r\n            this.player.setPosition(pos.x, pos.y);\r\n        }\r\n    }\r\n\r\n    updateRank(ranks: LbInfo[], localPlayer: boolean = false) {\r\n        let top = 0;\r\n        for (let i = 0; i < 3 && i < ranks.length; i++) {        // first 3 ranks\r\n            if (this.player.id == ranks[i].id) {\r\n                top = i + 1;\r\n            }\r\n        }\r\n        this.player.setStatus(top, localPlayer);\r\n    }\r\n}","// import FirebaseInst from \"./libs/firebase-inst\";\r\nimport EventManager from \"./core/event-manager\";\r\n\r\nexport enum ControlType {\r\n    DPad = 0,\r\n    Touch = 1,\r\n}\r\n\r\nexport enum DesignType {\r\n    Fire = 0,\r\n    Ice, \r\n    Grass\r\n}\r\n\r\n// this singleton class keep all player ref\r\n\r\nexport default class PlayerRef {\r\n\r\n    public initialized: boolean = false;\r\n\r\n    private static _current: PlayerRef = null;\r\n    public static get current(): PlayerRef {\r\n        if(this._current == null) {\r\n            this._current = new PlayerRef();\r\n            this._current.init();\r\n            // get/init anon user form firebase\r\n            // this._current.authFirebase();\r\n        }\r\n\r\n        return this._current;\r\n    }\r\n    \r\n    // private authFirebase() {\r\n    //     if(FirebaseInst.app == null) FirebaseInst.init();\r\n\r\n    //     FirebaseInst.app.auth().onAuthStateChanged(user => {\r\n    //         if(user) {\r\n    //             PlayerRef.current.setId(user.uid);\r\n    //             cc.log(\"Login anon success: \" + user.uid);\r\n    //             EventManager.instance.dispatch('PlayerRef-init', 'success');\r\n    //         }\r\n    //     })\r\n\r\n    //     FirebaseInst.app.auth().signInAnonymously().catch(error => {\r\n    //         cc.warn(\"Authentication anon error: \" + error.message);\r\n    //     })\r\n    // }\r\n\r\n    init() {\r\n        // this.clear();\r\n        if (!this.name) this.name = \"Default\";\r\n        this.control = cc.sys.isMobile ? ControlType.DPad : ControlType.Touch;\r\n        if (!this.user) this.user = DesignType.Fire;\r\n        if (!this.bomb) this.bomb = DesignType.Fire;\r\n        if (!this.map) this.map = DesignType.Fire;\r\n        if (!this.streak) this.streak = 0;\r\n        if (!this.alive) this.alive = 0;\r\n        if (this.first_launch_step == null) this.first_launch_step = 0;\r\n        // if (this.last_server_selection == undefined) this.last_server_selection = 0;\r\n        if (this.istutorial == null) this.istutorial = 1;\r\n        if (this.isRabitTutorial == null) \r\n        {\r\n            this.isRabitTutorial = 1;\r\n        }\r\n        if (this.isPenguinTutorial == null)\r\n        {\r\n            this.isPenguinTutorial = 1;\r\n        }\r\n        if (this.isLeafTutorial == null) \r\n        {\r\n            this.isLeafTutorial = 1;\r\n        }\r\n        if (!this.show_help) this.show_help = 1;\r\n        if (!this.crediental) this.crediental ='';\r\n        EventManager.instance.dispatch('PlayerRef-init', 'success');\r\n        this.initialized = true;\r\n    }\r\n\r\n    clear() {\r\n        cc.sys.localStorage.clear();\r\n    }\r\n\r\n    updateLocalRecord(streak: number, time: number) {\r\n        if (!this.streak || this.streak < streak) {\r\n            this.streak = streak;\r\n        }\r\n\r\n        if (!this.alive || this.alive < time) {\r\n            this.alive = time;\r\n        }\r\n    }\r\n\r\n    //////////////////// property ///////////////////////\r\n    public get name() { return cc.sys.localStorage.getItem('user-name') }\r\n    public set name(name: string) { cc.sys.localStorage.setItem('user-name', name) }\r\n\r\n    public get control() { return cc.sys.localStorage.getItem('user-control-type') }\r\n    public set control(type: number) { cc.sys.localStorage.setItem('user-control-type', type) };\r\n\r\n    public get user() { return cc.sys.localStorage.getItem('user-skin') }\r\n    public set user(type: number) { cc.sys.localStorage.setItem('user-skin', type) };\r\n\r\n    public get bomb() { return cc.sys.localStorage.getItem('bomb-skin') }\r\n    public set bomb(type: number) { cc.sys.localStorage.setItem('bomb-skin', type) };\r\n\r\n    public get map() { return cc.sys.localStorage.getItem('user-map') }\r\n    public set map(type: number) { cc.sys.localStorage.setItem('user-map', type) };\r\n\r\n    public get streak() { return cc.sys.localStorage.getItem('user-killstreak') }\r\n    public set streak(kill: number) { cc.sys.localStorage.setItem('user-killstreak', kill) };\r\n\r\n    public get alive() { return cc.sys.localStorage.getItem('user-time-alive') }\r\n    public set alive(time: number) { cc.sys.localStorage.setItem('user-time-alive', time) };\r\n\r\n    public get show_help() { return cc.sys.localStorage.getItem('user-show-help') }\r\n    public set show_help(show: number) { cc.sys.localStorage.setItem('user-show-help', show) };\r\n    public get istutorial() { return cc.sys.localStorage.getItem('user-is-Tutorial') }\r\n    public set istutorial(is_tutorial: number) { cc.sys.localStorage.setItem('user-is-Tutorial', is_tutorial) };\r\n\r\n    public get isRabitTutorial() { return cc.sys.localStorage.getItem('user-is-RabitTutorial') }\r\n    public set isRabitTutorial(is_tutorial: number) { cc.sys.localStorage.setItem('user-is-RabitTutorial', is_tutorial) };\r\n\r\n    public get isPenguinTutorial() { return cc.sys.localStorage.getItem('user-is-PenguinTutorial') }\r\n    public set isPenguinTutorial(is_tutorial: number) { cc.sys.localStorage.setItem('user-is-PenguinTutorial', is_tutorial) };\r\n    \r\n    public get isLeafTutorial() { return cc.sys.localStorage.getItem('user-is-LeafTutorial') }\r\n    public set isLeafTutorial(is_tutorial: number) { cc.sys.localStorage.setItem('user-is-LeafTutorial', is_tutorial) };\r\n\r\n    public get crediental() { return cc.sys.localStorage.getItem('user-crediental') }\r\n    public set crediental(user_cred: string) { cc.sys.localStorage.setItem('user-crediental', user_cred) };\r\n\r\n    public get email() { return cc.sys.localStorage.getItem('user-email') }\r\n    public set email(user_email: string) { cc.sys.localStorage.setItem('user-email', user_email) };\r\n\r\n    public get first_launch_step() { return cc.sys.localStorage.getItem('first-launch') }\r\n    public set first_launch_step(step: number) { cc.sys.localStorage.setItem('first-launch', step) };\r\n\r\n    public get last_server_selection() { return cc.sys.localStorage.getItem('last-server') }\r\n    public set last_server_selection(server_index: number) { cc.sys.localStorage.setItem('last-server', server_index) };\r\n\r\n    // public get last_server_host() { return cc.sys.localStorage.getItem('last-server-host') }\r\n    // public set last_server_host(step: string) { cc.sys.localStorage.setItem('last-server-host', step) }\r\n\r\n    // public get last_server_port() { return cc.sys.localStorage.getItem('last-server-port') }\r\n    // public set last_server_port(step: number) { cc.sys.localStorage.setItem('last-server-port', step) }\r\n\r\n    // public get last_server_secure() { return cc.sys.localStorage.getItem('last-server-secure') }\r\n    // public set last_server_secure(step: boolean) { cc.sys.localStorage.setItem('last-server-secure', step) }\r\n}","import HealthBar from \"./ui/healthbar\";\r\nimport NetComponent from \"./net-component\";\r\nimport PlayerControl from \"./player-control\";\r\nimport EventManager from \"../core/event-manager\";\r\nimport { LbInfo, PlayerInfo, BuffInfo } from \"./multiplayer/shared/IMessageData\";\r\nimport Game from \"./game\";\r\nimport Tutorial, {TUTORIAL_STATE, TUTORIAL_SUB_STATE} from \"./tutorial\";\r\nimport Bomb from \"./bomb\";\r\nimport Cacher from \"./resources-cacher\";\r\nimport {ConfigGame} from \"./ConfigGame\";\r\nimport PlayerRef, {DesignType} from \"../player-ref\";\r\nimport SoundManager from \"../core/sound-manager\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nexport enum AttackType {\r\n    None = 0,\r\n    Normal,\r\n    Skill,\r\n}\r\nexport enum PlayerAction {\r\n    Idle = 1,\r\n    Move = 2,\r\n    Fire = 4,       // throw out the bomb\r\n    Death = 8,\r\n}\r\n\r\nexport enum PlayerStatus {\r\n    None = 0,\r\n    Immune,\r\n    DmgX2,\r\n    DefX2,\r\n    ExpX2,\r\n    SpeedUp, \r\n    Block, \r\n    Invisible,\r\n    Burn,\r\n    Slow,\r\n    Bind,\r\n}\r\n\r\n@ccclass\r\nexport default class Player extends NetComponent {\r\n\r\n    static EVENT_LOCAL_PLAYER_EXP_CHANGE = \"local_exp_change\";\r\n\r\n    @property(cc.Label)\r\n    playerName: cc.Label = null;\r\n\r\n    @property(HealthBar)\r\n    healthBar: HealthBar = null;\r\n\r\n    @property(cc.Sprite)\r\n    sprite: cc.Sprite = null;\r\n\r\n    @property(cc.Sprite)\r\n    directionSprite: cc.Sprite = null;\r\n\r\n    @property(cc.Sprite)\r\n    rank: cc.Sprite = null;\r\n\r\n    @property(cc.Node)\r\n    effectsNode: cc.Node = null;\r\n\r\n    fx_shield: cc.Animation = null;\r\n    // @property(cc.Prefab)\r\n    // statusItem: cc.Prefab = null;\r\n\r\n    @property({ type: [cc.SpriteFrame] })\r\n    rankFrames: cc.SpriteFrame[] = [];\r\n\r\n    @property({ type: [cc.SpriteFrame] })\r\n    buffFrames: cc.SpriteFrame[] = []\r\n\r\n\t// start --------------------------- Nhan add\r\n    skill: {effect: PlayerStatus, cooldown: number} = null;\r\n    atkType: number = AttackType.None;\r\n    collider: cc.Collider = null;\r\n    cskin: number = DesignType.Fire;\r\n    bskin: number = DesignType.Fire;\r\n    maxDistanceCanfire: number = ConfigGame.BOMB_LENGTH;\r\n  \r\n    isRobot: boolean = false;\r\n        autoMove: boolean = false;\r\n        autoFire: boolean =false;\r\n    targetPos: cc.Vec2 = null;\r\n    stopPoint: boolean = false;\r\n\r\n    m_bomb: Bomb;\r\n\r\n    playerSpeed: number = ConfigGame.PLAYER_SPEED;\r\n    buffs: { [key: number]: {duration: number, interval?: number, attacker?: Player} } = {};\r\n\r\n    shield: cc.Node = null;\r\n    numofBombReceive: number = 0;\r\n    // end ----------------------------- Nhan add\r\n\r\n    \r\n    health: number = 0;\r\n    level: number = 1;\r\n    exp: number = 0;\r\n    action: PlayerAction = 0;\r\n    direction: number = 90;\r\n    bombable: boolean = false;\r\n    skillable: boolean = false;\r\n    effects: number[] = [];\r\n    invulnerable: boolean = true;\r\n\r\n    controller: PlayerControl = null;\r\n    isFiring: boolean = false;\r\n    \r\n    private pendingAnim: string = null;\r\n\r\n    private animation: cc.Animation;\r\n    //private effects_anim: cc.Animation;\r\n    private move_anim: string[] = ['move_0', 'move_45', 'move_90', 'move_135', 'move_180', 'move_225', 'move_270', 'move_315'];\r\n    private idle_anim: string[] = ['idle_0', 'idle_45', 'idle_90', 'idle_135', 'idle_180', 'idle_225', 'idle_270', 'idle_315'];\r\n    private fire_anim: string[] = ['fire_0', 'fire_45', 'fire_90', 'fire_135', 'fire_180', 'fire_225', 'fire_270', 'fire_315'];\r\n    private animIdx: number = -1;       // current anim player for direction [0, 7]\r\n\r\n    private rank_anim: string[] = ['none', 'gold', 'silver', 'bronze'];\r\n\r\n    //effect\r\n    //fx_shield: cc.Animation = null;\r\n    fx_levelUp: cc.Node = null;\r\n    fx_warn: cc.Node = null;\r\n    fx_buff: cc.Sprite = null;\r\n\r\n\tonCollisionEnter(other, self) {\r\n        //console.log(\"Player Currently colliding\");\r\n        if (Game.isTutorial)\r\n        {\r\n            if (other.tag == 2)\r\n            {\r\n                if ( this.effectsNode.children[0].active )\r\n                {\r\n                    //console.log(\"Player colliding --> 2\");\r\n                    let name = this.fx_shield.currentClip.name;\r\n                    //console.log(\"Player colliding --> this.fx_shield.currentClip.name = \" + name);\r\n                    if (name == \"start-invulnerable\")\r\n                        this.effectsNode.children[0].active = false;\r\n                    else\r\n                        this.numofBombReceive++;\r\n                }\r\n                else\r\n                {\r\n                    this.health -= ConfigGame.BOMB_BASE_DAMGE;\r\n                    this.healthBar.updateHealth(this.level, this.health);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    onCollisionExit(other,self){\r\n        //console.log(\"Player Done colliding\");\r\n    }\r\n\r\n    init(data: { id, x, y, name, health, level, exp, cskin }) {\r\n        super.init(data);\r\n        //this.initClips(data.cskin);\r\n        this.animation = this.sprite.getComponent(cc.Animation);\r\n        this.animation.on(\"finished\", this.onAnimationEvent, this);\r\n\r\n\r\n        //effect\r\n        this.fx_shield = this.effectsNode.children[0].getComponent(cc.Animation);\r\n        this.fx_shield.play(\"protector\");\r\n        this.fx_levelUp = this.effectsNode.children[1];\r\n        this.fx_buff = this.effectsNode.children[2].getComponent(cc.Sprite);\r\n        this.fx_warn = this.effectsNode.children[3];\r\n        \r\n        //player info\r\n        this.playerName.string = data.name;\r\n        this.cskin = data.cskin;\r\n        this.health = data.health;\r\n        this.level = data.level;\r\n        this.exp = data.exp;\r\n        //this.healthBar.updateHealth(Player.getHealth(this.level), this.health);\r\n        this.healthBar.updateHealth(this.level, this.health);\r\n        this.setPosition(data.x, data.y);\r\n        this.setStatus(0);\r\n        // Nhan add\r\n        this.setBombskin(data.id);\r\n    }\r\n\r\n    // initClips(skin: number) {\r\n    //     this.animation = this.sprite.addComponent(cc.Animation);\r\n    //     this.animation.on(\"finished\", this.onAnimationEvent, this);\r\n    //     Cacher.instance.mc_anims[skin].forEach(clip => {\r\n    //         this.animation.addClip(clip);\r\n    //     });\r\n    // }\r\n\r\n    setPlayerName(name: string) {\r\n        this.playerName.string = name;\r\n    }\r\n\r\n    getPlayerName() {\r\n        return this.playerName.string;\r\n    }\r\n\r\n    setPosition(x: number, y: number) {\r\n        if (this.death) return;\r\n\r\n        this.node.setPosition(x, y);\r\n    }\r\n\r\n    setServerData(data: PlayerInfo) {\r\n        this.cskin = data.cskin;\r\n        this.updatePlayerInfo(data.x, data.y, data.opacity, data.health, data.level, data.exp, data.death, data.vulnerable, data.bombable, data.skillable, data.buffs);\r\n        this.updateAction(data.action, data.direction);\r\n        //this.node.opacity = data.opacity;\r\n        // Nhan add\r\n    }\r\n\r\n    updatePlayerInfo(x: number, y: number, opacity: number, health: number, level: number, exp: number, death: boolean, vulnerable: boolean, bombable: boolean, skillable: boolean, buffs: number[]) {\r\n        super.setStateData({ x: x, y: y });\r\n        this.death = death;\r\n        //this.healthBar.updateHealth(Player.getHealth(level), health);\r\n        if (this.level < level) { //leveup\r\n            this.level = level;\r\n            this.fx_levelUp.active = true;\r\n            setTimeout(() => {\r\n                this.fx_levelUp.active = false;\r\n            }, 2000);\r\n        }\r\n        \r\n        this.healthBar.updateHealth(level, health);\r\n        this.health = health;\r\n        this.exp = exp;\r\n        this.bombable = bombable;\r\n        this.skillable = skillable;\r\n        this.effects = [...buffs];\r\n\r\n        if (this.invulnerable) {\r\n            if (vulnerable) {\r\n                this.invulnerable = false;\r\n                this.fx_shield.node.active = false;\r\n                this.fx_shield.play(\"start-invulnerable\");\r\n            }\r\n        } else {\r\n            this.fx_shield.node.active = this.hasStatus(PlayerStatus.Block);\r\n        }\r\n        \r\n        this.node.opacity = opacity;\r\n        if (this.hasStatus(PlayerStatus.Invisible)) {\r\n            this.node.opacity = (this == Game.instance.localPlayer) ? 100 : 0;\r\n        } \r\n\r\n        let showEffect = false;\r\n        [PlayerStatus.ExpX2, PlayerStatus.DefX2, PlayerStatus.DmgX2].forEach(eff => {\r\n            if (this.hasStatus(eff)) {\r\n                showEffect = true;\r\n                this.fx_buff.spriteFrame = this.buffFrames[eff - 2];\r\n            }\r\n        })\r\n        this.fx_buff.node.active = showEffect;\r\n        \r\n\r\n        // this.status.removeAllChildren();\r\n        // let headStt = [PlayerStatus.DmgX2, PlayerStatus.DefX2, PlayerStatus.ExpX2]\r\n        // headStt.forEach(stt => {\r\n        //     if (this.hasStatus(stt)) {\r\n        //         let effect = cc.instantiate(this.statusItem);\r\n        //         effect.getComponent(cc.Sprite).spriteFrame = this.buffFrames[stt - 2];\r\n        //         this.status.addChild(effect);        \r\n        //     }\r\n        // })\r\n        // this.status.active = (this.status.childrenCount > 0);\r\n    }\r\n\r\n    setStatus(top: number, localPlayer: boolean = false) {  // rank = 0: not in top\r\n        this.fx_warn.active = !localPlayer && top > 0;\r\n        // this.rank.spriteFrame = this.rankFrames[top];\r\n        this.rank.node.active = top > 0;        \r\n        var anim = this.rank.getComponent(cc.Animation);\r\n        if(top > 0)\r\n        {\r\n            anim.play(this.rank_anim[top]);\r\n        }\r\n        else\r\n            anim.stop();\r\n    }\r\n\r\n    hasStatus(status: number) {\r\n        return this.effects.length > 0 && this.effects.indexOf(status) >= 0;\r\n    }\r\n\r\n    // Nhan add\r\n\t\r\n\tupdateImpactEffects()\r\n    {\r\n        let showEffect = false;\r\n        [PlayerStatus.ExpX2, PlayerStatus.DefX2, PlayerStatus.DmgX2].forEach(eff => {\r\n            if (this.hasStatus(eff)) {\r\n                showEffect = true;\r\n                this.fx_buff.spriteFrame = this.buffFrames[eff - 2];\r\n            }\r\n        })\r\n        this.fx_buff.node.active = showEffect;\r\n    }\r\n\t\r\n    activeEffect(effect: PlayerStatus, attacker?: Player, interval?: number) {\r\n        // Nhan note: old version --> active skill\r\n        // if (this.buffs[effect]) {\r\n        //     delete this.buffs[effect];\r\n        // }\r\n        // //cc.log(\"Nhan --> effect= \"+ effect +\", duration: \" + ConfigGame.EFFECT_DURATION[effect]);\r\n        // this.buffs[effect] = {duration: ConfigGame.EFFECT_DURATION[effect], interval: interval, attacker: attacker};\r\n\r\n        // cc.log(\"Nhan --> effect= \"+ effect + \", playerName=\" + this.name);\r\n        // if(effect == PlayerStatus.SpeedUp) { //blink?\r\n        //     let angleRad = this.direction * Math.PI / 180;         // to rads\r\n        //     let dx = Math.cos(angleRad) * 160;\r\n        //     let dy = Math.sin(angleRad) * 160;\r\n        //     if ((this.node.x + Math.round(dx)) < -460)\r\n        //         this.node.x= -460;\r\n        //     else if ((this.node.x + Math.round(dx)) > 460)\r\n        //         this.node.x = 460;\r\n        //     else\r\n        //         this.node.x += Math.round(dx);\r\n\r\n        //     if ((this.node.y + Math.round(dy)) < -300)\r\n        //         this.node.y= -300;\r\n        //     else if ((this.node.y + Math.round(dy)) > 300)\r\n        //         this.node.y= 300;\r\n        //     else\r\n        //         this.node.y += Math.round(dy);\r\n        //     return;\r\n        // }\r\n\r\n        // this.deactiveEffect(effect);\r\n        // this.buffs[effect] = {duration: ConfigGame.EFFECT_DURATION[effect], interval: interval, attacker: attacker};\r\n\r\n    }\r\n    \r\n    deactiveEffect(effect: PlayerStatus) {\r\n        if (this.buffs[effect]) {\r\n            delete this.buffs[effect];\r\n        }\r\n    }\r\n\r\n    updateAction(action: PlayerAction, direction: number) {\r\n        //this.directionSprite.node.rotation = 90 - direction;\r\n        let dsprite = Math.round(direction / 45) % 8;\r\n        if (this.animIdx != dsprite || action != this.action) {\r\n            if (action == PlayerAction.Move) {\r\n                if (this.isFiring) this.pendingAnim = this.move_anim[dsprite];\r\n                else this.animation.play(this.move_anim[dsprite]);\r\n            } else if (action == PlayerAction.Idle) {\r\n                if (this.isFiring) this.pendingAnim = this.idle_anim[dsprite];\r\n                else this.animation.play(this.idle_anim[dsprite]);\r\n            } else if (action == PlayerAction.Fire) {\r\n                this.isFiring = true;\r\n                this.animation.play(this.fire_anim[dsprite]);\r\n            }\r\n\r\n            this.animIdx = dsprite;\r\n        }       \r\n\r\n        this.direction = direction;\r\n        this.action = action;\r\n    }\r\n\r\n    onDeath(timeout: boolean) {\r\n        if (Game.isTutorial)\r\n            return; // Nhan note: for handle in offline mode\r\n\r\n        if (this.controller && this.controller.handleDeath()) return;   // if controler already handle -> return\r\n        \r\n        EventManager.instance.dispatch(NetComponent.EVENT_NET_ENTITY_DEATH, this.id);\r\n\r\n        if (timeout) {\r\n            this.node.removeFromParent();\r\n        } else {\r\n            // anim death\r\n            this.node.runAction(cc.sequence(\r\n                cc.fadeOut(1),\r\n                cc.callFunc(() => {\r\n                    this.node.removeFromParent();\r\n                })\r\n            ))\r\n        }\r\n    }\r\n\r\n    private onAnimationEvent(type: string, state: cc.AnimationState) {\r\n        if (type === 'finished') {\r\n            if (state.name.indexOf(\"fire_\") != -1) {\r\n                this.isFiring = false;\r\n                if (this.pendingAnim != null) {\r\n                    this.animation.play(this.pendingAnim);\r\n                    this.pendingAnim = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// static\r\n    // this function must be match on server (Config.ts)\r\n    static getLevelExp(level: number): number {\r\n        //@ remove lvl max\r\n        // let PLAYER_LEVEL_MAX = 6;\r\n        // level = level > PLAYER_LEVEL_MAX ? PLAYER_LEVEL_MAX : level;\r\n        // let exp = 100;\r\n        // for (let i = 2; i <= level; i++) {\r\n        //     exp = exp + 100 / 2;\r\n        // }\r\n        // return exp;\r\n\r\n        return 100 * Math.pow(2, level - 1);\r\n    }\r\n\r\n    // this function must be match on server (Config.ts)\r\n    static getHealth(level: number): number {\r\n        //let PLAYER_LEVEL_MAX = 6; //@ remove lvl max\r\n        let PLAYER_START_HEALTH = 70;\r\n        //level = level > PLAYER_LEVEL_MAX ? PLAYER_LEVEL_MAX : level; //@ remove lvl max\r\n        let health = PLAYER_START_HEALTH * level;\r\n        return health;\r\n    }\r\n    // Nhan add\r\n    enableAttack(type: number = AttackType.Normal) {         // bomb already exploded\r\n        type == AttackType.Normal ? this.bombable = true : this.skillable = true;\r\n        this.atkType = AttackType.None;\r\n    }\r\n\r\n    setBombskin(m_bskin: number)\r\n    {\r\n        this.bskin = m_bskin;\r\n    }\r\n\r\n    getBombskin(): number\r\n    {\r\n        return this.bskin;\r\n    }\r\n    setImpactEffect(eff_list: number[])\r\n    {\r\n        this.effects = [...eff_list];;\r\n    }\r\n\r\n    setTargetPos(_pos: cc.Vec2)\r\n    {\r\n        this.targetPos = _pos;\r\n    }\r\n\r\n    setBombAnim(_bomb: Bomb)\r\n    {\r\n        this.m_bomb = _bomb;\r\n\r\n        if (this.m_bomb == null )\r\n        {\r\n            cc.log(\"--> Need set one bomb for player\");\r\n            return;\r\n        }\r\n\r\n        //let bomb = cc.instantiate(this.bombPrefab).getComponent(Bomb);\r\n\r\n        this.m_bomb.setOwnerPlayer(this);\r\n        this.m_bomb.init({id: this.id, x: this.node.position.x,y: this.node.position.y, opacity: 0,death: false, percent: 100,exploded: true, skin: this.bskin});\r\n        //\r\n        this.m_bomb.setExplodeStatus(true);\r\n        if (this.targetPos)\r\n            this.m_bomb.setEndPos(this.targetPos.x , this.targetPos.y);\r\n        // else\r\n        //     this.m_bomb.updateEndPos();\r\n\r\n        this.m_bomb.node.addComponent(cc.CircleCollider);\r\n        this.m_bomb.node.getComponent(cc.CircleCollider).radius = this.m_bomb.node.width/2;\r\n        this.m_bomb.node.getComponent(cc.CircleCollider).tag = 2;\r\n        this.m_bomb.node.getComponent(cc.CircleCollider).enabled = false;\r\n        this.m_bomb.collider = this.m_bomb.node.getComponent(cc.CircleCollider);\r\n        this.node.parent.addChild(this.m_bomb.node);\r\n        \r\n        //this.node.addChild(this.m_bomb.node);// Nhan note: this bomb will be scale follow Player, (this is wrong)\r\n    }\r\n    update(dt)\r\n    {\r\n        if (!Game.isTutorial)\r\n            return;\r\n\r\n        // if (!this.skillable) {\r\n        //     this.skill.cooldown -= dt;\r\n        //     if (this.skill.cooldown <= 0) {\r\n        //         this.enableAttack(AttackType.Skill);\r\n        //         this.skill.cooldown = ConfigGame.PLAYER_SKILL_COOLDOWN;\r\n        //     }\r\n        // }\r\n        if (this.isRobot && !this.stopPoint)\r\n        {\r\n            if (this.autoMove && this.targetPos)\r\n            {\r\n                let bot_x = this.node.getPosition().x;\r\n                let bot_y = this.node.getPosition().y;\r\n                let mc_x = this.targetPos.x;\r\n                let mc_y = this.targetPos.y;\r\n                let tmp = (mc_x - bot_x)*(mc_x - bot_x) + (mc_y - bot_y)*(mc_y - bot_y);\r\n                let distance = Math.sqrt(tmp);\r\n                let cos_alpha = ((tmp + (mc_x-bot_x)*(mc_x-bot_x)) - ((mc_y - bot_y)*(mc_y - bot_y)))/(2 * distance * (mc_x - bot_x));\r\n                let radian = Math.acos(cos_alpha);\r\n                if ((bot_x > mc_x && bot_y > mc_y) || (bot_x < mc_x && bot_y > mc_y))\r\n                {\r\n                    radian = 2 * Math.PI - Math.acos(cos_alpha);\r\n                }\r\n    \r\n                if (distance > this.maxDistanceCanfire)\r\n                {\r\n                    //let timeMove: number = distance / (ConfigGame.PLAYER_SPEED); //reduce speed\r\n                    let timeMove: number = distance / this.playerSpeed;\r\n                    let pos = this.node.position.lerp(this.targetPos, dt / timeMove );\r\n\r\n                    this.updateAction(PlayerAction.Move, (radian * 180) / Math.PI);\r\n                    this.setPosition(pos.x, pos.y);\r\n                } \r\n                else    //// BOT is in Attacked area\r\n                {\r\n                    if (this.action == PlayerAction.Move)\r\n                        this.updateAction(PlayerAction.Idle, (radian * 180) / Math.PI);\r\n\r\n                    if (this.autoFire)                        \r\n                    {\r\n                        if (this.action != PlayerAction.Fire && this.bombable)\r\n                        {\r\n                            this.bombable = false;\r\n                            if (this.m_bomb)\r\n                            {\r\n                                // Nhan note: check condiction here will be make error\r\n                                //cc.log(\"Nhan --> PlayerRef.current.user = \" +  PlayerRef.current.user);\r\n                                // call Tutorial make crash game\r\n                                // if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill)\r\n                                this.m_bomb.setEndPos(this.targetPos.x , this.targetPos.y);\r\n                                this.m_bomb.collider.tag = 2;\r\n                                this.m_bomb.setStateData({id: this.id, x: this.node.x, y: this.node.y + ConfigGame.PLAYER_HEIGHT , percent: 100, death: false,exploded: false,opacity:255, skin: this.bskin});\r\n                                this.m_bomb.setExplodeStatus(false);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","//     (c) 2012-2016 Airbnb, Inc.\r\n//\r\n//     polyglot.js may be freely distributed under the terms of the BSD\r\n//     license. For all licensing information, details, and documention:\r\n//     http://airbnb.github.com/polyglot.js\r\n//\r\n//\r\n// Polyglot.js is an I18n helper library written in JavaScript, made to\r\n// work both in the browser and in Node. It provides a simple solution for\r\n// interpolation and pluralization, based off of Airbnb's\r\n// experience adding I18n functionality to its Backbone.js and Node apps.\r\n//\r\n// Polylglot is agnostic to your translation backend. It doesn't perform any\r\n// translation; it simply gives you a way to manage translated phrases from\r\n// your client- or server-side JavaScript application.\r\n//\r\n\r\n\r\n(function(root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], function() {\r\n      return factory(root);\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(root);\r\n  } else {\r\n    root.Polyglot = factory(root);\r\n  }\r\n}(typeof global !== 'undefined' ? global : this, function(root) {\r\n  'use strict';\r\n\r\n  var replace = String.prototype.replace;\r\n\r\n  // ### Polyglot class constructor\r\n  function Polyglot(options) {\r\n    options = options || {};\r\n    this.phrases = {};\r\n    this.extend(options.phrases || {});\r\n    this.currentLocale = options.locale || 'en';\r\n    this.allowMissing = !!options.allowMissing;\r\n    this.warn = options.warn || warn;\r\n  }\r\n\r\n  // ### Version\r\n  Polyglot.VERSION = '1.0.0';\r\n\r\n  // ### polyglot.locale([locale])\r\n  //\r\n  // Get or set locale. Internally, Polyglot only uses locale for pluralization.\r\n  Polyglot.prototype.locale = function(newLocale) {\r\n    if (newLocale) this.currentLocale = newLocale;\r\n    return this.currentLocale;\r\n  };\r\n\r\n  // ### polyglot.extend(phrases)\r\n  //\r\n  // Use `extend` to tell Polyglot how to translate a given key.\r\n  //\r\n  //     polyglot.extend({\r\n  //       \"hello\": \"Hello\",\r\n  //       \"hello_name\": \"Hello, %{name}\"\r\n  //     });\r\n  //\r\n  // The key can be any string.  Feel free to call `extend` multiple times;\r\n  // it will override any phrases with the same key, but leave existing phrases\r\n  // untouched.\r\n  //\r\n  // It is also possible to pass nested phrase objects, which get flattened\r\n  // into an object with the nested keys concatenated using dot notation.\r\n  //\r\n  //     polyglot.extend({\r\n  //       \"nav\": {\r\n  //         \"hello\": \"Hello\",\r\n  //         \"hello_name\": \"Hello, %{name}\",\r\n  //         \"sidebar\": {\r\n  //           \"welcome\": \"Welcome\"\r\n  //         }\r\n  //       }\r\n  //     });\r\n  //\r\n  //     console.log(polyglot.phrases);\r\n  //     // {\r\n  //     //   'nav.hello': 'Hello',\r\n  //     //   'nav.hello_name': 'Hello, %{name}',\r\n  //     //   'nav.sidebar.welcome': 'Welcome'\r\n  //     // }\r\n  //\r\n  // `extend` accepts an optional second argument, `prefix`, which can be used\r\n  // to prefix every key in the phrases object with some string, using dot\r\n  // notation.\r\n  //\r\n  //     polyglot.extend({\r\n  //       \"hello\": \"Hello\",\r\n  //       \"hello_name\": \"Hello, %{name}\"\r\n  //     }, \"nav\");\r\n  //\r\n  //     console.log(polyglot.phrases);\r\n  //     // {\r\n  //     //   'nav.hello': 'Hello',\r\n  //     //   'nav.hello_name': 'Hello, %{name}'\r\n  //     // }\r\n  //\r\n  // This feature is used internally to support nested phrase objects.\r\n  Polyglot.prototype.extend = function(morePhrases, prefix) {\r\n    var phrase;\r\n\r\n    for (var key in morePhrases) {\r\n      if (morePhrases.hasOwnProperty(key)) {\r\n        phrase = morePhrases[key];\r\n        if (prefix) key = prefix + '.' + key;\r\n        if (typeof phrase === 'object') {\r\n          this.extend(phrase, key);\r\n        } else {\r\n          this.phrases[key] = phrase;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // ### polyglot.unset(phrases)\r\n  // Use `unset` to selectively remove keys from a polyglot instance.\r\n  //\r\n  //     polyglot.unset(\"some_key\");\r\n  //     polyglot.unset({\r\n  //       \"hello\": \"Hello\",\r\n  //       \"hello_name\": \"Hello, %{name}\"\r\n  //     });\r\n  //\r\n  // The unset method can take either a string (for the key), or an object hash with\r\n  // the keys that you would like to unset.\r\n  Polyglot.prototype.unset = function(morePhrases, prefix) {\r\n    var phrase;\r\n\r\n    if (typeof morePhrases === 'string') {\r\n      delete this.phrases[morePhrases];\r\n    } else {\r\n      for (var key in morePhrases) {\r\n        if (morePhrases.hasOwnProperty(key)) {\r\n          phrase = morePhrases[key];\r\n          if (prefix) key = prefix + '.' + key;\r\n          if (typeof phrase === 'object') {\r\n            this.unset(phrase, key);\r\n          } else {\r\n            delete this.phrases[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // ### polyglot.clear()\r\n  //\r\n  // Clears all phrases. Useful for special cases, such as freeing\r\n  // up memory if you have lots of phrases but no longer need to\r\n  // perform any translation. Also used internally by `replace`.\r\n  Polyglot.prototype.clear = function() {\r\n    this.phrases = {};\r\n  };\r\n\r\n  // ### polyglot.replace(phrases)\r\n  //\r\n  // Completely replace the existing phrases with a new set of phrases.\r\n  // Normally, just use `extend` to add more phrases, but under certain\r\n  // circumstances, you may want to make sure no old phrases are lying around.\r\n  Polyglot.prototype.replace = function(newPhrases) {\r\n    this.clear();\r\n    this.extend(newPhrases);\r\n  };\r\n\r\n\r\n  // ### polyglot.t(key, options)\r\n  //\r\n  // The most-used method. Provide a key, and `t` will return the\r\n  // phrase.\r\n  //\r\n  //     polyglot.t(\"hello\");\r\n  //     => \"Hello\"\r\n  //\r\n  // The phrase value is provided first by a call to `polyglot.extend()` or\r\n  // `polyglot.replace()`.\r\n  //\r\n  // Pass in an object as the second argument to perform interpolation.\r\n  //\r\n  //     polyglot.t(\"hello_name\", {name: \"Spike\"});\r\n  //     => \"Hello, Spike\"\r\n  //\r\n  // If you like, you can provide a default value in case the phrase is missing.\r\n  // Use the special option key \"_\" to specify a default.\r\n  //\r\n  //     polyglot.t(\"i_like_to_write_in_language\", {\r\n  //       _: \"I like to write in %{language}.\",\r\n  //       language: \"JavaScript\"\r\n  //     });\r\n  //     => \"I like to write in JavaScript.\"\r\n  //\r\n  Polyglot.prototype.t = function(key, options) {\r\n    var phrase, result;\r\n    options = options == null ? {} : options;\r\n    // allow number as a pluralization shortcut\r\n    if (typeof options === 'number') {\r\n      options = {smart_count: options};\r\n    }\r\n    if (typeof this.phrases[key] === 'string') {\r\n      phrase = this.phrases[key];\r\n    } else if (typeof options._ === 'string') {\r\n      phrase = options._;\r\n    } else if (this.allowMissing) {\r\n      phrase = key;\r\n    } else {\r\n      this.warn('Missing translation for key: \"'+key+'\"');\r\n      result = key;\r\n    }\r\n    if (typeof phrase === 'string') {\r\n      options = clone(options);\r\n      result = choosePluralForm(phrase, this.currentLocale, options.smart_count);\r\n      result = interpolate(result, options);\r\n    }\r\n    return result;\r\n  };\r\n\r\n\r\n  // ### polyglot.has(key)\r\n  //\r\n  // Check if polyglot has a translation for given key\r\n  Polyglot.prototype.has = function(key) {\r\n    return key in this.phrases;\r\n  };\r\n\r\n\r\n  // #### Pluralization methods\r\n  // The string that separates the different phrase possibilities.\r\n  var delimeter = '||||';\r\n\r\n  // Mapping from pluralization group plural logic.\r\n  var pluralTypes = {\r\n    chinese:   function(n) { return 0; },\r\n    german:    function(n) { return n !== 1 ? 1 : 0; },\r\n    french:    function(n) { return n > 1 ? 1 : 0; },\r\n    russian:   function(n) { return n % 10 === 1 && n % 100 !== 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2; },\r\n    czech:     function(n) { return (n === 1) ? 0 : (n >= 2 && n <= 4) ? 1 : 2; },\r\n    polish:    function(n) { return (n === 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2); },\r\n    icelandic: function(n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; }\r\n  };\r\n\r\n  // Mapping from pluralization group to individual locales.\r\n  var pluralTypeToLanguages = {\r\n    chinese:   ['fa', 'id', 'ja', 'ko', 'lo', 'ms', 'th', 'tr', 'zh'],\r\n    german:    ['da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hu', 'it', 'nl', 'no', 'pt', 'sv'],\r\n    french:    ['fr', 'tl', 'pt-br'],\r\n    russian:   ['hr', 'ru'],\r\n    czech:     ['cs', 'sk'],\r\n    polish:    ['pl'],\r\n    icelandic: ['is']\r\n  };\r\n\r\n  function langToTypeMap(mapping) {\r\n    var type, langs, l, ret = {};\r\n    for (type in mapping) {\r\n      if (mapping.hasOwnProperty(type)) {\r\n        langs = mapping[type];\r\n        for (l in langs) {\r\n          ret[langs[l]] = type;\r\n        }\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  // Trim a string.\r\n  var trimRe = /^\\s+|\\s+$/g;\r\n  function trim(str){\r\n    return replace.call(str, trimRe, '');\r\n  }\r\n\r\n  // Based on a phrase text that contains `n` plural forms separated\r\n  // by `delimeter`, a `locale`, and a `count`, choose the correct\r\n  // plural form, or none if `count` is `null`.\r\n  function choosePluralForm(text, locale, count){\r\n    var ret, texts, chosenText;\r\n    if (count != null && text) {\r\n      texts = text.split(delimeter);\r\n      chosenText = texts[pluralTypeIndex(locale, count)] || texts[0];\r\n      ret = trim(chosenText);\r\n    } else {\r\n      ret = text;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  function pluralTypeName(locale) {\r\n    var langToPluralType = langToTypeMap(pluralTypeToLanguages);\r\n    return langToPluralType[locale] || langToPluralType.en;\r\n  }\r\n\r\n  function pluralTypeIndex(locale, count) {\r\n    return pluralTypes[pluralTypeName(locale)](count);\r\n  }\r\n\r\n  // ### interpolate\r\n  //\r\n  // Does the dirty work. Creates a `RegExp` object for each\r\n  // interpolation placeholder.\r\n  var dollarRegex = /\\$/g;\r\n  var dollarBillsYall = '$$$$';\r\n  function interpolate(phrase, options) {\r\n    for (var arg in options) {\r\n      if (arg !== '_' && options.hasOwnProperty(arg)) {\r\n        // Ensure replacement value is escaped to prevent special $-prefixed\r\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\r\n        // be escaped with \"$\" itself, and we need two in the resulting output.\r\n        var replacement = options[arg];\r\n        if (typeof replacement === 'string') {\r\n          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall);\r\n        }\r\n        // We create a new `RegExp` each time instead of using a more-efficient\r\n        // string replace so that the same argument can be replaced multiple times\r\n        // in the same phrase.\r\n        phrase = replace.call(phrase, new RegExp('%\\\\{'+arg+'\\\\}', 'g'), replacement);\r\n      }\r\n    }\r\n    return phrase;\r\n  }\r\n\r\n  // ### warn\r\n  //\r\n  // Provides a warning in the console if a phrase key is missing.\r\n  function warn(message) {\r\n    root.console && root.console.warn && root.console.warn('WARNING: ' + message);\r\n  }\r\n\r\n  // ### clone\r\n  //\r\n  // Clone an object.\r\n  function clone(source) {\r\n    var ret = {};\r\n    for (var prop in source) {\r\n      ret[prop] = source[prop];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  return Polyglot;\r\n}));\r\n","import Game from \"../game/game\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Popup extends cc.Component {\r\n\r\n    private static _instance: Popup = null;\r\n    public static get instance(): Popup {\r\n        if(this._instance) return this._instance;\r\n        cc.error(\"Popup does not init yet, this need to be init in loader\");\r\n        return null;\r\n    }\r\n\r\n    @property(cc.Prefab)\r\n    dialogPopup: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    waitingPopup: cc.Prefab = null;\r\n\r\n    private target: cc.Node = null;\r\n\r\n    onLoad() {\r\n        Popup._instance = this;\r\n        cc.game.addPersistRootNode(this.node);\r\n        this.node.zIndex = 1000;\r\n    }\r\n\r\n    setTarget(target: cc.Node) {\r\n        this.target = target;\r\n    }\r\n\r\n    showInfoPopup(content: string, closeCallback?: Function, hasConfirmation?: boolean, cancelCallback?: Function) {\r\n        let canvas = this.target ? this.target : cc.find(\"Canvas\");\r\n        let node = cc.instantiate(this.dialogPopup);\r\n        node.name = \"final_Info_dialog\";\r\n        let blockInput = node.getChildByName('blockinput').getComponent(cc.Widget);\r\n        blockInput.target = canvas; blockInput.left = 0; blockInput.right = 0;\r\n        node.getChildByName(\"confirm-content\").active = false;\r\n        let info = node.getChildByName(\"info-content\");\r\n        content && (info.getChildByName(\"title\").getComponent(cc.Label).string = content);\r\n        info.getChildByName(\"title\").getComponent(cc.Label).horizontalAlign = 1;\r\n        info.getChildByName(\"title\").getComponent(cc.Label).verticalAlign = 1;\r\n        info.active = true;\r\n\r\n        let cancel: cc.Button = info.getChildByName(\"cancelbutton\").getComponent(cc.Button);\r\n        cancel.node.on('click', () => {\r\n            node.removeFromParent();\r\n            if(closeCallback) closeCallback();\r\n        })\r\n\r\n        let positive: cc.Button = info.getChildByName(\"positivebutton\").getComponent(cc.Button);\r\n        positive.node.on('click', () => {\r\n            node.removeFromParent();\r\n            if(closeCallback) closeCallback();\r\n        })\r\n\r\n        let negative: cc.Button = info.getChildByName(\"negativebutton\").getComponent(cc.Button);\r\n        negative.node.on('click', () => {\r\n            node.removeFromParent();\r\n            if(closeCallback && !hasConfirmation) closeCallback();\r\n            if(cancelCallback && hasConfirmation) cancelCallback();\r\n        })\r\n        \r\n        if (hasConfirmation) {\r\n            cancel.node.active = false;\r\n        } else {\r\n            positive.node.active = false;\r\n            negative.node.active = false;\r\n        }\r\n\r\n        canvas.addChild(node);\r\n    }\r\n\r\n    showConfirmPopup(mc: cc.SpriteFrame, played_time: string, kill_no: string, positiveCallback?: Function, negativeCallback?: Function) {\r\n        let canvas = this.target ? this.target : cc.find(\"Canvas\");\r\n        let node = cc.instantiate(this.dialogPopup);\r\n        let blockInput = node.getChildByName('blockinput').getComponent(cc.Widget);\r\n        blockInput.target = canvas; blockInput.left = 0; blockInput.right = 0;\r\n        node.getChildByName(\"info-content\").active = false;\r\n        let content = node.getChildByName(\"confirm-content\");\r\n        content.active = true;\r\n        content.getChildByName(\"character\").getComponent(cc.Sprite).spriteFrame = mc;\r\n        content.getChildByName(\"played-time\").getComponent(cc.Label).string = played_time;\r\n        content.getChildByName(\"killed-number\").getComponent(cc.Label).string = kill_no;\r\n        let button1: cc.Button = content.getChildByName(\"positivebutton\").getComponent(cc.Button);\r\n        button1.node.on('click', ()=>{\r\n            node.removeFromParent();\r\n            if(positiveCallback) positiveCallback();\r\n        });\r\n        let button2: cc.Button = content.getChildByName(\"negativebutton\").getComponent(cc.Button);\r\n        button2.node.on('click', ()=>{\r\n            node.removeFromParent();\r\n            if(negativeCallback) negativeCallback();\r\n        });\r\n        canvas.addChild(node); \r\n    }\r\n\r\n    private waitingPopupNode: cc.Node = null;\r\n    showWaitingPopup(content: string) {\r\n        if (!this.waitingPopupNode) {\r\n            let canvas = this.target ? this.target : cc.find(\"Canvas\");\r\n            let node = cc.instantiate(this.waitingPopup);\r\n            let blockInput = node.getChildByName('blockinput').getComponent(cc.Widget);\r\n            blockInput.target = canvas; blockInput.left = 0; blockInput.right = 0;\r\n            this.waitingPopupNode = node;\r\n            canvas.addChild(this.waitingPopupNode);\r\n            this.waitingPopupNode.getChildByName(\"content\").getComponentInChildren(cc.Label).string = content;\r\n        }\r\n    }\r\n\r\n    hideWaitingPopup() {\r\n        this.waitingPopupNode.removeFromParent();\r\n    }\r\n\r\n    showNotify(content: string, duration: number = 3) {\r\n        let canvas = this.target ? this.target : cc.find(\"Canvas\");\r\n        let node = cc.instantiate(this.waitingPopup);\r\n        node.getChildByName(\"blockinput\").removeFromParent();\r\n        node.getChildByName(\"content\").getComponentInChildren(cc.Label).string = content;\r\n        canvas.addChild(node);\r\n        this.scheduleOnce(()=>{\r\n            node.removeFromParent();\r\n        }, duration);\r\n    }\r\n\r\n}","import EventManager from \"../core/event-manager\";\r\n\r\n\r\n\r\nexport enum State {\r\n    NONE = 0,\r\n    CACHING,\r\n    CACHED\r\n}\r\n\r\n\r\nexport default class Cacher {\r\n    private static _instance: Cacher = null;\r\n    static get instance() {\r\n        if (this._instance == null) {\r\n            this._instance = new Cacher();\r\n        }\r\n        return Cacher._instance;\r\n    }\r\n\r\n    mc_anims: {[key: number]: cc.AnimationClip[]} = {};\r\n    map: {[key: string]: any} = {};\r\n    \r\n    load() {\r\n        //@ mc animations\r\n        // let dirs = [\"rabbit\", \"penguin\", \"leaf\"];\r\n        // dirs.forEach((dir, i) => {\r\n        //     cc.loader.loadResDir(\r\n        //         dir, \r\n        //         cc.AnimationClip, \r\n        //         (err, clips) => {\r\n        //             this.mc_anims[i] = [...clips];\r\n        //         }\r\n        //     )\r\n        // })\r\n\r\n        //@ tilemap\r\n        cc.loader.loadRes(\"map/default\", (err, tmxAsset) => {\r\n            this.map[\"asset\"] = tmxAsset;\r\n            this.map[\"texture\"] = {};\r\n            let dirs = [\"map/sand\", \"map/ice\", \"map/grass\"];\r\n            dirs.forEach((dir, i) => {\r\n                cc.loader.loadRes(dir, (err, texture) => {\r\n                    this.map[\"texture\"][i] = texture;\r\n                })\r\n            })\r\n            EventManager.instance.dispatch(\"Resources-Cached\");\r\n        })\r\n\r\n        //@ loaded\r\n        //if (Object.keys(this.mc_anims).length == this.mapTextures.length) {\r\n        //    EventManager.instance.dispatch(\"Resources-Cached\");\r\n        //}\r\n\r\n    }\r\n}\r\n","const { ccclass, property } = cc._decorator;\r\n\r\nimport EventManager from './event-manager'\r\nimport { RandomUnique } from '../utils';\r\n\r\n@ccclass\r\nexport default class SoundManager {\r\n\r\n    private sounds: { [key: string]: cc.AudioClip } = {};\r\n    private playingSounds: { [key: string]: number } = {}\r\n\r\n    private static _instance: SoundManager = null;\r\n\r\n    private initialized: boolean = false;\r\n    private enable: boolean = true;\r\n    private effectEnable: boolean = true;\r\n    private musicEnable: boolean = true;\r\n    private DEBUG_LOG = false;\r\n\r\n    static get instance() {\r\n        if (SoundManager._instance == null) {\r\n            SoundManager._instance = new SoundManager();\r\n        }\r\n        return SoundManager._instance;\r\n    }\r\n\r\n    public get soundEnable() { return this.enable; }\r\n    setEnable(enable: boolean) {\r\n        this.enable = enable;\r\n        cc.sys.localStorage.setItem(\"Sound_enable\", enable ? 1 : 0);\r\n        this.setEffectEnable(enable);\r\n        this.setMusicEnable(enable);\r\n    }\r\n\r\n    public get soundEffectEnable() { return this.effectEnable; }\r\n    setEffectEnable(enable: boolean) {\r\n        this.effectEnable = enable;\r\n        cc.sys.localStorage.setItem(\"Sound_effect_enable\", enable ? 1 : 0);\r\n    }\r\n\r\n    public get soundMusicEnable() { return this.musicEnable; }\r\n    setMusicEnable(enable: boolean) {\r\n        this.musicEnable = enable;\r\n        cc.sys.localStorage.setItem(\"Sound_music_enable\", enable ? 1 : 0);\r\n    }\r\n\r\n    log(message) {\r\n        if (this.DEBUG_LOG) {\r\n            cc.log(message);\r\n        }\r\n    }\r\n\r\n    error(message) {\r\n        if (this.DEBUG_LOG) {\r\n            cc.error(message);\r\n        }\r\n    }\r\n\r\n    init() {\r\n        // load from resource\r\n        cc.loader.loadResDir('sounds', cc.AudioClip, (error, assets: cc.AudioClip[], urls: string[]) => {\r\n            if(urls.length > 0) {\r\n                assets.forEach((sound, index) => {\r\n                    this.sounds[sound.name] = sound;\r\n                });\r\n            }\r\n            this.initialized = true;\r\n            this.enable = cc.sys.localStorage.getItem(\"Sound_enable\") ? parseInt(cc.sys.localStorage.getItem(\"Sound_enable\")) == 1 : true;\r\n            this.effectEnable = cc.sys.localStorage.getItem(\"Sound_effect_enable\") ? parseInt(cc.sys.localStorage.getItem(\"Sound_effect_enable\")) == 1 : true;\r\n            this.musicEnable = cc.sys.localStorage.getItem(\"Sound_music_enable\") ? parseInt(cc.sys.localStorage.getItem(\"Sound_music_enable\")) == 1 : true;\r\n            cc.log(\"sound init\");\r\n            EventManager.instance.dispatch(\"Sound_initialized\");\r\n        });\r\n\r\n    }\r\n\r\n    playMusic(clipName: string, loop: boolean = true) {\r\n        if (!this.musicEnable || !this.initialized) return null;\r\n\r\n        clipName = clipName.toLowerCase();\r\n        if (this.sounds[clipName]) {\r\n            this.log('play music: ' + clipName);\r\n            let id = cc.audioEngine.playMusic(this.sounds[clipName], loop);\r\n            this.playingSounds[clipName] = id;\r\n            return id;\r\n        }\r\n        else {\r\n            this.error(\"playMusic - clipName: \" + clipName + \" not found\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n    playEffect(clipName: string, loop: boolean = false) {\r\n        if (!this.enable || !this.initialized) return null;\r\n\r\n        clipName = clipName.toLowerCase();\r\n        if (this.sounds[clipName]) {\r\n            this.log('play effect: ' + clipName);\r\n            let id = cc.audioEngine.playEffect(this.sounds[clipName], loop);\r\n            this.playingSounds[clipName] = id;\r\n            return id;\r\n        }\r\n        else {\r\n            this.error(\"playEffect - clipName: \" + clipName + \" not found\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n    playRandom(clipsName: string[], loop: boolean = false, effect: boolean = true) {\r\n        if (!this.enable || !this.initialized) return null;\r\n\r\n        let idx = Math.floor(Math.random() * clipsName.length);\r\n        let clipName = clipsName[idx].toLowerCase();\r\n        if (this.sounds[clipName]) {\r\n            this.log('play random: ' + clipName);\r\n            let id = null;\r\n            if (effect) {\r\n                id = this.playEffect(clipName, loop);\r\n            } else {\r\n                id = this.playMusic(clipName, loop);\r\n            }\r\n            this.playingSounds[clipName] = id;\r\n            return id;\r\n        }\r\n        else {\r\n            this.error(\"playRandom - clipName: \" + clipsName[idx] + \" not found\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    pause(clipName: string) {\r\n        if (!this.enable) return;\r\n\r\n        clipName = clipName.toLowerCase();\r\n        if (this.playingSounds[clipName] != undefined && cc.audioEngine.getState(this.playingSounds[clipName]) === cc.audioEngine.AudioState.PLAYING) {\r\n            cc.audioEngine.pause(this.playingSounds[clipName]);\r\n        } else {\r\n            this.error(\"Pause sound: \" + clipName + \" is not in playing list\");\r\n            delete this.playingSounds[clipName];\r\n        }\r\n    }\r\n\r\n    resume(clipName: string) {\r\n        if (!this.enable) return;\r\n\r\n        clipName = clipName.toLowerCase();\r\n        if (this.playingSounds[clipName] != undefined && cc.audioEngine.getState(this.playingSounds[clipName]) === cc.audioEngine.AudioState.PAUSED) {\r\n            cc.audioEngine.resume(this.playingSounds[clipName]);\r\n        } else {\r\n            this.error(\"Resume sound: \" + clipName + \" is not in pause list\");\r\n            delete this.playingSounds[clipName];\r\n        }\r\n    }\r\n\r\n    stop(clipName: string) {\r\n        if (!this.enable) return;\r\n\r\n        this.log(\"stop sound: \" + clipName);\r\n        clipName = clipName.toLowerCase();\r\n        if (this.playingSounds[clipName] != undefined) {\r\n            cc.audioEngine.stop(this.playingSounds[clipName]);\r\n            delete this.playingSounds[clipName];\r\n        } else {\r\n            this.error(\"Stop sound: \" + clipName + \" is not in playing list\");\r\n        }\r\n    }\r\n\r\n    isPlaying(clipName: string): boolean {\r\n        clipName = clipName.toLowerCase();\r\n        if (this.playingSounds[clipName] != undefined) {\r\n            let state = cc.audioEngine.getState(this.playingSounds[clipName]);\r\n            return state == cc.audioEngine.AudioState.PLAYING;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    pauseAll() {\r\n        cc.audioEngine.pauseAll();\r\n    }\r\n\r\n    resumeAll() {\r\n        if (!this.enable) return;\r\n\r\n        cc.audioEngine.resumeAll();\r\n    }\r\n\r\n    stopAll() {\r\n        if (!this.enable) return;\r\n\r\n        cc.audioEngine.stopAll();\r\n    }\r\n\r\n    /**\r\n     * set backgound music volume\r\n     * @param volume from 0 - 1.0\r\n     */\r\n    setMusicVolume(volume: number) {\r\n        if (!this.musicEnable) return;\r\n\r\n        cc.audioEngine.setMusicVolume(volume);\r\n    }\r\n\r\n    /**\r\n     * set effect sound volume\r\n     * @param volume from 0 - 1.0\r\n     */\r\n    setEffectVolume(volume: number) {\r\n        if (!this.effectEnable) return;\r\n\r\n        cc.audioEngine.setEffectsVolume(volume);\r\n    }\r\n\r\n    /**\r\n     * get the id of sound, to use with internal engin cc.audioEngine\r\n     * @param clipName \r\n     */\r\n    getSoundId(clipName: string): number {\r\n        clipName = clipName.toLowerCase();\r\n        return this.playingSounds[clipName];\r\n    }\r\n}\r\n","import PlayerRef from \"../../player-ref\";\r\nimport Game from \"../game\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SpecialSkill extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    uiRoot: cc.Node = null;\r\n\r\n    @property({type: cc.SpriteFrame})\r\n    skillFrames: cc.SpriteFrame[] = []\r\n\r\n    @property({type: cc.SpriteFrame})\r\n    normalFrames: cc.SpriteFrame[] = []\r\n\r\n    @property({type: cc.SpriteFrame})\r\n    bgFrames: cc.SpriteFrame[] = []\r\n\r\n    private skill: cc.Button = null;\r\n    private blockInput: cc.Node = null;\r\n\r\n    private skillSprite: cc.Sprite = null;\r\n    private bgSkillSprite: cc.Sprite = null;\r\n    private normalSprite: cc.Sprite = null;\r\n    private skillCooldown: cc.Label = null;\r\n\r\n    start() {\r\n        let fireBtn = this.uiRoot.getChildByName(\"button-fire\");\r\n        let skillBtn = this.uiRoot.getChildByName(\"button-skill\");\r\n        let firePad = this.uiRoot.getChildByName(\"fire-pad\");\r\n        let skillPad = this.uiRoot.getChildByName(\"skill-pad\");\r\n        \r\n        this.skillSprite = (skillBtn.active ? skillBtn.children[1] : skillPad.children[2]).getComponent(cc.Sprite);\r\n        this.bgSkillSprite = (skillBtn.active ? skillBtn.children[0] : skillPad.children[1]).getComponent(cc.Sprite);\r\n        this.normalSprite = (fireBtn.active ? fireBtn.children[1] : firePad.children[1]).getComponent(cc.Sprite);\r\n        this.skillCooldown = (skillBtn.active ? skillBtn.children[2] : skillPad.children[3]).getComponent(cc.Label);\r\n        this.skill = skillBtn.active ? skillBtn.children[1].getComponent(cc.Button) : null;\r\n        this.blockInput = skillPad.active ? skillPad.children[0] : null;\r\n    }\r\n    \r\n    setPlayerSkill() {\r\n        this.skillSprite.spriteFrame = this.skillFrames[PlayerRef.current.user];\r\n        this.bgSkillSprite.spriteFrame = this.bgFrames[PlayerRef.current.user];\r\n        this.normalSprite.spriteFrame = this.normalFrames[PlayerRef.current.bomb];\r\n    }\r\n\r\n    setData(skill: number, enable: boolean, cooldown?: any) {\r\n        this.skill && (this.skill.interactable = enable);\r\n        this.blockInput && (this.blockInput.active = !enable);\r\n        this.skillSprite.spriteFrame = this.skillFrames[skill];\r\n        this.skillSprite.node.color = enable ? cc.Color.WHITE : cc.Color.GRAY;\r\n        this.skillCooldown.node.active = !enable;\r\n        this.skillCooldown.string = cooldown;\r\n    }\r\n}","import PlayerRef from \"../../player-ref\";\r\nimport SequenceManager from \"./SequenceManager\"\r\nimport { SequenceNode } from \"./SequenceNode\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class squence_first_launch extends cc.Component\r\n{\r\n    onLoad ()\r\n    {\r\n        var sm = this.getComponent(SequenceManager);\r\n        var prev = false;\r\n        if(PlayerRef.current.first_launch_step < 1)\r\n        {\r\n            sm.push(this.node.children[0].getComponent(SequenceNode));\r\n            prev = true;\r\n        }\r\n        // if(PlayerRef.current.first_launch_step < 2)\r\n        // {\r\n        //     if(prev)    sm.push(this.node.children[1].getComponent(SequenceNode));\r\n        //     sm.push(this.node.children[2].getComponent(SequenceNode));\r\n        //     prev = true;\r\n        // }console.log(\"squence_first_launch - onLoad - \" + PlayerRef.current.first_launch_step);\r\n    }\r\n}\r\n","// this class use as a mail box meassage to exchange message (ex: send msg with 2 scene)\r\n// if we send the same message to same people, the lastest will override the others\r\n\r\nexport default class TransportMessage {\r\n\r\n    private static _instance: TransportMessage = null;\r\n    public static get instance(): TransportMessage {\r\n        if(this._instance == null) {\r\n            this._instance = new TransportMessage();\r\n        }\r\n\r\n        return this._instance;\r\n    }\r\n\r\n    private _messages: {[key: string]: {[key: string]: string}} = {};\r\n\r\n    public send(to: string, message: string, content: string = \"\") {\r\n        if(!this._messages[to]) this._messages[to] = {};\r\n\r\n        this._messages[to][message] = content;\r\n    }\r\n\r\n    public get(name: string, message: string, deleteAfterRead: boolean = true): string|null {\r\n\r\n        let messageContent = null;\r\n        if(this._messages[name] && this._messages[name][message] != null) {\r\n            messageContent = this._messages[name][message].slice(0, this._messages[name][message].length);\r\n            if (deleteAfterRead)\r\n                delete this._messages[name][message];\r\n        }   \r\n        return messageContent;\r\n    }\r\n}","import Loader from \"../core/loader\";\r\nimport Player from \"./player\";\r\nimport {PlayerAction, PlayerStatus} from \"./player\";\r\nimport Bomb from \"./bomb\";\r\nimport Client, { ClientListener } from \"./multiplayer/client\";\r\nimport { GameInfo, GameInitInfo, GameData, LbInfo, NotifyInfo, DeathInfo, BombInfo } from \"./multiplayer/shared/IMessageData\";\r\nimport PlayerRef, { DesignType } from \"../player-ref\";\r\nimport CameraControl from \"./camera-control\";\r\nimport PlayerControl from \"./player-control\";\r\n//import Leaderboard from \"./ui/leaderboard\";\r\nimport EventManager from \"../core/event-manager\"\r\nimport Notifier from \"./notifier\";\r\n//import MiniMap from \"./ui/minimap\";\r\nimport ExpBuble from \"./exp-buble\";\r\nimport PlayerControlLocal from \"./player-control-local\";\r\nimport NetComponent from \"./net-component\";\r\nimport Popup from \"../core/popup\";\r\nimport Cacher from \"./resources-cacher\";\r\n//import SpecialSkill from \"./ui/special-skill\";\r\nimport {ConfigGame} from \"./ConfigGame\";\r\nimport SoundManager from \"../core/sound-manager\";\r\nimport Localization from \"../core/localization\";\r\n\r\n\r\nimport Game from \"./game\";\r\nimport { Utils } from \"../utils\";\r\n\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n\r\n\r\nexport enum TUTORIAL_STATE {\r\n    Tutorial_move = 0,\r\n    Tutorial_fire,\r\n    Tutorial_skill,\r\n    Tutorial_shield,\r\n    Tutorial_finish,\r\n}\r\n\r\n\r\nexport enum TUTORIAL_SUB_STATE {\r\n    Tutorial_default = 0,\r\n    Tutorial_stopPoint,\r\n    Tutorial_checkdoAction,\r\n    Tutorial_subStepMax\r\n}\r\n\r\n@ccclass\r\nexport default class Tutorial extends cc.Component {\r\n\r\n\r\n\r\n    @property(cc.Node)\r\n    worldMap: cc.Node = null;\r\n\r\n    @property(cc.Prefab)\r\n    bombPrefab: cc.Prefab = null;\r\n\r\n    @property({type: cc.Prefab})\r\n    playerPrefabs: cc.Prefab[] = [];\r\n\r\n    @property(cc.Prefab)\r\n    targetPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Node)\r\n    btn_playnow: cc.Node = null;\r\n\r\n    TutorialPlayer: Player;\r\n    BOTplayer: Player;\r\n\r\n    localTarget: cc.Node = null;\r\n    \r\n    TutorialPopup:cc.Node = null;\r\n\r\n    TutorialHand: cc.Node = null;\r\n    handPos: cc.Vec2 = null;\r\n\r\n    players_list: { [key: number]: Player } = {};\r\n    //bombs: { [key: number]: Bomb } = {};\r\n    bubles: { [key: number]: ExpBuble } = {};\r\n    \r\n    //client: Client = null;\r\n\r\n    AIAnim: cc.Animation;\r\n\r\n    // game info\r\n    worldSize: cc.Vec2 = null;\r\n    playerSize: cc.Vec2 = null;\r\n    bombRange: number = ConfigGame.BOMB_LENGTH;\r\n\r\n    playerSpeed: number = 0;\r\n    textshow: string= \"\";\r\n    isEndStopPoint:boolean = false;\r\n    animStopPoint: cc.ActionInterval = null;\r\n    performAction: number = 0;\r\n    //performMax: number = 1;\r\n    botFireCount: number =0;\r\n\r\n\r\n\r\n    private block_firepad: cc.Node = null;\r\n    private block_touchzone: cc.Node = null;\r\n    private block_skillpad: cc.Node = null;\r\n\r\n    private btn_firepad: cc.Node = null;\r\n    private btn_dpad: cc.Node = null;\r\n    private btn_skillpad: cc.Node = null;\r\n\r\n    static instance: Tutorial = null;\r\n    static tutorial_status: number = 0;\r\n    static tutorial_sub_status: number = 0;\r\n    private state_comepleted: number = -1;\r\n\r\n    private lockControl: boolean = false;\r\n    private collisionManager: cc.CollisionManager = null;\r\n\r\n    private isWaitingReleaseDPad: boolean = false;\r\n    onLoad() {\r\n        if (!Loader.loaded) return;      // prevent run when loader init\r\n        //load map\r\n        let map = this.worldMap.getChildByName(\"tMap\");\r\n        let tilemap = map.addComponent(cc.TiledMap);\r\n        tilemap.tmxAsset = Cacher.instance.map[\"asset\"];\r\n        tilemap.tmxAsset.textures[0] = Cacher.instance.map[\"texture\"][PlayerRef.current.map];\r\n        map.active = true;\r\n\r\n        // cc.loader.loadRes(\"map/default\", (err, tmxAsset) => {\r\n        //     if (err) {\r\n        //         cc.log(\"fail to load tilemap\");\r\n        //         return;\r\n        //     }\r\n        //     let tilemap = map.addComponent(cc.TiledMap);\r\n        //     tilemap.tmxAsset = tmxAsset;\r\n        //     let textures = [\"map/sand\", \"map/ice\", \"map/grass\"];\r\n        //     cc.loader.loadRes(textures[PlayerRef.current.map], (err, texture) => {\r\n        //         if (err) {\r\n        //             cc.log(\"fail to load texture\")\r\n        //             return;\r\n        //         }\r\n        //         tilemap.tmxAsset.textures = [texture];\r\n        //         map.active = true;\r\n        //     })\r\n        // })\r\n\r\n        let tmp:cc.SpriteFrame;\r\n        //console.log(\"Nhan --> Default get --> PlayerRef.current.bomb = \" + PlayerRef.current.user);\r\n        if (PlayerRef.current.user == 1)\r\n        {\r\n            let indicator_icon = cc.find(\"/Canvas/uiRoot/ice\");\r\n            tmp =  indicator_icon.getComponent(cc.Sprite).spriteFrame;\r\n        }\r\n        else if (PlayerRef.current.user == 2)\r\n        {\r\n            let indicator_icon = cc.find(\"/Canvas/uiRoot/grass\");\r\n            tmp =  indicator_icon.getComponent(cc.Sprite).spriteFrame;\r\n        }\r\n\r\n        if (PlayerRef.current.user != 0)\r\n        {\r\n            let bom_ctr_icon = cc.find(\"/Canvas/uiRoot/skill-pad/indicator\");\r\n            bom_ctr_icon.getComponent(cc.Sprite).spriteFrame = tmp;\r\n        }\r\n\r\n        Tutorial.instance = this;\r\n\r\n        this.TutorialPopup = cc.find(\"/Canvas/uiRoot/tutorial_text/text\");\r\n        this.TutorialPopup.active = false;\r\n\r\n        this.TutorialHand = this.node.getChildByName(\"hand\");\r\n        this.TutorialHand.active = false;\r\n    }\r\n\r\n    resetTutorialState()\r\n    {\r\n        Tutorial.tutorial_status = TUTORIAL_STATE.Tutorial_move;\r\n        Tutorial.tutorial_sub_status = TUTORIAL_SUB_STATE.Tutorial_default;\r\n        Tutorial.instance.state_comepleted = -1;\r\n        Tutorial.instance.performAction = 0;\r\n    }\r\n\r\n    start() {\r\n        if (!Loader.loaded) return;      // prevent run when loader init\r\n        \r\n        if (!Game.isTutorial)\r\n        {\r\n            this.gotoMainMenu();\r\n            return;\r\n        }\r\n        Popup.instance.setTarget(this.node.getChildByName(\"uiRoot\")); //set target\r\n\r\n        this.collisionManager = cc.director.getCollisionManager();\r\n        this.collisionManager.enabled = true;\r\n        //this.collisionManager.enabledDebugDraw = true;\r\n        this.collisionManager.enabledDebugDraw = false;\r\n        \r\n        this.initEntities();\r\n        \r\n        // generate popup\r\n        \r\n        if (!this.block_skillpad)\r\n            this.block_skillpad = cc.find(\"/Canvas/uiRoot/skill-pad/block_input\");\r\n        if (!this.block_touchzone)\r\n            this.block_touchzone = cc.find(\"/Canvas/uiRoot/touchZone/block_input\");\r\n        if (!this.block_firepad)\r\n            this.block_firepad = cc.find(\"/Canvas/uiRoot/fire-pad/block_input\");\r\n\r\n        if (!this.btn_firepad)\r\n            this.btn_firepad = cc.find(\"/Canvas/uiRoot/fire-pad\");\r\n        if (!this.btn_skillpad)\r\n            this.btn_skillpad = cc.find(\"/Canvas/uiRoot/skill-pad\");\r\n        if (!this.btn_dpad)\r\n            this.btn_dpad = cc.find(\"/Canvas/uiRoot/d-pad\");\r\n        \r\n        this.setlockControl(true);\r\n        // let tmp:cc.Node = cc.find(\"/Canvas/uiRoot/skill-pad/indicator\");\r\n        // let m_sprite = tmp.getComponent(cc.Sprite);\r\n        // m_sprite.\r\n        SoundManager.instance.playMusic(\"m_ap\");\r\n        \r\n    }\r\n\r\n    update(dt)\r\n    {\r\n        if (!Loader.loaded || !Game.isTutorial) return;      // prevent run when loader init\r\n\r\n        if (CameraControl.instance.getTarget() == null && this.worldMap.getChildByName(\"Main MC\"))\r\n        {\r\n            //cc.log (\"Nhan --> find Maain MC ok\");\r\n            CameraControl.instance.setTarget(this.TutorialPlayer.node);\r\n        }\r\n\r\n        // cc.log (\"Nhan --> this.state_comepleted:\" + this.state_comepleted);\r\n        // cc.log (\"Nhan --> Tutorial.tutorial_status:\" + Tutorial.tutorial_status);\r\n\r\n        if (this.state_comepleted == Tutorial.tutorial_status)\r\n        {\r\n            this.updateTutorialStatus();\r\n        }\r\n        this.UpdateTutorial_Step();\r\n\r\n        // For update auto move for BOT\r\n        if (this.BOTplayer.action != PlayerAction.Fire && this.BOTplayer.bombable)\r\n            this.BOTplayer.setTargetPos(this.TutorialPlayer.node.position);\r\n\r\n    }\r\n\r\n\r\n    initEntities()\r\n    {    \r\n        //this.worldSize = cc.v2(1792,1792);\r\n        this.worldSize = cc.v2(ConfigGame.WORLD_WIDTH,ConfigGame.WORLD_HEIGHT); \r\n        // add MC\r\n        let myPlayer = cc.instantiate(this.playerPrefabs[PlayerRef.current.user]).getComponent(Player);\r\n        myPlayer.init({ id: 0,x: 0, y : 0, level: 1, exp: 0, health: 70, name: PlayerRef.current.name, cskin: PlayerRef.current.user });\r\n        // Nhan note: it make player disappear\r\n        myPlayer.node.addComponent(PlayerControlLocal).init(null);\r\n        //myPlayer.initClips(PlayerRef.current.user);\r\n        myPlayer.node.addComponent(cc.CircleCollider);\r\n        myPlayer.node.getComponent(cc.CircleCollider).radius = myPlayer.node.width/2;\r\n        myPlayer.node.getComponent(cc.CircleCollider).tag = 0;\r\n        myPlayer.collider = myPlayer.node.getComponent(cc.CircleCollider);\r\n        \r\n        myPlayer.node.name=\"Main MC\";\r\n        this.worldMap.addChild(myPlayer.node);\r\n        this.TutorialPlayer = myPlayer;\r\n        \r\n       // this.TutorialPlayer.updatePlayerInfo(0, 0,255, 70, 1, 0, false, true, true, true, []);\r\n        this.TutorialPlayer.setServerData({id: 0, x: 0, y: 0, cskin: PlayerRef.current.user, opacity: 255, direction: 0, action:PlayerAction.Idle,health:70,level:1,exp:0, vulnerable:true, death:false, buff: 0,buffs:[], bombable: true,skillable:true, cooldown:0,  lastInputSeq:0});\r\n        let playerBomb = cc.instantiate(this.bombPrefab).getComponent(Bomb);\r\n        this.TutorialPlayer.setBombAnim(playerBomb);\r\n        //CameraControl.instance.setTarget(this.TutorialPlayer.node);\r\n\r\n        // this.TutorialPlayer.m_bomb.node.addComponent(cc.CircleCollider);\r\n        // this.TutorialPlayer.m_bomb.node.getComponent(cc.CircleCollider).radius = 1;\r\n        // this.TutorialPlayer.m_bomb.node.getComponent(cc.CircleCollider).tag = 2;\r\n        // this.TutorialPlayer.m_bomb.node.getComponent(cc.CircleCollider).enabled = false;\r\n        // this.TutorialPlayer.m_bomb.collider = this.TutorialPlayer.m_bomb.node.getComponent(cc.CircleCollider);\r\n\r\n        let botSkin = Math.floor(Math.random() * 3);\r\n        let botPlayer = cc.instantiate(this.playerPrefabs[botSkin]).getComponent(Player);\r\n        botPlayer.init({ id: 1,x: 450, y : 0, level: 1, exp: 0, health: 70, name: \"Player 1\", cskin:  botSkin});\r\n\r\n        botPlayer.isRobot = true;\r\n        botPlayer.autoMove = true;\r\n        botPlayer.autoFire = !true;\r\n\r\n        botPlayer.setTargetPos(this.TutorialPlayer.node.position);\r\n        botPlayer.node.addComponent(PlayerControl);\r\n        \r\n        //let temp = Math.floor((Math.random() * 3));\r\n        //botPlayer.initClips(temp);\r\n\r\n        botPlayer.node.addComponent(cc.CircleCollider);\r\n        botPlayer.node.getComponent(cc.CircleCollider).radius = botPlayer.node.width/2;\r\n        botPlayer.node.getComponent(cc.CircleCollider).tag = 0;\r\n        botPlayer.node.getComponent(cc.CircleCollider).enabled = true;\r\n        botPlayer.collider = botPlayer.node.getComponent(cc.CircleCollider);\r\n        \r\n        \r\n        this.worldMap.addChild(botPlayer.node);\r\n        this.BOTplayer = botPlayer;\r\n        this.BOTplayer.setServerData({id: 1, x: 450, y: 0, cskin: PlayerRef.current.user, opacity: 255, direction: 0, action:PlayerAction.Idle,health:70,level:0,exp:0, vulnerable:true, death:false, buff: 0,buffs:[], bombable: true,skillable:true, cooldown:0,  lastInputSeq:0});\r\n        \r\n        let botBomb = cc.instantiate(this.bombPrefab).getComponent(Bomb);\r\n        this.BOTplayer.setBombAnim(botBomb);\r\n\r\n        // this.BOTplayer.m_bomb.node.addComponent(cc.CircleCollider);\r\n        // this.BOTplayer.m_bomb.node.getComponent(cc.CircleCollider).radius = 1;\r\n        // this.BOTplayer.m_bomb.node.getComponent(cc.CircleCollider).tag = 2;\r\n        // this.BOTplayer.m_bomb.node.getComponent(cc.CircleCollider).enabled = false;\r\n        // this.BOTplayer.m_bomb.collider = this.TutorialPlayer.m_bomb.node.getComponent(cc.CircleCollider);\r\n\r\n        this.localTarget = cc.instantiate(this.targetPrefab);\r\n        this.localTarget.active = false;\r\n        this.worldMap.addChild(this.localTarget);\r\n\r\n        //this.generateBomb(this.TutorialPlayer.id);\r\n    }\r\n\r\n    numofBomb:number = 0;\r\n    //generateBomb(startpos_x: number, startpos_y: number, endpos_x: number, endpos_y: number, bombid: number, bombstyle: number)\r\n    generateBomb(bombid: number): Bomb\r\n    {\r\n        let bomb = cc.instantiate(this.bombPrefab).getComponent(Bomb); \r\n        return bomb;\r\n    }\r\n\r\n\r\n    updateLocalTarget(direction: number, range: number) \r\n    {\r\n        if (direction > -1 && range > 0) {\r\n            let len = range * this.bombRange / 100;\r\n            let rad = direction * Math.PI / 180;\r\n            let x = this.TutorialPlayer.node.getPosition().x + Math.round(len * Math.cos(rad));\r\n            let y = this.TutorialPlayer.node.getPosition().y + Math.round(len * Math.sin(rad));\r\n            this.localTarget.setPosition(x, y);\r\n            this.localTarget.active = true;\r\n            //if (this.TutorialPlayer.bombable)\r\n                this.TutorialPlayer.m_bomb.setEndPos(x, y);\r\n\r\n            if ((Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_fire\r\n                // || Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill\r\n                )\r\n                && Tutorial.tutorial_sub_status == TUTORIAL_SUB_STATE.Tutorial_checkdoAction\r\n            )\r\n            {\r\n                if (Math.abs(this.localTarget.position.x - this.TutorialPlayer.node.position.x) > 10\r\n                    || Math.abs(this.localTarget.position.y - this.TutorialPlayer.node.position.y) > 10\r\n                    )\r\n                    {\r\n                        this.performAction = 1;\r\n                    }\r\n            }\r\n        }\r\n        else {\r\n            this.localTarget.active = false;\r\n            if ((Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_fire\r\n                    // || Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill\r\n                    )\r\n                    && Tutorial.tutorial_sub_status == TUTORIAL_SUB_STATE.Tutorial_checkdoAction\r\n                    && this.performAction == 1\r\n                )\r\n                this.performAction = 2;\r\n            \r\n            if (this.TutorialPlayer.action == PlayerAction.Fire && this.TutorialPlayer.bombable)\r\n            {\r\n                if (Game.USE_DYNAMIC_BOMB)\r\n                {\r\n                    if (this.TutorialPlayer.m_bomb.getEndPos() == null)\r\n                        this.TutorialPlayer.m_bomb.setEndPos(this.TutorialPlayer.node.position.x, this.TutorialPlayer.node.position.y +  + ConfigGame.PLAYER_HEIGHT);\r\n                }\r\n                \r\n                this.TutorialPlayer.m_bomb.setStateData({id: this.TutorialPlayer.id, x: this.TutorialPlayer.node.position.x, y: this.TutorialPlayer.node.position.y + ConfigGame.PLAYER_HEIGHT , percent: 100, death: false,exploded: false,opacity:255, skin: PlayerRef.current.bomb});\r\n                this.TutorialPlayer.m_bomb.setExplodeStatus(false);\r\n                this.TutorialPlayer.bombable = false;            \r\n            }\r\n        }\r\n    }\r\n    \r\n    updateBombSkill(skill: number)\r\n    {\r\n        // tag = 0 --> Player\r\n        // tag = 1 --> Obstacle\r\n        // tag = 2 --> Bomb\r\n        // tag = 3 --> special Bomb\r\n        this.TutorialPlayer.m_bomb.collider.tag = skill;\r\n    }\r\n\r\n\r\n    resetTempleStatus()\r\n    {\r\n        //cc.log(\"Nhan --> call resetTempleStatus\");\r\n        this.setlockControl(true);\r\n        this.TutorialPlayer.setPosition(0, 0);\r\n        this.TutorialPlayer.setServerData({id: 0, x: 0, y: 0, cskin: PlayerRef.current.user, opacity: 255, direction: 0, action:PlayerAction.Idle,health:70,level:1,exp:0, vulnerable:true, death:false, buff: 0,buffs:[], bombable: true,skillable:true, cooldown:0,  lastInputSeq:0});\r\n        if (this.TutorialPlayer.collider)\r\n            this.TutorialPlayer.collider.enabled = true;\r\n        this.BOTplayer.setPosition(480, 0);\r\n        this.BOTplayer.setServerData({id: 1, x: 480, y: 0, cskin: PlayerRef.current.user, opacity: 255, direction: 0, action:PlayerAction.Idle,health:70,level:1,exp:0, vulnerable:true, death:false, buff: 0,buffs:[], bombable: true,skillable:true, cooldown:0,  lastInputSeq:0});\r\n        if (this.BOTplayer.collider)\r\n            this.BOTplayer.collider.enabled = true;\r\n        this.BOTplayer.autoFire = false;\r\n        this.performAction = 0;\r\n        this.botFireCount = 0;\r\n    }\r\n\r\n\r\n    setlockControl(lock: boolean)\r\n    {\r\n        //cc.log (\"Nhan --> in lockControl--> block_touchzone.active = \"+ this.block_touchzone.active);\r\n        if (this.lockControl == lock) return;\r\n        this.lockControl = lock;\r\n\r\n        if (this.lockControl)\r\n        {\r\n            this.TutorialHand.active = false;\r\n            if (this.block_skillpad)\r\n                this.block_skillpad.active = true;\r\n            if (this.block_touchzone)\r\n                this.block_touchzone.active = true;\r\n            if (this.block_firepad)\r\n                this.block_firepad.active = true;\r\n\r\n            if (this.btn_firepad)\r\n                this.btn_firepad.opacity = 128;\r\n            if (this.btn_skillpad)\r\n                this.btn_skillpad.opacity = 128;\r\n            if (this.btn_dpad)\r\n                this.btn_dpad.opacity = 128;\r\n        }\r\n        else\r\n        {\r\n            switch(Tutorial.tutorial_status)\r\n            {\r\n                case TUTORIAL_STATE.Tutorial_move:\r\n                    if (this.block_touchzone)\r\n                        this.block_touchzone.active = this.lockControl;  //// Nhan note: allow moving main MC\r\n                    if (this.btn_dpad)\r\n                    {\r\n                        this.btn_dpad.opacity = 255;\r\n                        let index = this.btn_dpad.getChildByName(\"indicator\");\r\n                        if (index)\r\n                            index.opacity = 255;\r\n                    }\r\n                    break;\r\n                case TUTORIAL_STATE.Tutorial_fire:\r\n\r\n                    if (this.block_firepad)\r\n                        this.block_firepad.active = this.lockControl;\r\n                    if (this.btn_firepad)\r\n                        this.btn_firepad.opacity = 255;\r\n\r\n                    break;\r\n                case TUTORIAL_STATE.Tutorial_skill:\r\n                    if (this.block_touchzone)\r\n                        this.block_touchzone.active = this.lockControl;\r\n\r\n                    if (this.block_skillpad)\r\n                        this.block_skillpad.active = this.lockControl;\r\n                    if (this.btn_skillpad)\r\n                        this.btn_skillpad.opacity = 255;\r\n\r\n                    if (this.btn_dpad)\r\n                    {\r\n                        this.btn_dpad.opacity = 255;\r\n                        let index = this.btn_dpad.getChildByName(\"indicator\");\r\n                        if (index)\r\n                            index.opacity = 255;\r\n                    }\r\n                    break;\r\n                case TUTORIAL_STATE.Tutorial_shield:\r\n                    if (this.block_touchzone)\r\n                        this.block_touchzone.active = true; //this.lockControl;\r\n\r\n                    if (this.block_skillpad)\r\n                        this.block_skillpad.active = true;//this.lockControl;\r\n                    if (this.btn_skillpad)\r\n                        this.btn_skillpad.opacity = 128;\r\n\r\n                    if (this.block_firepad)\r\n                        this.block_firepad.active = true;//this.lockControl;\r\n                    if (this.block_firepad)\r\n                        this.block_firepad.opacity = 128;\r\n                    break;\r\n                case TUTORIAL_STATE.Tutorial_finish:\r\n                    if (this.block_skillpad)\r\n                        this.block_skillpad.active = true;\r\n                    if (this.btn_skillpad)\r\n                        this.btn_skillpad.opacity = 128;\r\n                    if (this.block_touchzone)\r\n                        this.block_touchzone.active = true;\r\n\r\n                    if (this.btn_dpad)\r\n                        this.btn_dpad.opacity = 128;\r\n                    if (this.block_firepad)\r\n                        this.block_firepad.active = true;\r\n                    if (this.btn_firepad)\r\n                        this.btn_firepad.opacity = 128;\r\n\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    gotoMainMenu(){\r\n        // PlayerRef.current.istutorial = 0; \r\n        let tmp = +PlayerRef.current.user;\r\n        switch (tmp)\r\n        {\r\n            case DesignType.Fire:\r\n                PlayerRef.current.isRabitTutorial = 0\r\n                break;\r\n            case DesignType.Grass:\r\n                PlayerRef.current.isLeafTutorial = 0;\r\n                break;\r\n            case DesignType.Ice:\r\n                PlayerRef.current.isPenguinTutorial = 0;\r\n                break;\r\n            default:\r\n                //cc.log (\"Nhan --> Tutorial --> gotoMainMenu --> default\");\r\n                break;\r\n        }\r\n        Game.isTutorial = false; \r\n        Tutorial.instance.resetTutorialState();\r\n        // cc.director.loadScene('main-menu');\r\n        cc.director.loadScene('game');\r\n        Popup.instance.setTarget(null);\r\n\r\n    }\r\n    // gotoGamePlay(){\r\n    //     PlayerRef.current.istutorial = 0;\r\n\t// \tif (PlayerRef.current.istutorial == 0)\r\n\t// \t\tGame.isTutorial = false; \r\n    //     cc.director.loadScene('game');\r\n    //     //Popup.instance.unscheduleAllCallbacks();\r\n    //     Popup.instance.setTarget(null);\r\n    //     //this.node.removeAllChildren(); crash\r\n    // }\r\n\r\n    updateTutorialStatus()\r\n    {\r\n        // cc.log(\"Nhan --> call updateTutorialStatus --> Tutorial.tutorial_status=\"+ Tutorial.tutorial_status);\r\n        // cc.log(\"Nhan --> call updateTutorialStatus --> this.state_comepleted=\"+ this.state_comepleted);\r\n        if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_finish)\r\n        {\r\n            this.TutorialPopup.getComponent(cc.Label).string = \"\";\r\n            if(Tutorial.tutorial_sub_status == 0)\r\n            { \r\n                Tutorial.tutorial_sub_status = 4;\r\n                let ui_node = this.node.getChildByName(\"uiRoot\")\r\n                Popup.instance.showInfoPopup(\"Thank you for playing tutorial.\\nEnjoy the game.\", this.gotoMainMenu.bind(this), false);\r\n                let popup_node = ui_node.getChildByName(\"final_Info_dialog\");\r\n                if (popup_node)\r\n                {\r\n                    cc.log(\"Can find popup_node\");\r\n                    let content = popup_node.getChildByName(\"info-content\");\r\n                    let cancelbtn = content.getChildByName(\"cancelbutton\");\r\n                    let textbtn = cancelbtn.getChildByName(\"exit\");\r\n                    let label = textbtn.getComponent(cc.Label);\r\n                    label.string = \"Play\";\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            Tutorial.tutorial_status++;\r\n            Tutorial.tutorial_sub_status = 0;\r\n        }\r\n        //cc.log(\"Nhan --> 1 call updateTutorialStatus --> Tutorial.tutorial_status=\"+ Tutorial.tutorial_status);\r\n        this.resetTempleStatus();\r\n    }\r\n\r\n    UpdateTutorial_Step()\r\n    {\r\n        let bot_x = this.BOTplayer.node.position.x;\r\n        let bot_y = this.BOTplayer.node.position.y;\r\n        let mc_x = this.TutorialPlayer.node.position.x;\r\n        let mc_y = this.TutorialPlayer.node.position.y;\r\n        let tmp = (mc_x - bot_x)*(mc_x - bot_x) + (mc_y - bot_y)*(mc_y - bot_y);\r\n        let distance = Math.sqrt(tmp);\r\n \r\n        if (Tutorial.tutorial_status ==  TUTORIAL_STATE.Tutorial_move)\r\n        {\r\n            this.textshow = \"Touch and slide virtual D-pad \\n to move main character.\";\r\n            let tmp = cc.find(\"/Canvas/uiRoot/d-pad\");\r\n            this.handPos = tmp.position;\r\n            this.UpdateTutorial_SubStep(\"/Canvas/uiRoot/d-pad\", \r\n                \"Touch and slide virtual D-pad \\n to move main character.\",\r\n                \"Touch and slide virtual D-pad \\n to move main character.\"\r\n                );\r\n            ///////// ---------- Do Action ---------- /////////\r\n            if (this.TutorialPlayer.action == PlayerAction.Move)\r\n                this.isWaitingReleaseDPad = true;\r\n            if (this.TutorialPlayer.action == PlayerAction.Idle && this.isWaitingReleaseDPad && this.performAction == 1)\r\n            {\r\n                this.isWaitingReleaseDPad = false;\r\n                Tutorial.instance.state_comepleted = TUTORIAL_STATE.Tutorial_move;\r\n            }\r\n        }\r\n        else if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_fire)\r\n        {\r\n            this.textshow = \"Press and hold the button \\n to increase a buble range.\";\r\n            let tmp = cc.find(\"/Canvas/uiRoot/fire-pad\");\r\n            this.handPos = tmp.position;\r\n            this.UpdateTutorial_SubStep(\"/Canvas/uiRoot/fire-pad\", \r\n                \"Press and hold the button \\n to increase a buble range.\",\r\n                \"Release your finger to\\n throw a jelly Balloon.\"\r\n                );\r\n\r\n            ///////// ---------- Do Action ---------- /////////\r\n            if (this.BOTplayer.health <= 0 || this.TutorialPlayer.health <= 0)\r\n                Tutorial.instance.state_comepleted = TUTORIAL_STATE.Tutorial_fire;\r\n        }\r\n        else if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill)\r\n        {\r\n            // let tmp = cc.find(\"/Canvas/uiRoot/skill-pad\");\r\n            // this.handPos = tmp.position;\r\n            // this.UpdateTutorial_SubStep(\"/Canvas/uiRoot/skill-pad\", \r\n            //     \"<color=#0fffff>Each character will have \\n a specific special skill.</color>\",\r\n            //     \"<color=#0fffff>Touch this button \\n to perform special skill.</color>\"\r\n            //     );\r\n            \r\n            // check condition for completed \r\n            // Nhan note: change active skill (throwing special bomb) to passive skill (speed, shield, invisible)\r\n            // if (this.BOTplayer.health <= 0)\r\n            //     Tutorial.instance.state_comepleted = TUTORIAL_STATE.Tutorial_skill;\r\n            let tmp = cc.find(\"/Canvas/uiRoot/skill-pad\");\r\n            this.handPos = tmp.position;\r\n            if (PlayerRef.current.user == DesignType.Grass)\r\n            {\r\n                this.UpdateTutorial_SubStep(\"/Canvas/uiRoot/skill-pad\", \r\n                    \"Each character will have \\n a specific special skill.\",\r\n                    \"Touch this button \\n to perform special skill.\\n You are invisible but \\nyou still take damge.\"\r\n                    );\r\n            }\r\n            else{\r\n                this.UpdateTutorial_SubStep(\"/Canvas/uiRoot/skill-pad\", \r\n                    \"Each character will have \\n a specific special skill.\",\r\n                    \"Touch this button \\n to perform special skill.\"\r\n                    );\r\n            }\r\n\r\n            if (this.performAction == 4)    //if (this.performAction == 3)\r\n                Tutorial.instance.state_comepleted = TUTORIAL_STATE.Tutorial_skill;\r\n\r\n        }\r\n        else if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_shield)\r\n        {\r\n            \r\n            this.UpdateTutorial_SubStep(\"\", \r\n            \"A shield is activated \\nautomatically in 30 seconds \\nwhen starting a match.\",\r\n            \"Touch the screen to continue.\"\r\n            );\r\n            ///////// ---------- Do Action ---------- /////////\r\n            \r\n            if (this.TutorialPlayer.numofBombReceive == 5)\r\n            {\r\n                this.performAction = 2;\r\n                this.BOTplayer.autoFire = false;\r\n                this.TutorialPlayer.numofBombReceive ++;\r\n\r\n                // Enable touch\r\n                if (this.block_touchzone)\r\n                    this.block_touchzone.active = false;\r\n            }\r\n            if (this.performAction == 4 || this.BOTplayer.health <= 0)  //if (this.performAction == 3)\r\n                Tutorial.instance.state_comepleted = TUTORIAL_STATE.Tutorial_shield;\r\n        }\r\n        else if (Tutorial.tutorial_status = TUTORIAL_STATE.Tutorial_finish)\r\n        {\r\n                Tutorial.instance.state_comepleted = TUTORIAL_STATE.Tutorial_finish;\r\n        }\r\n    }\r\n\r\n    UpdateTutorial_SubStep(controlname:string, text1: string, text2: string)\r\n    {\r\n        //cc.log(\"Nhan 0 --> tutorial_sub_status = \" + Tutorial.tutorial_sub_status);\r\n        switch (Tutorial.tutorial_sub_status)\r\n        {\r\n            case TUTORIAL_SUB_STATE.Tutorial_default:\r\n                if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_shield)\r\n                {\r\n                    //cc.log(\"Nhan active shield in tutorial shield MODE\");\r\n                    this.TutorialPlayer.invulnerable = false;\r\n                    this.TutorialPlayer.init({ id: 0,x: 0, y : 0, level: 1, exp: 0, health: 70, name: PlayerRef.current.name });\r\n                    this.TutorialPlayer.effectsNode.children[0].active = true;\r\n                }\r\n\r\n                this.TutorialPopup.active = true;\r\n                this.TutorialPopup.getComponent(cc.Label).string = text1;\r\n                \r\n                if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_shield\r\n                    || Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill\r\n                    )\r\n                {\r\n                    this.BOTplayer.autoFire = true;\r\n                }\r\n\r\n                Tutorial.tutorial_sub_status ++;\r\n \r\n                break;\r\n            case TUTORIAL_SUB_STATE.Tutorial_stopPoint:\r\n            if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_shield)\r\n                {\r\n                    Tutorial.tutorial_sub_status ++;\r\n                }\r\n                \r\n                //let tmt = this.TutorialHand.getChildByName(\"mask\");\r\n                \r\n                if (this.animStopPoint == null)\r\n                {\r\n                    this.isEndStopPoint = true;\r\n                    if (controlname == \"\")\r\n                    {\r\n                        //Tutorial.tutorial_sub_status ++;\r\n                        break;\r\n                    }\r\n                    let ctr_tmp = cc.find(controlname);\r\n                    ctr_tmp.opacity = 255;\r\n                    this.TutorialHand.active = true;\r\n                    this.TutorialHand.position = this.handPos;\r\n\r\n                    if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_fire || Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill)\r\n                    {\r\n                        //tmt.active = false;\r\n                        this.TutorialHand.getChildByName(\"hand_touch\").active = true;\r\n                        this.animStopPoint =cc.blink(2.0,4);\r\n                    }\r\n                    else\r\n                    {\r\n                        //tmt.active = true;\r\n                        this.TutorialHand.getChildByName(\"hand_touch\").active = true;\r\n                        this.animStopPoint =cc.repeat(cc.sequence(\r\n                            cc.moveTo(0.5, ctr_tmp.position),\r\n                            cc.moveTo(0.5, cc.v2(ctr_tmp.x + 80, ctr_tmp.y + 80)),\r\n                            cc.moveTo(0.5, ctr_tmp.position),\r\n                            )\r\n                            , 3);\r\n                    }\r\n                    this.animStopPoint.setTag(2000);\r\n                    this.TutorialHand.runAction(this.animStopPoint);\r\n                }\r\n                //tmt.setContentSize(tmt.getContentSize().width + 10, tmt.getContentSize().height + 10);\r\n                //tmt.position = this.btn_dpad.position;\r\n                // if (tmt.width < 400)\r\n                // {\r\n                //     tmt.width +=  50;\r\n                //     tmt.height+=  50;\r\n                // }\r\n                //let tmp = this.TutorialHand.getActionByTag(2000);\r\n                if (this.animStopPoint && this.animStopPoint.isDone())\r\n                {\r\n                    Tutorial.tutorial_sub_status ++;\r\n                    \r\n                    this.animStopPoint = null;\r\n                    if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_move)\r\n                        this.performAction = 1;\r\n                }\r\n                \r\n                break;\r\n            case TUTORIAL_SUB_STATE.Tutorial_checkdoAction:\r\n                this.TutorialPopup.active = true;\r\n                this.setlockControl(false);\r\n                if (this.performAction == 1)\r\n                    this.TutorialPopup.getComponent(cc.Label).string = text2;\r\n\r\n                if(this.performAction == 2)\r\n                {\r\n                    if (Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill\r\n                        || Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_shield\r\n                        )\r\n                    {\r\n                        this.TutorialPopup.getComponent(cc.Label).string = \"Touch the screen to continue.\";\r\n                        this.BOTplayer.autoFire = false;\r\n                        if (this.block_skillpad)\r\n                            this.block_skillpad.active = true;\r\n\r\n                        if (this.btn_skillpad && Tutorial.tutorial_status == TUTORIAL_STATE.Tutorial_skill)\r\n                            this.btn_skillpad.opacity = 255;\r\n\r\n                        if (this.btn_dpad)\r\n                        {\r\n                            this.btn_dpad.active = !false;\r\n                            let index = this.btn_dpad.getChildByName(\"indicator\");\r\n                            if (index)\r\n                                index.opacity = 128;\r\n                        }\r\n                    }\r\n                    else \r\n                    {\r\n                        Tutorial.tutorial_sub_status ++;\r\n                    }\r\n                }\r\n                if(this.performAction == 4)\r\n                {\r\n                    Tutorial.tutorial_sub_status ++;\r\n                }\r\n                break;\r\n            default:\r\n                //Tutorial.tutorial_sub_status ++;\r\n                break;\r\n        }\r\n        \r\n        // if (Tutorial.tutorial_sub_status < TUTORIAL_SUB_STATE.Tutorial_subStepMax)\r\n        //     Tutorial.tutorial_sub_status ++;\r\n    }\r\n\r\n    onPlayNowPress()\r\n    {\r\n        SoundManager.instance.playEffect(\"sfx_ui_press\");\r\n        this.gotoMainMenu();\r\n    }\r\n}\r\n\r\n","/*\r\n * This script is automatically generated by Cocos Creator and is only used for projects compatible with v2.1.0/v2.1.1/v2.3.0/v2.3.1/v2.3.2 versions.\r\n * You do not need to manually add this script in any other project.\r\n * If you don't use cc.Action in your project, you can delete this script directly.\r\n * If your project is hosted in VCS such as git, submit this script together.\r\n *\r\n * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0/v2.1.1/v2.3.0/v2.3.1/v2.3.2 版本的工程，\r\n * 你无需在任何其它项目中手动添加此脚本。\r\n * 如果你的项目中没用到 Action，可直接删除该脚本。\r\n * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。\r\n */\r\n\r\ncc.RotateBy._reverse = true;\r\n","/*\r\n * This script is automatically generated by Cocos Creator and is only used for projects compatible with v2.1.0/v2.1.1/v2.2.1/v2.2.2 versions.\r\n * You do not need to manually add this script in any other project.\r\n * If you don't use cc.Action in your project, you can delete this script directly.\r\n * If your project is hosted in VCS such as git, submit this script together.\r\n *\r\n * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0/v2.1.1/v2.2.1/v2.2.2 版本的工程，\r\n * 你无需在任何其它项目中手动添加此脚本。\r\n * 如果你的项目中没用到 Action，可直接删除该脚本。\r\n * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。\r\n */\r\n\r\ncc.RotateTo._reverse = true;\r\n","/*\r\n * This script is automatically generated by Cocos Creator and is only used for projects compatible with the v2.1.0 ～ 2.2.1 version.\r\n * You do not need to manually add this script in any other project.\r\n * If you don't use cc.Toggle in your project, you can delete this script directly.\r\n * If your project is hosted in VCS such as git, submit this script together.\r\n *\r\n * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0 ~ 2.2.1 版本的工程，\r\n * 你无需在任何其它项目中手动添加此脚本。\r\n * 如果你的项目中没用到 Toggle，可直接删除该脚本。\r\n * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。\r\n */\r\n\r\nif (cc.Toggle) {\r\n    // Whether to trigger 'toggle' and 'checkEvents' events when modifying 'toggle.isChecked' in the code\r\n    // 在代码中修改 'toggle.isChecked' 时是否触发 'toggle' 与 'checkEvents' 事件\r\n    cc.Toggle._triggerEventInScript_isChecked = true;\r\n}\r\n","\r\n// random unique\r\nexport class RandomUnique {\r\n\r\n    private unique: number[] = [];\r\n    private initLength = -1;\r\n    private recycle: boolean = false;\r\n\r\n    constructor(length: number, recycle: boolean = false) {\r\n        this.initLength = length;\r\n        this.recycle = recycle;\r\n        for(let i = 0; i < length; i++) {\r\n            this.unique[i] = i;\r\n        }\r\n    }\r\n\r\n    random(): number {\r\n        if(this.unique.length == 0) {\r\n            if(this.recycle && this.initLength != -1) {\r\n                for(let i = 0; i < this.initLength; i++) {\r\n                    this.unique[i] = i;\r\n                }\r\n            } else {\r\n                return -1;\r\n            }            \r\n        } \r\n        let idx = Math.floor(Math.random() * (this.unique.length - 1));\r\n        let ret = this.unique[idx];\r\n        this.unique.splice(idx, 1);\r\n        return ret;\r\n    }\r\n}\r\n\r\nexport class Constant {\r\n    static MAX_SAFE_INTEGER = 9007199254740991;\r\n    static MIN_SAFE_INTEGER = -9007199254740991;\r\n}\r\n\r\nexport class Utils{\r\n\tstatic ENCODE_LOCAL_STORAGE: boolean = true;\r\n\t\r\n    public static getCurrentSceneName(): string {\r\n        let scene: string = \"\";\r\n        (cc.game as any)._sceneInfos.forEach(element => {\r\n            if(element.uuid == (cc.director as any)._scene._id) {\r\n                scene = element.url;\r\n                scene = scene.substring(scene.lastIndexOf('/')+1).match(/[^\\.]+/)[0]\r\n            }\r\n        });\r\n    \r\n        return scene;\r\n    }\r\n\r\n    // lerp from 'from' to 'to' number with ratio\r\n    public static lerp(from: number, to: number, ratio: number) {\r\n        ratio = ratio < 0 ? 0 : ratio;\r\n        ratio = ratio > 1 ? 1 : ratio;\r\n        return from + (to - from) * ratio;\r\n    }\r\n\r\n    public static genUId(): string {\r\n        return (Date.now().toString(36) + Math.random().toString(36).substr(2, 5));\r\n    }\r\n\r\n    public static extend(obj, src) {\r\n        if(src == null) return obj;\r\n        if(obj == null) obj = {};\r\n        Object.keys(src).forEach(function(key) { obj[key] = src[key]; });\r\n        return obj;\r\n    }\r\n\r\n    public static randomRange(min: number, max: number) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n\r\n    public static zeropad(n: number, d: number): string {\r\n\t\tvar s = (n < 0 ? \"-\" : \"\");\r\n\t\tif (n < 0) n = -n;\r\n\t\tvar zeroes = d - n.toString().length;\r\n\t\tfor (var i = 0; i < zeroes; i++)\r\n\t\t\ts += \"0\";\r\n        return (s + n.toString());\r\n    }\r\n\r\n    public static sign(value: number) {\r\n        return value > 0 ? 1 : value < 0 ? -1 : 0;\r\n    }\r\n\r\n    public static moveTowards(current: number, target: number, maxDelta: number): number {\r\n        if(Math.abs(target - current) <= maxDelta) {\r\n            return target;\r\n        }\r\n        return current + Utils.sign(target - current) * maxDelta;\r\n    }\r\n\r\n    public static v2MoveTowards(current: cc.Vec2, target: cc.Vec2, maxDelta: number): cc.Vec2 {\r\n        let diff = target.sub(current);\r\n        let mag = diff.mag();\r\n        if(mag <=  maxDelta || mag == 0) {\r\n            return target;\r\n        }\r\n        return current.add(diff.div(mag).mul(maxDelta))\r\n    }\r\n\t\r\n\t/**\r\n     * add padding number - exp: (n = 1, d = 2) => 1 = 01\r\n     * @param n \r\n     * @param d \r\n     */\r\n    public static zeropad(n: number, d: number): string \r\n    {\r\n\t\tvar s = (n < 0 ? \"-\" : \"\");\r\n\t\tif (n < 0) n = -n;\r\n\t\tvar zeroes = d - n.toString().length;\r\n\t\tfor (var i = 0; i < zeroes; i++)\r\n\t\t\ts += \"0\";\r\n        return (s + n.toString());\r\n    }\r\n\t\r\n\tpublic static Atob (a: any): any \r\n    {\r\n        if (a != null && this.ENCODE_LOCAL_STORAGE) \r\n        {\r\n            return atob(a);\r\n        }\r\n        return a;\r\n    }\r\n\t\r\n\tpublic static Btoa (a: any): any {\r\n        if (a != null && this.ENCODE_LOCAL_STORAGE) \r\n        {\r\n            return btoa(a);\r\n        }\r\n        return a;\r\n    }   \r\n}","// Re-align widget when parent size change\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class WidgetAlign extends cc.Component {\r\n\r\n    private widget: cc.Widget;\r\n\r\n    start () {\r\n        this.node.parent.on(cc.Node.EventType.SIZE_CHANGED, this.onParentSizeChange, this);\r\n        this.widget = this.getComponent(cc.Widget);\r\n    }\r\n\r\n    onParentSizeChange() {\r\n        this.widget.updateAlignment();\r\n    }\r\n}\r\n"],"file":"project.js"}